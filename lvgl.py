# Detect current platform
_is_micropython = None
_is_windows = None
_is_linux = None

_target_library = None

try:
    import micropython

    _is_micropython = True
    _is_windows = False
    _is_linux = True

    _target_library = 'lvgl-arm-linux-uclibc.so'
except:
    _is_micropython = False

    try:
        import cffi
        import platform

        architecture = platform.architecture()
        _is_windows = architecture[1] == 'WindowsPE'
        _is_linux = architecture[1] == 'ELF'

        if _is_windows:
            if architecture[0] == '32bit':
                _target_library = 'lvgl-x86-windows.dll'
            elif architecture[0] == '64bit':
                _target_library = 'lvgl-x64-windows.dll'
        elif _is_linux:
            _target_library = 'lvgl-arm-linux-uclibc.so'
    except:
        pass

if _is_micropython is None or _target_library is None:
    raise Exception('Current platform is not supported')

class helpers:
    def is_windows():
        return not _is_micropython and _is_windows == True
    def is_linux():
        return _is_micropython or _is_linux == True
    def is_cpython():
        return not _is_micropython
    def is_micropython():
        return _is_micropython

# Find the library
if _is_micropython:
    import uos as os
else:
    import os
    
def exists(path):
    try:
        os.stat(path)
        return True
    except:
        return False

_library_path = f'{os.getcwd()}/{_target_library}'
if not exists(_library_path):
    _library_path = f'{os.path.dirname(os.path.realpath(__file__))}/{_target_library}'
if not exists(_library_path):
    raise Exception(f'Unable to find library {_target_library}')

# Load the library
if _is_micropython:
    import ffi
    _lvgl = ffi.open(_library_path)
else:
    import _cffi_backend
    ffi = eval("_cffi_backend.FFI('lvgl_ffi',     _version = 0x2601,     _types = b'\\x00\\x00\\x55\\x0D\\x00\\x00\\x02\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x6B\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x04\\x11\\x00\\x06\\xB8\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x6C\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x71\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x82\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x0C\\x09\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x13\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x0E\\x09\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x87\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x20\\x11\\x00\\x0D\\xF3\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\x8C\\x03\\x00\\x00\\x55\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xAE\\x03\\x00\\x0D\\xAD\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x2F\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xBE\\x03\\x00\\x0D\\xBB\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xC6\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xD9\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xD9\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xEE\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xEE\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0D\\xFA\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x0A\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x01\\x03\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x30\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x10\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x24\\x03\\x00\\x00\\x65\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x0D\\x70\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x0F\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x4F\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x0A\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x0D\\x70\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x0E\\x05\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x3C\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x0E\\x10\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x15\\x03\\x00\\x01\\x88\\x03\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\xA0\\x11\\x00\\x0E\\x14\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\xA0\\x11\\x00\\x0E\\x58\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x24\\x03\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x65\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x2D\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x33\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x0E\\x36\\x03\\x00\\x00\\x12\\x01\\x00\\x00\\xC2\\x03\\x00\\x00\\xBD\\x11\\x00\\x0C\\xFD\\x03\\x00\\x0E\\x58\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\xBB\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\xC0\\x11\\x00\\x0D\\x13\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x55\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\x01\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\xD3\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\xD3\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x07\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xD3\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x09\\x33\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x1B\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x0E\\x1D\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x54\\x0D\\x00\\x0E\\x26\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xE3\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xE3\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xE3\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xE3\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x09\\xD5\\x0D\\x00\\x00\\x84\\x11\\x00\\x0D\\x7F\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x37\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x37\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x53\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x13\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x0D\\x6B\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x0D\\x87\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x01\\x59\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x0D\\xAF\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x37\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x8C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC9\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x01\\x85\\x0D\\x00\\x00\\x17\\x01\\x00\\x00\\x11\\x01\\x00\\x00\\x00\\x0F\\x00\\x01\\x86\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x04\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x08\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x04\\x0D\\x00\\x01\\x53\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x04\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x04\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x04\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\xCE\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0B\\x0D\\x00\\x00\\x00\\x0F\\x00\\x09\\x83\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x88\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x70\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x09\\x92\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x09\\x96\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x09\\x9F\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\x77\\x0D\\x00\\x0D\\xE0\\x03\\x00\\x0D\\xDC\\x03\\x00\\x00\\x2B\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x04\\x97\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\x7A\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xFB\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x15\\x0B\\x00\\x00\\x00\\x0F\\x00\\x01\\x22\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x10\\x0B\\x00\\x00\\x00\\x0F\\x00\\x01\\x22\\x0D\\x00\\x00\\x84\\x11\\x00\\x0D\\x7F\\x03\\x00\\x00\\x00\\x0F\\x00\\x0A\\x0E\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x04\\x25\\x0D\\x00\\x0D\\x71\\x03\\x00\\x00\\x00\\x0F\\x00\\x04\\x25\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x04\\x25\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x15\\x11\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x15\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x19\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\x85\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\x85\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x0D\\x84\\x03\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\xC9\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x3F\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x02\\x17\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x14\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x1C\\x0D\\x00\\x00\\x00\\x0F\\x00\\x01\\xC0\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\xC0\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x47\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\x20\\x0D\\x00\\x0E\\x59\\x03\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x07\\x78\\x0D\\x00\\x0D\\xA5\\x03\\x00\\x00\\x00\\x0F\\x00\\x07\\x7B\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x7E\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x81\\x0D\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x0D\\x8B\\x03\\x00\\x00\\x2B\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x02\\x5E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x0D\\x8C\\x03\\x00\\x00\\x19\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x00\\x2B\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x0D\\xDF\\x03\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x69\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x07\\xAB\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\xB1\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\xB4\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\xBA\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x50\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x50\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x02\\x50\\x0D\\x00\\x00\\x24\\x11\\x00\\x02\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0D\\xA6\\x0D\\x00\\x0D\\xA5\\x03\\x00\\x00\\x00\\x0F\\x00\\x07\\xE0\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xF3\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x2F\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x2F\\x11\\x00\\x07\\xE5\\x03\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x30\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\xF4\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\xF4\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x07\\xF4\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x21\\x0B\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x07\\xF4\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x07\\xF4\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x15\\x01\\x00\\x02\\xC6\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x37\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x37\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\x3D\\x0D\\x00\\x00\\x02\\x01\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x0D\\xC5\\x03\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x02\\xDE\\x11\\x00\\x00\\xD3\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x02\\xDE\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xD3\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x0F\\x03\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x25\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x0D\\xC9\\x03\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x03\\x0D\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x23\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x03\\x0D\\x11\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x03\\x0D\\x11\\x00\\x00\\x16\\x01\\x00\\x02\\xFC\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x03\\x0D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xD1\\x0D\\x00\\x03\\x0D\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x40\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x40\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x40\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x40\\x0D\\x00\\x00\\x00\\x0F\\x00\\x0D\\xDA\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\x67\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\xB2\\x0D\\x00\\x01\\xB2\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\xB2\\x0D\\x00\\x00\\x00\\x0F\\x00\\x07\\xA8\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x04\\x46\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xE4\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x08\\x7D\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x0D\\xED\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x46\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x46\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x46\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x46\\x0D\\x00\\x00\\x31\\x0B\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x46\\x0D\\x00\\x00\\x00\\x0F\\x00\\x03\\x58\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x04\\x81\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x04\\xAA\\x03\\x00\\x00\\x00\\x0F\\x00\\x04\\x81\\x0D\\x00\\x00\\x00\\x0F\\x00\\x0A\\x7A\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\x84\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x24\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x24\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\x8C\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x8C\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x43\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x8C\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x01\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x8C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x0E\\x0C\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x50\\x0D\\x00\\x00\\x00\\x0F\\x00\\x0E\\x0B\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x90\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x01\\x0C\\x11\\x00\\x0C\\x03\\x03\\x00\\x00\\x50\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x01\\x0C\\x11\\x00\\x03\\xDE\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xBF\\x0D\\x00\\x01\\x0C\\x11\\x00\\x03\\xDE\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xCB\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x03\\xFE\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x0D\\x0D\\x00\\x00\\x61\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x94\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x10\\x0D\\x00\\x00\\x50\\x11\\x00\\x0D\\x7E\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x10\\x0D\\x00\\x0E\\x0D\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xA6\\x0D\\x00\\x00\\xA6\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xA6\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xA6\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xA6\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x0E\\x11\\x00\\x01\\xCF\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x0D\\x82\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\x25\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\x25\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\x25\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x12\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x12\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x69\\x11\\x00\\x0D\\xE1\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x2B\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x2F\\x11\\x00\\x01\\x60\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x73\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x02\\x73\\x11\\x00\\x00\\xAA\\x11\\x00\\x0D\\xDE\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x01\\xB2\\x11\\x00\\x02\\x73\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x01\\xB2\\x11\\x00\\x02\\x73\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x01\\xB2\\x11\\x00\\x02\\x73\\x11\\x00\\x0D\\xE3\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x0D\\xEF\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\x81\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x8C\\x11\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x84\\x11\\x00\\x0D\\x7B\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x0E\\x30\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\xC0\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\xA0\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x54\\x0B\\x00\\x0D\\x10\\x03\\x00\\x00\\x1C\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\xAA\\x11\\x00\\x04\\x79\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x08\\x6E\\x03\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x04\\xA6\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x16\\x0D\\x00\\x00\\x00\\x0F\\x00\\x0A\\xD9\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xDD\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xEF\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xF3\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xF7\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0A\\xFB\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x1C\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x1D\\x03\\x00\\x00\\x00\\x0F\\x00\\x0A\\xFF\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0B\\x03\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\x09\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\x09\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x61\\x11\\x00\\x00\\x00\\x0F\\x00\\x01\\x09\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x22\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x04\\xF5\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x22\\x0D\\x00\\x00\\x65\\x11\\x00\\x00\\x12\\x01\\x00\\x04\\xE7\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xAD\\x0D\\x00\\x01\\x09\\x11\\x00\\x00\\x00\\x0F\\x00\\x04\\xF5\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x2F\\x09\\x00\\x00\\x00\\x0F\\x00\\x04\\xF5\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x04\\xF5\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x01\\x0C\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0B\\x23\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0B\\x27\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0B\\x27\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x50\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x50\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x37\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x50\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x37\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x50\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x07\\x50\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\xB8\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xB8\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xB8\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xB8\\x0D\\x00\\x0C\\xDF\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xB8\\x0D\\x00\\x00\\x00\\x0F\\x00\\x05\\x34\\x0D\\x00\\x0E\\x34\\x03\\x00\\x0E\\x36\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xA2\\x0D\\x00\\x00\\xD3\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xA2\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xA2\\x0D\\x00\\x00\\x54\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xA2\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x07\\x01\\x00\\x00\\x07\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x37\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x14\\x01\\x00\\x00\\x14\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x98\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x01\\x53\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x04\\x25\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\xC6\\x03\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x12\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x20\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x01\\x59\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x02\\x5E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x2F\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x46\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x0D\\xFA\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x84\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x8C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x0B\\xBD\\x03\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x0F\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x0A\\x09\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x80\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\x80\\x0D\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x01\\x53\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x01\\xCF\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x12\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x02\\x5E\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x2B\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x02\\x98\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x30\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\x54\\x11\\x00\\x03\\x12\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x0D\\xEF\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x05\\xA6\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x05\\xA6\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x03\\xBF\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x0E\\x0C\\x03\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\xA6\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x1C\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\x1C\\x01\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x00\\xC0\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x1C\\x01\\x00\\x01\\x17\\x03\\x00\\x00\\x00\\x0F\\x00\\x0B\\xCA\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xAA\\x0D\\x00\\x00\\x38\\x11\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xAA\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\xAA\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x2D\\x0B\\x00\\x00\\x00\\x0F\\x00\\x00\\xAA\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x14\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x13\\x01\\x00\\x00\\x13\\x01\\x00\\x00\\x13\\x01\\x00\\x00\\x13\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x01\\x4F\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x01\\x52\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x06\\xA2\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\x08\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x04\\x11\\x00\\x00\\xCE\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0B\\x11\\x00\\x00\\x16\\x01\\x00\\x01\\x53\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x88\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x88\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x88\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x70\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x07\\x0B\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0E\\x11\\x00\\x01\\xCF\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x0E\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x04\\x25\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x05\\xE4\\x03\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x15\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x84\\x03\\x00\\x02\\x01\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x80\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x16\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x17\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x02\\x69\\x11\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x0E\\x2F\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\x43\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x07\\x43\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x07\\x20\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x07\\x38\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x20\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x88\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x89\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x8A\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x8B\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\x81\\x11\\x00\\x06\\x68\\x03\\x00\\x04\\xA6\\x11\\x00\\x06\\x70\\x03\\x00\\x07\\xA2\\x03\\x00\\x07\\x88\\x11\\x00\\x05\\xD0\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x2B\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x2C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x69\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x2B\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x2B\\x11\\x00\\x0D\\xE1\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x8E\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x8F\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x90\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x92\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x95\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x96\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x99\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x50\\x11\\x00\\x07\\xAE\\x11\\x00\\x07\\xAB\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x50\\x11\\x00\\x07\\xAE\\x11\\x00\\x00\\x61\\x11\\x00\\x00\\x37\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\xBF\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x50\\x11\\x00\\x0D\\x90\\x03\\x00\\x0D\\xDF\\x03\\x00\\x0D\\x91\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x50\\x11\\x00\\x0D\\x92\\x03\\x00\\x00\\x70\\x11\\x00\\x07\\xCB\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x98\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\xA7\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x2F\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x60\\x11\\x00\\x00\\x14\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x38\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\xBE\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\xF4\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\xF4\\x11\\x00\\x02\\xC6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x37\\x11\\x00\\x00\\x38\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x3D\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\xCA\\x03\\x00\\x00\\x02\\x01\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\xD5\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x08\\x0C\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x08\\x0C\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x27\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x08\\x0C\\x11\\x00\\x00\\x1C\\x03\\x00\\x05\\xFD\\x11\\x00\\x05\\xFD\\x11\\x00\\x00\\x07\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x29\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x08\\x23\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x40\\x11\\x00\\x08\\x26\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x02\\x73\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x02\\x73\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x04\\x6C\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x04\\x70\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x04\\x76\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\xB2\\x11\\x00\\x08\\x40\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\xA8\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\xA8\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x07\\x01\\x00\\x00\\x07\\x01\\x00\\x00\\x07\\x01\\x00\\x00\\x07\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x20\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x1A\\x0B\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x40\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x0D\\xE9\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x2F\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x03\\x58\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x61\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x02\\xAA\\x11\\x00\\x00\\xF3\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x46\\x11\\x00\\x08\\x77\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4A\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x04\\x81\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x04\\x81\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x04\\x81\\x11\\x00\\x04\\xA6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x88\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x89\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x8A\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x8E\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x07\\xCF\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x07\\xB4\\x11\\x00\\x00\\x61\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x07\\xD7\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x07\\xB7\\x11\\x00\\x00\\x61\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x96\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\x99\\x03\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x02\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x0D\\xA7\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x07\\xD0\\x11\\x00\\x00\\x70\\x11\\x00\\x07\\xCF\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x24\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x24\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\x4D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x4D\\x11\\x00\\x04\\xA6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\xFC\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0E\\x05\\x03\\x00\\x01\\x60\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x42\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xC9\\x03\\x00\\x09\\x45\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x09\\x45\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x06\\xFC\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x06\\xFC\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x06\\xFC\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x53\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x09\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x70\\x11\\x00\\x02\\x69\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x0A\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x0B\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x0C\\x0B\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x0D\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x09\\x9F\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x0E\\x0B\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x76\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x76\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x04\\x97\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\xC5\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x03\\xFB\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x03\\xFB\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\xC9\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x09\\x45\\x11\\x00\\x09\\x45\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x09\\x45\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x22\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x11\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\x02\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\x69\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1C\\x0B\\x00\\x0A\\x31\\x11\\x00\\x0A\\x31\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\x31\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x1D\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\x3C\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x37\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x26\\x0B\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0D\\xD5\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x28\\x0B\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x0A\\x54\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\x54\\x11\\x00\\x0A\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\x54\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x2A\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x04\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x06\\x90\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x06\\x90\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x33\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\x7A\\x11\\x00\\x09\\x33\\x11\\x00\\x09\\xAD\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x34\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x24\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0D\\xFB\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x37\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x38\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x90\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x90\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x84\\x11\\x00\\x06\\xFC\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x03\\xC3\\x03\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x0D\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x03\\xFE\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x43\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x19\\x03\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0A\\xDD\\x11\\x00\\x00\\x65\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x44\\x0B\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x45\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x46\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x47\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x48\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x49\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x4A\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x09\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x09\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x09\\x11\\x00\\x00\\x65\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x65\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0E\\x25\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x4E\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x50\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x0B\\x27\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x52\\x0B\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x14\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x02\\xF6\\x11\\x00\\x02\\xF6\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x76\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\x78\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\xB1\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\xB4\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\xBA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x07\\xBD\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x7C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x15\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x04\\xF5\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x03\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x50\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\xD3\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x88\\x11\\x00\\x00\\x3D\\x0B\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x70\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x94\\x11\\x00\\x0B\\xE5\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x1C\\x01\\x00\\x0B\\xE5\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x84\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x03\\xBF\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x03\\xBF\\x11\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0A\\xCB\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0A\\xCB\\x11\\x00\\x0A\\xCB\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x94\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x37\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x01\\x2F\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x94\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x94\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x61\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x94\\x11\\x00\\x00\\x94\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x94\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x61\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xA0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0A\\xDD\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0A\\xDD\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\xAD\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x09\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x09\\x45\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x06\\xFC\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x01\\x53\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x09\\x9A\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x09\\x9F\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x09\\xA8\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x02\\x02\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0A\\x31\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0A\\x3C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x37\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0A\\x4A\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0A\\x4F\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0A\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x65\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0B\\x1A\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0B\\x27\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x0B\\x30\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x14\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\x12\\x01\\x00\\x04\\xF5\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAD\\x11\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0E\\x25\\x03\\x00\\x05\\xFD\\x11\\x00\\x06\\xB6\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\xD3\\x11\\x00\\x00\\xD3\\x11\\x00\\x00\\x1C\\x01\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x54\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\x1C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x01\\x0C\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x01\\x0C\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\x50\\x11\\x00\\x00\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\x50\\x11\\x00\\x07\\x50\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x07\\x50\\x11\\x00\\x0C\\xD3\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xB8\\x11\\x00\\x05\\x2C\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x05\\x33\\x11\\x00\\x05\\x34\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x05\\x34\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xBB\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x05\\xE1\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x16\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x16\\x01\\x00\\x0E\\x20\\x03\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xC0\\x11\\x00\\x00\\x12\\x01\\x00\\x00\\x1C\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x01\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x00\\x15\\x01\\x00\\x07\\x47\\x11\\x00\\x00\\x19\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\xAA\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x16\\x01\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x0D\\x04\\x03\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x04\\xA6\\x11\\x00\\x00\\xC0\\x11\\x00\\x00\\x00\\x0F\\x00\\x0E\\x58\\x0D\\x00\\x00\\x00\\x0F\\x00\\x02\\xAA\\x0D\\x00\\x00\\x30\\x11\\x00\\x00\\x00\\x0F\\x00\\x08\\x34\\x0D\\x00\\x00\\x43\\x11\\x00\\x00\\x00\\x0F\\x00\\x08\\x38\\x0D\\x00\\x00\\x43\\x11\\x00\\x00\\x00\\x0F\\x00\\x08\\x9F\\x0D\\x00\\x00\\x46\\x11\\x00\\x00\\x00\\x0F\\x00\\x00\\x35\\x09\\x00\\x00\\x36\\x09\\x00\\x00\\x37\\x09\\x00\\x00\\x38\\x09\\x00\\x00\\x39\\x09\\x00\\x00\\x3A\\x09\\x00\\x00\\x3B\\x09\\x00\\x00\\x3C\\x09\\x00\\x00\\x3D\\x09\\x00\\x00\\x36\\x03\\x00\\x00\\x3C\\x03\\x00\\x00\\x6D\\x03\\x00\\x00\\x01\\x0B\\x00\\x00\\x02\\x0B\\x00\\x00\\x03\\x0B\\x00\\x00\\x04\\x0B\\x00\\x00\\x00\\x0B\\x00\\x00\\x05\\x0B\\x00\\x00\\x06\\x0B\\x00\\x01\\x86\\x03\\x00\\x00\\x19\\x01\\x00\\x00\\x07\\x09\\x00\\x00\\x3F\\x09\\x00\\x00\\x40\\x09\\x00\\x00\\x08\\x0B\\x00\\x00\\x41\\x09\\x00\\x00\\x42\\x09\\x00\\x00\\x08\\x09\\x00\\x00\\x43\\x09\\x00\\x00\\x44\\x09\\x00\\x00\\x45\\x09\\x00\\x00\\x46\\x09\\x00\\x00\\x47\\x09\\x00\\x00\\x48\\x09\\x00\\x0D\\x78\\x03\\x00\\x00\\x49\\x09\\x00\\x00\\x4A\\x09\\x00\\x0D\\x7B\\x03\\x00\\x00\\x09\\x09\\x00\\x00\\x4B\\x09\\x00\\x00\\x4C\\x09\\x00\\x00\\x4D\\x09\\x00\\x00\\x4E\\x09\\x00\\x00\\x4F\\x09\\x00\\x00\\x50\\x09\\x00\\x00\\x51\\x09\\x00\\x00\\x0B\\x09\\x00\\x00\\x52\\x09\\x00\\x00\\x0D\\x09\\x00\\x00\\x53\\x09\\x00\\x00\\x54\\x09\\x00\\x00\\x0F\\x09\\x00\\x00\\x10\\x09\\x00\\x00\\x11\\x09\\x00\\x00\\x55\\x09\\x00\\x00\\x56\\x09\\x00\\x00\\x12\\x09\\x00\\x00\\x13\\x09\\x00\\x00\\x57\\x09\\x00\\x00\\x58\\x09\\x00\\x00\\x59\\x09\\x00\\x00\\x14\\x09\\x00\\x0D\\x94\\x03\\x00\\x00\\x5A\\x09\\x00\\x00\\x15\\x09\\x00\\x00\\x16\\x09\\x00\\x00\\x5B\\x09\\x00\\x00\\x5C\\x09\\x00\\x00\\x17\\x09\\x00\\x00\\x5D\\x09\\x00\\x00\\x5E\\x09\\x00\\x00\\x5F\\x09\\x00\\x00\\x60\\x09\\x00\\x00\\x61\\x09\\x00\\x00\\x62\\x09\\x00\\x00\\x63\\x09\\x00\\x00\\x64\\x09\\x00\\x00\\x65\\x09\\x00\\x00\\x66\\x09\\x00\\x00\\x18\\x0B\\x00\\x00\\x67\\x09\\x00\\x00\\x19\\x0B\\x00\\x00\\x18\\x09\\x00\\x00\\x68\\x09\\x00\\x00\\x69\\x09\\x00\\x00\\x6A\\x09\\x00\\x00\\x6B\\x09\\x00\\x00\\x6C\\x09\\x00\\x00\\x6D\\x09\\x00\\x00\\x19\\x09\\x00\\x00\\x6E\\x09\\x00\\x00\\x6F\\x09\\x00\\x00\\x70\\x09\\x00\\x00\\x1E\\x0B\\x00\\x0D\\xB4\\x03\\x00\\x00\\x1A\\x09\\x00\\x00\\x1F\\x0B\\x00\\x00\\x1B\\x09\\x00\\x0D\\xB8\\x03\\x00\\x00\\x1C\\x09\\x00\\x00\\x1D\\x09\\x00\\x00\\x1E\\x09\\x00\\x00\\x1F\\x09\\x00\\x00\\x20\\x0B\\x00\\x00\\x22\\x0B\\x00\\x00\\x71\\x09\\x00\\x00\\x72\\x09\\x00\\x00\\x73\\x09\\x00\\x00\\x74\\x09\\x00\\x00\\x75\\x09\\x00\\x00\\x76\\x09\\x00\\x00\\x77\\x09\\x00\\x00\\x20\\x09\\x00\\x00\\x78\\x09\\x00\\x0D\\xC8\\x03\\x00\\x00\\x79\\x09\\x00\\x00\\x21\\x09\\x00\\x00\\x7A\\x09\\x00\\x02\\xE9\\x03\\x00\\x02\\xED\\x03\\x00\\x02\\xF3\\x03\\x00\\x02\\xF8\\x03\\x00\\x02\\xFE\\x03\\x00\\x03\\x05\\x03\\x00\\x00\\x24\\x0B\\x00\\x00\\x7B\\x09\\x00\\x00\\x7C\\x09\\x00\\x00\\x7D\\x09\\x00\\x00\\x22\\x09\\x00\\x00\\x23\\x09\\x00\\x0D\\xD6\\x05\\x00\\x00\\x00\\x02\\x00\\x00\\x7E\\x09\\x00\\x0D\\xDB\\x03\\x00\\x00\\x7F\\x09\\x00\\x00\\x80\\x09\\x00\\x00\\x2B\\x0B\\x00\\x00\\x81\\x09\\x00\\x00\\x82\\x09\\x00\\x00\\x83\\x09\\x00\\x00\\x24\\x09\\x00\\x00\\x84\\x09\\x00\\x00\\x25\\x09\\x00\\x00\\x2C\\x0B\\x00\\x00\\x85\\x09\\x00\\x00\\x86\\x09\\x00\\x00\\x87\\x09\\x00\\x00\\x88\\x09\\x00\\x00\\x26\\x09\\x00\\x00\\x2E\\x0B\\x00\\x0D\\xEA\\x05\\x00\\x00\\x00\\x06\\x00\\x00\\x30\\x0B\\x00\\x00\\x89\\x09\\x00\\x00\\x8A\\x09\\x00\\x00\\x32\\x0B\\x00\\x00\\x8B\\x09\\x00\\x00\\x8C\\x09\\x00\\x00\\x8D\\x09\\x00\\x00\\x35\\x0B\\x00\\x00\\x36\\x0B\\x00\\x00\\x8E\\x09\\x00\\x00\\x8F\\x09\\x00\\x00\\x90\\x09\\x00\\x00\\x91\\x09\\x00\\x00\\x27\\x09\\x00\\x00\\x92\\x09\\x00\\x00\\x28\\x09\\x00\\x00\\x93\\x09\\x00\\x00\\x94\\x09\\x00\\x00\\x95\\x09\\x00\\x00\\x96\\x09\\x00\\x00\\x97\\x09\\x00\\x00\\x98\\x09\\x00\\x00\\x39\\x0B\\x00\\x00\\x3A\\x0B\\x00\\x00\\x99\\x09\\x00\\x00\\x3B\\x0B\\x00\\x00\\x9A\\x09\\x00\\x00\\x9B\\x09\\x00\\x00\\x9C\\x09\\x00\\x00\\x9D\\x09\\x00\\x00\\x3E\\x0B\\x00\\x00\\x9E\\x09\\x00\\x00\\x29\\x09\\x00\\x0E\\x0D\\x05\\x00\\x00\\x00\\x03\\x00\\x00\\x2A\\x09\\x00\\x00\\x9F\\x09\\x00\\x00\\xA0\\x09\\x00\\x00\\x40\\x0B\\x00\\x00\\xA1\\x09\\x00\\x00\\xA2\\x09\\x00\\x00\\x41\\x0B\\x00\\x00\\xA3\\x09\\x00\\x00\\xA4\\x09\\x00\\x00\\xA5\\x09\\x00\\x00\\xA6\\x09\\x00\\x00\\xA7\\x09\\x00\\x00\\xA8\\x09\\x00\\x00\\xA9\\x09\\x00\\x00\\xAA\\x09\\x00\\x00\\xAB\\x09\\x00\\x00\\x2B\\x09\\x00\\x00\\x2C\\x09\\x00\\x00\\x4B\\x0B\\x00\\x00\\x4C\\x0B\\x00\\x00\\x2D\\x09\\x00\\x00\\x2E\\x09\\x00\\x00\\x30\\x09\\x00\\x00\\x4D\\x0B\\x00\\x00\\x31\\x09\\x00\\x00\\xAC\\x09\\x00\\x00\\xAD\\x09\\x00\\x00\\xAE\\x09\\x00\\x00\\xAF\\x09\\x00\\x00\\x51\\x0B\\x00\\x00\\xB0\\x09\\x00\\x00\\xB1\\x09\\x00\\x00\\x32\\x09\\x00\\x00\\xB2\\x09\\x00\\x00\\xB3\\x09\\x00\\x00\\xB4\\x09\\x00\\x00\\xB5\\x09\\x00\\x05\\x34\\x03\\x00\\x00\\xB6\\x09\\x00\\x00\\xB7\\x09\\x00\\x00\\xB8\\x09\\x00\\x00\\xB9\\x09\\x00\\x00\\xBA\\x09\\x00\\x00\\xBB\\x09\\x00\\x00\\xBC\\x09\\x00\\x00\\xBD\\x09\\x00\\x00\\xBE\\x09\\x00\\x00\\xBF\\x09\\x00\\x00\\xC0\\x09\\x00\\x00\\x33\\x09\\x00\\x00\\x34\\x09\\x00\\x00\\x00\\x09\\x00\\x00\\x01\\x09\\x00\\x00\\x02\\x09\\x00\\x00\\x05\\x09\\x00\\x00\\x06\\x09\\x00\\x00\\xC1\\x09\\x00\\x00\\x98\\x03\\x00\\x00\\x1A\\x01\\x00\\x00\\x03\\x09\\x00\\x00\\x04\\x09\\x00\\x00\\x3E\\x09\\x00\\x06\\x24\\x03\\x00\\x06\\x28\\x03\\x00\\x00\\xC0\\x05\\x00\\x00\\x00\\x06\\x00\\x06\\x87\\x03\\x00\\x07\\xCD\\x03\\x00\\x07\\xFE\\x03\\x00\\x08\\xEC\\x03\\x00\\x09\\x1A\\x03\\x00\\x0C\\xF6\\x03\\x00\\x00\\x00\\x01\\x00\\x00\\x10\\x01\\x00\\x00\\xC2\\x09',     _globals = (b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_BOTTOM_LEFT',4,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_BOTTOM_MID',5,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_BOTTOM_RIGHT',6,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_CENTER',9,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_DEFAULT',0,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_LEFT_MID',7,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_BOTTOM_LEFT',13,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_BOTTOM_MID',14,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_BOTTOM_RIGHT',15,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_LEFT_BOTTOM',18,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_LEFT_MID',17,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_LEFT_TOP',16,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_RIGHT_BOTTOM',21,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_RIGHT_MID',20,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_RIGHT_TOP',19,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_TOP_LEFT',10,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_TOP_MID',11,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_OUT_TOP_RIGHT',12,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_RIGHT_MID',8,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_TOP_LEFT',1,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_TOP_MID',2,b'\\xFF\\xFF\\xFF\\x0BLV_ALIGN_TOP_RIGHT',3,b'\\xFF\\xFF\\xFF\\x0BLV_ANIM_IMAGE_PART_MAIN',0,b'\\xFF\\xFF\\xFF\\x0BLV_ARC_MODE_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_ARC_MODE_REVERSE',2,b'\\xFF\\xFF\\xFF\\x0BLV_ARC_MODE_SYMMETRICAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_MODE_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_MODE_RANGE',2,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_MODE_SYMMETRICAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_ORIENTATION_AUTO',0,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_ORIENTATION_HORIZONTAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_BAR_ORIENTATION_VERTICAL',2,b'\\xFF\\xFF\\xFF\\x0BLV_BASE_DIR_AUTO',2,b'\\xFF\\xFF\\xFF\\x0BLV_BASE_DIR_LTR',0,b'\\xFF\\xFF\\xFF\\x0BLV_BASE_DIR_NEUTRAL',32,b'\\xFF\\xFF\\xFF\\x0BLV_BASE_DIR_RTL',1,b'\\xFF\\xFF\\xFF\\x0BLV_BASE_DIR_WEAK',33,b'\\xFF\\xFF\\xFF\\x0BLV_BLEND_MODE_ADDITIVE',1,b'\\xFF\\xFF\\xFF\\x0BLV_BLEND_MODE_DIFFERENCE',4,b'\\xFF\\xFF\\xFF\\x0BLV_BLEND_MODE_MULTIPLY',3,b'\\xFF\\xFF\\xFF\\x0BLV_BLEND_MODE_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_BLEND_MODE_SUBTRACTIVE',2,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_BOTTOM',1,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_FULL',15,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_INTERNAL',16,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_LEFT',4,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_RIGHT',8,b'\\xFF\\xFF\\xFF\\x0BLV_BORDER_SIDE_TOP',2,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_CHECKABLE',128,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_CHECKED',256,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_CLICK_TRIG',512,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_CUSTOM_1',16384,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_CUSTOM_2',32768,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_DISABLED',64,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_HIDDEN',16,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_NO_REPEAT',32,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_POPOVER',1024,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_RECOLOR',2048,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_RESERVED_1',4096,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_RESERVED_2',8192,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_1',1,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_10',10,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_11',11,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_12',12,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_13',13,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_14',14,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_15',15,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_2',2,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_3',3,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_4',4,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_5',5,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_6',6,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_7',7,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_8',8,b'\\xFF\\xFF\\xFF\\x0BLV_BUTTONMATRIX_CTRL_WIDTH_9',9,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_AXIS_LAST',5,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_AXIS_PRIMARY_X',2,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_AXIS_PRIMARY_Y',0,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_AXIS_SECONDARY_X',4,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_AXIS_SECONDARY_Y',1,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_TYPE_BAR',2,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_TYPE_LINE',1,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_TYPE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_TYPE_SCATTER',3,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_UPDATE_MODE_CIRCULAR',1,b'\\xFF\\xFF\\xFF\\x0BLV_CHART_UPDATE_MODE_SHIFT',0,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_A1',11,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_A2',12,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_A4',13,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_A8',14,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_AL88',21,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_ARGB1555',22,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_ARGB2222',24,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_ARGB4444',23,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_ARGB8565',19,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_ARGB8888',16,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I1',7,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I2',8,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I4',9,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I400',35,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I420',32,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I422',33,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I444',34,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_I8',10,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_L8',6,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NATIVE',18,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NATIVE_WITH_ALPHA',20,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC12',52,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC12A',53,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC4',48,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC6',49,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC6A',50,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC6AP',51,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC_END',53,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NEMA_TSC_START',48,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NV12',37,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_NV21',36,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_PROPRIETARY_START',48,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_RAW',1,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_RAW_ALPHA',2,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_RGB565',18,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_RGB565A8',20,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_RGB888',15,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_UNKNOWN',0,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_UYVY',39,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_XRGB8888',17,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_YUV_END',39,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_YUV_START',32,b'\\xFF\\xFF\\xFF\\x0BLV_COLOR_FORMAT_YUY2',38,b'\\xFF\\xFF\\xFF\\x0BLV_COVER_RES_COVER',0,b'\\xFF\\xFF\\xFF\\x0BLV_COVER_RES_MASKED',2,b'\\xFF\\xFF\\xFF\\x0BLV_COVER_RES_NOT_COVER',1,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_ALL',15,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_BOTTOM',8,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_HOR',3,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_LEFT',1,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_RIGHT',2,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_TOP',4,b'\\xFF\\xFF\\xFF\\x0BLV_DIR_VER',12,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_RENDER_MODE_DIRECT',1,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_RENDER_MODE_FULL',2,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_RENDER_MODE_PARTIAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_ROTATION_0',0,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_ROTATION_180',2,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_ROTATION_270',3,b'\\xFF\\xFF\\xFF\\x0BLV_DISPLAY_ROTATION_90',1,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_STATE_IN_PROGRESS',2,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_STATE_QUEUED',1,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_STATE_READY',3,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_STATE_WAITING',0,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_ARC',9,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_BORDER',2,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_BOX_SHADOW',3,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_FILL',1,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_IMAGE',6,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_LABEL',5,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_LAYER',7,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_LETTER',4,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_LINE',8,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_MASK_BITMAP',12,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_MASK_RECTANGLE',11,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_TRIANGLE',10,b'\\xFF\\xFF\\xFF\\x0BLV_DRAW_TASK_TYPE_VECTOR',13,b'\\xFF\\xFF\\xFF\\x0BLV_EVDEV_TYPE_ABS',1,b'\\xFF\\xFF\\xFF\\x0BLV_EVDEV_TYPE_KEY',2,b'\\xFF\\xFF\\xFF\\x0BLV_EVDEV_TYPE_REL',0,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_ALL',0,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CANCEL',39,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CHILD_CHANGED',42,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CHILD_CREATED',43,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CHILD_DELETED',44,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CLICKED',10,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_COLOR_FORMAT_CHANGED',55,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_COVER_CHECK',26,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_CREATE',40,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DEFOCUSED',20,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DELETE',41,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DOUBLE_CLICKED',6,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_MAIN',29,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_MAIN_BEGIN',28,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_MAIN_END',30,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_POST',32,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_POST_BEGIN',31,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_POST_END',33,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_DRAW_TASK_ADDED',34,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_FLUSH_FINISH',62,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_FLUSH_START',61,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_FLUSH_WAIT_FINISH',64,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_FLUSH_WAIT_START',63,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_FOCUSED',19,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_GESTURE',16,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_GET_SELF_SIZE',52,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_HIT_TEST',22,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_HOVER_LEAVE',25,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_HOVER_OVER',24,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_INDEV_RESET',23,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_INSERT',36,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_INVALIDATE_AREA',53,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_KEY',17,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_LAST',66,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_LAYOUT_CHANGED',51,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_LEAVE',21,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_LONG_PRESSED',8,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_LONG_PRESSED_REPEAT',9,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_MARKED_DELETING',65536,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_PREPROCESS',32768,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_PRESSED',1,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_PRESSING',2,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_PRESS_LOST',3,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_READY',38,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_REFRESH',37,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_REFR_EXT_DRAW_SIZE',27,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_REFR_READY',58,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_REFR_REQUEST',56,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_REFR_START',57,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_RELEASED',11,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_RENDER_READY',60,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_RENDER_START',59,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_RESOLUTION_CHANGED',54,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_ROTARY',18,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCREEN_LOADED',47,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCREEN_LOAD_START',46,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCREEN_UNLOADED',48,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCREEN_UNLOAD_START',45,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCROLL',15,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCROLL_BEGIN',12,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCROLL_END',14,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SCROLL_THROW_BEGIN',13,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SHORT_CLICKED',4,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SINGLE_CLICKED',5,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_SIZE_CHANGED',49,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_STYLE_CHANGED',50,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_TRIPLE_CLICKED',7,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_VALUE_CHANGED',35,b'\\xFF\\xFF\\xFF\\x0BLV_EVENT_VSYNC',65,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_CENTER',2,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_END',1,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_SPACE_AROUND',4,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_SPACE_BETWEEN',5,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_SPACE_EVENLY',3,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_ALIGN_START',0,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_COLUMN',1,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_COLUMN_REVERSE',9,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_COLUMN_WRAP',5,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_COLUMN_WRAP_REVERSE',13,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_ROW',0,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_ROW_REVERSE',8,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_ROW_WRAP',4,b'\\xFF\\xFF\\xFF\\x0BLV_FLEX_FLOW_ROW_WRAP_REVERSE',12,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_PLAIN_ALIGNED',3,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_CMAP_FORMAT0_FULL',0,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_CMAP_FORMAT0_TINY',2,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_CMAP_SPARSE_FULL',1,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_CMAP_SPARSE_TINY',3,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_COMPRESSED',1,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER',2,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_FMT_TXT_PLAIN',0,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A1',1,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A1_ALIGNED',17,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A2',2,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A2_ALIGNED',18,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A3',3,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A4',4,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A4_ALIGNED',20,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A8',8,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_A8_ALIGNED',24,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_CUSTOM',255,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_IMAGE',25,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_SVG',27,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_GLYPH_FORMAT_VECTOR',26,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_KERNING_NONE',1,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_KERNING_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_SUBPX_BOTH',3,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_SUBPX_HOR',1,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_SUBPX_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_FONT_SUBPX_VER',2,b'\\xFF\\xFF\\xFF\\x0BLV_FS_MODE_RD',2,b'\\xFF\\xFF\\xFF\\x0BLV_FS_MODE_WR',1,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_BUSY',7,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_DENIED',6,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_FS_ERR',2,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_FULL',4,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_HW_ERR',1,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_INV_PARAM',11,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_LOCKED',5,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_NOT_EX',3,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_NOT_IMP',9,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_OK',0,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_OUT_OF_MEM',10,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_TOUT',8,b'\\xFF\\xFF\\xFF\\x0BLV_FS_RES_UNKNOWN',12,b'\\xFF\\xFF\\xFF\\x0BLV_FS_SEEK_CUR',1,b'\\xFF\\xFF\\xFF\\x0BLV_FS_SEEK_END',2,b'\\xFF\\xFF\\xFF\\x0BLV_FS_SEEK_SET',0,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_CONICAL',5,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_HOR',2,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_LINEAR',3,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_RADIAL',4,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_DIR_VER',1,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_EXTEND_PAD',0,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_EXTEND_REFLECT',2,b'\\xFF\\xFF\\xFF\\x0BLV_GRAD_EXTEND_REPEAT',1,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_CENTER',1,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_END',2,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_SPACE_AROUND',5,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_SPACE_BETWEEN',6,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_SPACE_EVENLY',4,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_START',0,b'\\xFF\\xFF\\xFF\\x0BLV_GRID_ALIGN_STRETCH',3,b'\\xFF\\xFF\\xFF\\x0BLV_GROUP_REFOCUS_POLICY_NEXT',0,b'\\xFF\\xFF\\xFF\\x0BLV_GROUP_REFOCUS_POLICY_PREV',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_CHECKED_DISABLED',5,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_CHECKED_PRESSED',4,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_CHECKED_RELEASED',3,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_DISABLED',2,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_NUM',6,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_PRESSED',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGEBUTTON_STATE_RELEASED',0,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_AUTO_TRANSFORM',10,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_BOTTOM_LEFT',4,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_BOTTOM_MID',5,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_BOTTOM_RIGHT',6,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_CENTER',9,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_DEFAULT',0,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_LEFT_MID',7,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_RIGHT_MID',8,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_STRETCH',11,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_TILE',12,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_TOP_LEFT',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_TOP_MID',2,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_ALIGN_TOP_RIGHT',3,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_COMPRESS_LZ4',2,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_COMPRESS_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_COMPRESS_RLE',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_ALLOCATED',16,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_COMPRESSED',8,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_CUSTOM_DRAW',64,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_MODIFIABLE',32,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_PREMULTIPLIED',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER1',256,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER2',512,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER3',1024,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER4',2048,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER5',4096,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER6',8192,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER7',16384,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_FLAGS_USER8',32768,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_SRC_FILE',1,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_SRC_SYMBOL',2,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_SRC_UNKNOWN',3,b'\\xFF\\xFF\\xFF\\x0BLV_IMAGE_SRC_VARIABLE',0,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_CNT',6,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_PINCH',1,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_ROTATE',3,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_SCROLL',5,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_SWIPE',2,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_GESTURE_TWO_FINGERS_SWIPE',4,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_MODE_EVENT',2,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_MODE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_MODE_TIMER',1,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_STATE_PRESSED',1,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_STATE_RELEASED',0,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_TYPE_BUTTON',3,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_TYPE_ENCODER',4,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_TYPE_KEYPAD',2,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_TYPE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_INDEV_TYPE_POINTER',1,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_NUMBER',3,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_SPECIAL',2,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_TEXT_LOWER',0,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_TEXT_UPPER',1,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_USER_1',4,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_USER_2',5,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_USER_3',6,b'\\xFF\\xFF\\xFF\\x0BLV_KEYBOARD_MODE_USER_4',7,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_BACKSPACE',8,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_DEL',127,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_DOWN',18,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_END',3,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_ENTER',10,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_ESC',27,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_HOME',2,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_LEFT',20,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_NEXT',9,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_PREV',11,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_RIGHT',19,b'\\xFF\\xFF\\xFF\\x0BLV_KEY_UP',17,b'\\xFF\\xFF\\xFF\\x0BLV_LABEL_LONG_MODE_CLIP',4,b'\\xFF\\xFF\\xFF\\x0BLV_LABEL_LONG_MODE_DOTS',1,b'\\xFF\\xFF\\xFF\\x0BLV_LABEL_LONG_MODE_SCROLL',2,b'\\xFF\\xFF\\xFF\\x0BLV_LABEL_LONG_MODE_SCROLL_CIRCULAR',3,b'\\xFF\\xFF\\xFF\\x0BLV_LABEL_LONG_MODE_WRAP',0,b'\\xFF\\xFF\\xFF\\x0BLV_LAYER_TYPE_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_LAYER_TYPE_SIMPLE',1,b'\\xFF\\xFF\\xFF\\x0BLV_LAYER_TYPE_TRANSFORM',2,b'\\xFF\\xFF\\xFF\\x0BLV_LAYOUT_FLEX',1,b'\\xFF\\xFF\\xFF\\x0BLV_LAYOUT_GRID',2,b'\\xFF\\xFF\\xFF\\x0BLV_LAYOUT_LAST',3,b'\\xFF\\xFF\\xFF\\x0BLV_LAYOUT_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_MENU_HEADER_BOTTOM_FIXED',2,b'\\xFF\\xFF\\xFF\\x0BLV_MENU_HEADER_TOP_FIXED',0,b'\\xFF\\xFF\\xFF\\x0BLV_MENU_HEADER_TOP_UNFIXED',1,b'\\xFF\\xFF\\xFF\\x0BLV_MENU_ROOT_BACK_BUTTON_DISABLED',0,b'\\xFF\\xFF\\xFF\\x0BLV_MENU_ROOT_BACK_BUTTON_ENABLED',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_EDITABLE_FALSE',2,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_EDITABLE_INHERIT',0,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_EDITABLE_TRUE',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_GROUP_DEF_FALSE',2,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_GROUP_DEF_INHERIT',0,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_GROUP_DEF_TRUE',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_THEME_INHERITABLE_FALSE',0,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_CLASS_THEME_INHERITABLE_TRUE',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_ADV_HITTEST',65536,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_CHECKABLE',8,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_CLICKABLE',2,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_CLICK_FOCUSABLE',4,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_EVENT_BUBBLE',16384,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_FLEX_IN_NEW_TRACK',2097152,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_FLOATING',262144,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_GESTURE_BUBBLE',32768,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_HIDDEN',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_IGNORE_LAYOUT',131072,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_LAYOUT_1',8388608,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_LAYOUT_2',16777216,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_OVERFLOW_VISIBLE',1048576,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_PRESS_LOCK',8192,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLLABLE',16,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_CHAIN',768,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_CHAIN_HOR',256,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_CHAIN_VER',512,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_ELASTIC',32,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_MOMENTUM',64,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_ONE',128,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_ON_FOCUS',1024,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SCROLL_WITH_ARROW',2048,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SEND_DRAW_TASK_EVENTS',524288,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_SNAPPABLE',4096,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_USER_1',134217728,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_USER_2',268435456,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_USER_3',536870912,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_USER_4',1073741824,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_WIDGET_1',33554432,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_FLAG_WIDGET_2',67108864,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_POINT_TRANSFORM_FLAG_INVERSE',2,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_POINT_TRANSFORM_FLAG_INVERSE_RECURSIVE',3,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_POINT_TRANSFORM_FLAG_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_POINT_TRANSFORM_FLAG_RECURSIVE',1,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_TREE_WALK_END',2,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_TREE_WALK_NEXT',0,b'\\xFF\\xFF\\xFF\\x0BLV_OBJ_TREE_WALK_SKIP_CHILDREN',1,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_0',0,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_10',25,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_100',255,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_20',51,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_30',76,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_40',102,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_50',127,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_60',153,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_70',178,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_80',204,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_90',229,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_COVER',255,b'\\xFF\\xFF\\xFF\\x0BLV_OPA_TRANSP',0,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_AMBER',13,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_BLUE',5,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_BLUE_GREY',17,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_BROWN',16,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_CYAN',7,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_DEEP_ORANGE',15,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_DEEP_PURPLE',3,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_GREEN',9,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_GREY',18,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_INDIGO',4,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_LAST',19,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_LIGHT_BLUE',6,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_LIGHT_GREEN',10,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_LIME',11,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_NONE',255,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_ORANGE',14,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_PINK',1,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_PURPLE',2,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_RED',0,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_TEAL',8,b'\\xFF\\xFF\\xFF\\x0BLV_PALETTE_YELLOW',12,b'\\xFF\\xFF\\xFF\\x0BLV_PART_ANY',983040,b'\\xFF\\xFF\\xFF\\x0BLV_PART_CURSOR',393216,b'\\xFF\\xFF\\xFF\\x0BLV_PART_CUSTOM_FIRST',524288,b'\\xFF\\xFF\\xFF\\x0BLV_PART_INDICATOR',131072,b'\\xFF\\xFF\\xFF\\x0BLV_PART_ITEMS',327680,b'\\xFF\\xFF\\xFF\\x0BLV_PART_KNOB',196608,b'\\xFF\\xFF\\xFF\\x0BLV_PART_MAIN',0,b'\\xFF\\xFF\\xFF\\x0BLV_PART_SCROLLBAR',65536,b'\\xFF\\xFF\\xFF\\x0BLV_PART_SELECTED',262144,b'\\xFF\\xFF\\xFF\\x0BLV_PART_TEXTAREA_PLACEHOLDER',524288,b'\\xFF\\xFF\\xFF\\x0BLV_RB_COLOR_BLACK',1,b'\\xFF\\xFF\\xFF\\x0BLV_RB_COLOR_RED',0,b'\\xFF\\xFF\\xFF\\x0BLV_RESULT_INVALID',0,b'\\xFF\\xFF\\xFF\\x0BLV_RESULT_OK',1,b'\\xFF\\xFF\\xFF\\x0BLV_ROLLER_MODE_INFINITE',1,b'\\xFF\\xFF\\xFF\\x0BLV_ROLLER_MODE_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_HORIZONTAL_BOTTOM',1,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_HORIZONTAL_TOP',0,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_LAST',17,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_ROUND_INNER',8,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_ROUND_OUTER',16,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_VERTICAL_LEFT',2,b'\\xFF\\xFF\\xFF\\x0BLV_SCALE_MODE_VERTICAL_RIGHT',4,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLLBAR_MODE_ACTIVE',2,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLLBAR_MODE_AUTO',3,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLLBAR_MODE_OFF',0,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLLBAR_MODE_ON',1,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLL_SNAP_CENTER',3,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLL_SNAP_END',2,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLL_SNAP_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_SCROLL_SNAP_START',1,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_FADE_IN',9,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_FADE_ON',9,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_FADE_OUT',10,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_MOVE_BOTTOM',8,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_MOVE_LEFT',5,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_MOVE_RIGHT',6,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_MOVE_TOP',7,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OUT_BOTTOM',14,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OUT_LEFT',11,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OUT_RIGHT',12,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OUT_TOP',13,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OVER_BOTTOM',4,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OVER_LEFT',1,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OVER_RIGHT',2,b'\\xFF\\xFF\\xFF\\x0BLV_SCR_LOAD_ANIM_OVER_TOP',3,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_MODE_NORMAL',0,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_MODE_RANGE',2,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_MODE_SYMMETRICAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_ORIENTATION_AUTO',0,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_ORIENTATION_HORIZONTAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_SLIDER_ORIENTATION_VERTICAL',2,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_MODE_BREAK',2,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_MODE_EXPAND',1,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_MODE_FIXED',0,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_MODE_LAST',3,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_OVERFLOW_CLIP',0,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_OVERFLOW_ELLIPSIS',1,b'\\xFF\\xFF\\xFF\\x0BLV_SPAN_OVERFLOW_LAST',2,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_ANY',65535,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_CHECKED',1,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_DEFAULT',0,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_DISABLED',128,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_EDITED',8,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_FOCUSED',2,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_FOCUS_KEY',4,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_HOVERED',16,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_PRESSED',32,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_SCROLLED',64,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_USER_1',4096,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_USER_2',8192,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_USER_3',16384,b'\\xFF\\xFF\\xFF\\x0BLV_STATE_USER_4',32768,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_AUDIO',1,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BACKSPACE',58,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BARS',40,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BATTERY_1',52,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BATTERY_2',51,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BATTERY_3',50,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BATTERY_EMPTY',53,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BATTERY_FULL',49,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BELL',44,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BLUETOOTH',55,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_BULLET',0,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_CALL',36,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_CHARGE',42,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_CLOSE',5,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_COPY',38,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_CUT',37,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_DIRECTORY',34,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_DOWN',32,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_DOWNLOAD',9,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_DRIVE',10,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_DUMMY',61,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_EDIT',57,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_EJECT',22,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_ENVELOPE',41,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_EYE_CLOSE',28,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_EYE_OPEN',27,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_FILE',47,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_GPS',46,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_HOME',8,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_IMAGE',15,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_KEYBOARD',45,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_LEFT',23,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_LIST',3,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_LOOP',33,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_MINUS',26,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_MUTE',12,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_NEW_LINE',60,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_NEXT',21,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_OK',4,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_PASTE',43,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_PAUSE',19,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_PLAY',18,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_PLUS',25,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_POWER',6,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_PREV',17,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_REFRESH',11,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_RIGHT',24,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_SAVE',39,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_SD_CARD',59,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_SETTINGS',7,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_SHUFFLE',30,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_STOP',20,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_TINT',16,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_TRASH',56,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_UP',31,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_UPLOAD',35,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_USB',54,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_VIDEO',2,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_VOLUME_MAX',14,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_VOLUME_MID',13,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_WARNING',29,b'\\xFF\\xFF\\xFF\\x0BLV_STR_SYMBOL_WIFI',48,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ALIGN',10,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ANIM',102,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ANIM_DURATION',103,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ARC_COLOR',82,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ARC_IMAGE_SRC',84,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ARC_OPA',83,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ARC_ROUNDED',81,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ARC_WIDTH',80,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BASE_DIR',39,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_COLOR',28,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_GRAD',38,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_GRAD_COLOR',35,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_GRAD_DIR',32,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_GRAD_OPA',37,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_GRAD_STOP',34,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_IMAGE_OPA',41,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_IMAGE_RECOLOR',42,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_IMAGE_RECOLOR_OPA',43,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_IMAGE_SRC',40,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_IMAGE_TILED',44,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_MAIN_OPA',36,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_MAIN_STOP',33,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BG_OPA',29,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BITMAP_MASK_SRC',117,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BLEND_MODE',105,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BORDER_COLOR',49,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BORDER_OPA',50,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BORDER_POST',53,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BORDER_SIDE',52,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_BORDER_WIDTH',48,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_CLIP_CORNER',45,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_COLOR_FILTER_DSC',100,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_COLOR_FILTER_OPA',101,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_FLEX_CROSS_PLACE',124,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_FLEX_FLOW',122,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_FLEX_GROW',126,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_FLEX_MAIN_PLACE',123,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_FLEX_TRACK_PLACE',125,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_COLUMN_POS',131,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_COLUMN_SPAN',132,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_ROW_POS',134,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_ROW_SPAN',135,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_X_ALIGN',133,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_CELL_Y_ALIGN',136,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_COLUMN_ALIGN',127,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_COLUMN_DSC_ARRAY',130,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_ROW_ALIGN',128,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_GRID_ROW_DSC_ARRAY',129,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_HEIGHT',2,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_IMAGE_OPA',68,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_IMAGE_RECOLOR',69,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_IMAGE_RECOLOR_OPA',70,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LAST_BUILT_IN_PROP',137,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LAYOUT',22,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LENGTH',3,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_COLOR',76,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_DASH_GAP',74,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_DASH_WIDTH',73,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_OPA',77,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_ROUNDED',75,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_LINE_WIDTH',72,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MARGIN_BOTTOM',25,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MARGIN_LEFT',26,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MARGIN_RIGHT',27,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MARGIN_TOP',24,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MAX_HEIGHT',7,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MAX_WIDTH',5,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MIN_HEIGHT',6,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_MIN_WIDTH',4,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_NUM_BUILT_IN_PROPS',138,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OPA',98,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OPA_LAYERED',99,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OUTLINE_COLOR',57,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OUTLINE_OPA',58,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OUTLINE_PAD',59,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_OUTLINE_WIDTH',56,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_BOTTOM',17,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_COLUMN',21,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_LEFT',18,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_RADIAL',14,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_RIGHT',19,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_ROW',20,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PAD_TOP',16,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PROP_ANY',255,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PROP_CONST',255,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_PROP_INV',0,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RADIAL_OFFSET',13,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RADIUS',12,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RECOLOR',120,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RECOLOR_OPA',121,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RES_FOUND',1,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_RES_NOT_FOUND',0,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_ROTARY_SENSITIVITY',118,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_COLOR',61,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_OFFSET_X',64,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_OFFSET_Y',65,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_OPA',62,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_SPREAD',66,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_SHADOW_WIDTH',60,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_STATE_CMP_DIFF_DRAW_PAD',2,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_STATE_CMP_DIFF_LAYOUT',3,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_STATE_CMP_DIFF_REDRAW',1,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_STATE_CMP_SAME',0,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_ALIGN',94,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_COLOR',88,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_DECOR',93,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_FONT',90,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_LETTER_SPACE',91,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_LINE_SPACE',92,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_OPA',89,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_OUTLINE_STROKE_COLOR',97,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_OUTLINE_STROKE_OPA',96,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TEXT_OUTLINE_STROKE_WIDTH',95,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_HEIGHT',107,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_PIVOT_X',113,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_PIVOT_Y',114,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_ROTATION',112,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_SCALE_X',110,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_SCALE_Y',111,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_SKEW_X',115,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_SKEW_Y',116,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSFORM_WIDTH',106,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSITION',104,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSLATE_RADIAL',119,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSLATE_X',108,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_TRANSLATE_Y',109,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_WIDTH',1,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_X',8,b'\\xFF\\xFF\\xFF\\x0BLV_STYLE_Y',9,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_COLOR',4,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_GROUP',5,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_INT',2,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_INVALID',0,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_NONE',1,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_POINTER',3,b'\\xFF\\xFF\\xFF\\x0BLV_SUBJECT_TYPE_STRING',6,b'\\xFF\\xFF\\xFF\\x0BLV_SWITCH_ORIENTATION_AUTO',0,b'\\xFF\\xFF\\xFF\\x0BLV_SWITCH_ORIENTATION_HORIZONTAL',1,b'\\xFF\\xFF\\xFF\\x0BLV_SWITCH_ORIENTATION_VERTICAL',2,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_CUSTOM_1',16,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_CUSTOM_2',32,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_CUSTOM_3',64,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_CUSTOM_4',128,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_MERGE_RIGHT',1,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_TABLE_CELL_CTRL_TEXT_CROP',2,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_ALIGN_AUTO',0,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_ALIGN_CENTER',2,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_ALIGN_LEFT',1,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_ALIGN_RIGHT',3,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_CMD_STATE_IN',2,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_CMD_STATE_PAR',1,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_CMD_STATE_WAIT',0,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_DECOR_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_DECOR_STRIKETHROUGH',2,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_DECOR_UNDERLINE',1,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_FLAG_BREAK_ALL',4,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_FLAG_EXPAND',1,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_FLAG_FIT',2,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_FLAG_NONE',0,b'\\xFF\\xFF\\xFF\\x0BLV_TEXT_FLAG_RECOLOR',8,b'\\xFF\\xFF\\xFF\\x0BLV_THREAD_PRIO_HIGH',3,b'\\xFF\\xFF\\xFF\\x0BLV_THREAD_PRIO_HIGHEST',4,b'\\xFF\\xFF\\xFF\\x0BLV_THREAD_PRIO_LOW',1,b'\\xFF\\xFF\\xFF\\x0BLV_THREAD_PRIO_LOWEST',0,b'\\xFF\\xFF\\xFF\\x0BLV_THREAD_PRIO_MID',2,b'\\xFF\\xFF\\xFF\\x0BLV_TREE_WALK_POST_ORDER',1,b'\\xFF\\xFF\\xFF\\x0BLV_TREE_WALK_PRE_ORDER',0,b'\\x00\\x05\\x5C\\x23lv_anim_count_running',0,b'\\x00\\x00\\x06\\x23lv_anim_custom_delete',0,b'\\x00\\x01\\x8C\\x23lv_anim_custom_get',0,b'\\x00\\x00\\xCC\\x23lv_anim_delete',0,b'\\x00\\x0D\\x47\\x23lv_anim_delete_all',0,b'\\x00\\x01\\x99\\x23lv_anim_get',0,b'\\x00\\x05\\x64\\x23lv_anim_get_delay',0,b'\\x00\\x05\\x64\\x23lv_anim_get_playtime',0,b'\\x00\\x05\\x64\\x23lv_anim_get_repeat_count',0,b'\\x00\\x05\\x64\\x23lv_anim_get_time',0,b'\\x00\\x05\\x30\\x23lv_anim_get_timer',0,b'\\x00\\x06\\x04\\x23lv_anim_get_user_data',0,b'\\x00\\x06\\xA2\\x23lv_anim_init',0,b'\\x00\\x00\\x03\\x23lv_anim_is_paused',0,b'\\x00\\x01\\x52\\x23lv_anim_path_bounce',0,b'\\x00\\x01\\x52\\x23lv_anim_path_custom_bezier3',0,b'\\x00\\x01\\x52\\x23lv_anim_path_ease_in',0,b'\\x00\\x01\\x52\\x23lv_anim_path_ease_in_out',0,b'\\x00\\x01\\x52\\x23lv_anim_path_ease_out',0,b'\\x00\\x01\\x52\\x23lv_anim_path_linear',0,b'\\x00\\x01\\x52\\x23lv_anim_path_overshoot',0,b'\\x00\\x01\\x52\\x23lv_anim_path_step',0,b'\\x00\\x06\\xA2\\x23lv_anim_pause',0,b'\\x00\\x06\\xC1\\x23lv_anim_pause_for',0,b'\\x00\\x0D\\x47\\x23lv_anim_refr_now',0,b'\\x00\\x05\\xCB\\x23lv_anim_resolve_speed',0,b'\\x00\\x06\\xA2\\x23lv_anim_resume',0,b'\\x00\\x06\\xA9\\x23lv_anim_set_bezier3_param',0,b'\\x00\\x06\\xC9\\x23lv_anim_set_completed_cb',0,b'\\x00\\x06\\xCD\\x23lv_anim_set_custom_exec_cb',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_delay',0,b'\\x00\\x06\\xC9\\x23lv_anim_set_deleted_cb',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_duration',0,b'\\x00\\x06\\xA5\\x23lv_anim_set_early_apply',0,b'\\x00\\x06\\xD1\\x23lv_anim_set_exec_cb',0,b'\\x00\\x06\\xB0\\x23lv_anim_set_get_value_cb',0,b'\\x00\\x06\\xB4\\x23lv_anim_set_path_cb',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_repeat_count',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_repeat_delay',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_reverse_delay',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_reverse_duration',0,b'\\x00\\x06\\xC1\\x23lv_anim_set_reverse_time',0,b'\\x00\\x06\\xC9\\x23lv_anim_set_start_cb',0,b'\\x00\\x06\\xC5\\x23lv_anim_set_user_data',0,b'\\x00\\x06\\xBC\\x23lv_anim_set_values',0,b'\\x00\\x06\\xC5\\x23lv_anim_set_var',0,b'\\x00\\x05\\xC8\\x23lv_anim_speed',0,b'\\x00\\x05\\xD8\\x23lv_anim_speed_clamped',0,b'\\x00\\x05\\xCB\\x23lv_anim_speed_to_time',0,b'\\x00\\x01\\x90\\x23lv_anim_start',0,b'\\x00\\x06\\xE4\\x23lv_anim_timeline_add',0,b'\\x00\\x01\\x9D\\x23lv_anim_timeline_create',0,b'\\x00\\x06\\xD5\\x23lv_anim_timeline_delete',0,b'\\x00\\x05\\x67\\x23lv_anim_timeline_get_playtime',0,b'\\x00\\x05\\x49\\x23lv_anim_timeline_get_progress',0,b'\\x00\\x05\\x67\\x23lv_anim_timeline_get_repeat_count',0,b'\\x00\\x05\\x67\\x23lv_anim_timeline_get_repeat_delay',0,b'\\x00\\x00\\x0A\\x23lv_anim_timeline_get_reverse',0,b'\\x00\\x06\\xD5\\x23lv_anim_timeline_pause',0,b'\\x00\\x06\\xDC\\x23lv_anim_timeline_set_progress',0,b'\\x00\\x06\\xE0\\x23lv_anim_timeline_set_repeat_count',0,b'\\x00\\x06\\xE0\\x23lv_anim_timeline_set_repeat_delay',0,b'\\x00\\x06\\xD8\\x23lv_anim_timeline_set_reverse',0,b'\\x00\\x05\\x67\\x23lv_anim_timeline_start',0,b'\\x00\\x0E\\x05\\x25lv_animimg_class',0,b'\\x00\\x03\\x93\\x23lv_animimg_create',0,b'\\x00\\x01\\x96\\x23lv_animimg_get_anim',0,b'\\x00\\x05\\xA8\\x23lv_animimg_get_duration',0,b'\\x00\\x05\\xA8\\x23lv_animimg_get_repeat_count',0,b'\\x00\\x06\\x84\\x23lv_animimg_get_src',0,b'\\x00\\x05\\xF2\\x23lv_animimg_get_src_count',0,b'\\x00\\x0B\\x51\\x23lv_animimg_set_duration',0,b'\\x00\\x0B\\x51\\x23lv_animimg_set_repeat_count',0,b'\\x00\\x0B\\xC8\\x23lv_animimg_set_src',0,b'\\x00\\x09\\x21\\x23lv_animimg_start',0,b'\\x00\\x0B\\xEB\\x23lv_arc_align_obj_to_angle',0,b'\\x00\\x03\\xC7\\x23lv_arc_bind_value',0,b'\\x00\\x0E\\x05\\x25lv_arc_class',0,b'\\x00\\x03\\x93\\x23lv_arc_create',0,b'\\x00\\x01\\x65\\x23lv_arc_get_angle_end',0,b'\\x00\\x01\\x65\\x23lv_arc_get_angle_start',0,b'\\x00\\x01\\x65\\x23lv_arc_get_bg_angle_end',0,b'\\x00\\x01\\x65\\x23lv_arc_get_bg_angle_start',0,b'\\x00\\x01\\x74\\x23lv_arc_get_knob_offset',0,b'\\x00\\x01\\x74\\x23lv_arc_get_max_value',0,b'\\x00\\x01\\x74\\x23lv_arc_get_min_value',0,b'\\x00\\x01\\x9F\\x23lv_arc_get_mode',0,b'\\x00\\x01\\x74\\x23lv_arc_get_rotation',0,b'\\x00\\x01\\x74\\x23lv_arc_get_value',0,b'\\x00\\x0B\\xEB\\x23lv_arc_rotate_obj_to_angle',0,b'\\x00\\x09\\x56\\x23lv_arc_set_angles',0,b'\\x00\\x09\\x56\\x23lv_arc_set_bg_angles',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_bg_end_angle',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_bg_start_angle',0,b'\\x00\\x0B\\x51\\x23lv_arc_set_change_rate',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_end_angle',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_knob_offset',0,b'\\x00\\x09\\x81\\x23lv_arc_set_mode',0,b'\\x00\\x09\\x56\\x23lv_arc_set_range',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_rotation',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_start_angle',0,b'\\x00\\x09\\x4D\\x23lv_arc_set_value',0,b'\\x00\\x06\\xF9\\x23lv_area_align',0,b'\\x00\\x01\\x55\\x23lv_area_get_height',0,b'\\x00\\x05\\x6A\\x23lv_area_get_size',0,b'\\x00\\x01\\x55\\x23lv_area_get_width',0,b'\\x00\\x06\\xED\\x23lv_area_increase',0,b'\\x00\\x06\\xED\\x23lv_area_move',0,b'\\x00\\x06\\xF2\\x23lv_area_set',0,b'\\x00\\x06\\xE9\\x23lv_area_set_height',0,b'\\x00\\x06\\xE9\\x23lv_area_set_width',0,b'\\x00\\x04\\x1B\\x23lv_array_assign',0,b'\\x00\\x06\\x07\\x23lv_array_at',0,b'\\x00\\x04\\x0E\\x23lv_array_concat',0,b'\\x00\\x07\\x03\\x23lv_array_copy',0,b'\\x00\\x07\\x00\\x23lv_array_deinit',0,b'\\x00\\x04\\x16\\x23lv_array_erase',0,b'\\x00\\x07\\x07\\x23lv_array_init',0,b'\\x00\\x07\\x0C\\x23lv_array_init_from_buf',0,b'\\x00\\x04\\x20\\x23lv_array_push_back',0,b'\\x00\\x04\\x12\\x23lv_array_remove',0,b'\\x00\\x00\\x0D\\x23lv_array_resize',0,b'\\x00\\x07\\x00\\x23lv_array_shrink',0,b'\\x00\\x04\\xB7\\x23lv_async_call',0,b'\\x00\\x04\\xB7\\x23lv_async_call_cancel',0,b'\\x00\\x05\\x45\\x23lv_atan2',0,b'\\x00\\x0E\\x05\\x25lv_bar_class',0,b'\\x00\\x03\\x93\\x23lv_bar_create',0,b'\\x00\\x01\\x74\\x23lv_bar_get_max_value',0,b'\\x00\\x01\\x74\\x23lv_bar_get_min_value',0,b'\\x00\\x01\\xA8\\x23lv_bar_get_mode',0,b'\\x00\\x01\\xAB\\x23lv_bar_get_orientation',0,b'\\x00\\x01\\x74\\x23lv_bar_get_start_value',0,b'\\x00\\x01\\x74\\x23lv_bar_get_value',0,b'\\x00\\x00\\x4F\\x23lv_bar_is_symmetrical',0,b'\\x00\\x09\\x90\\x23lv_bar_set_mode',0,b'\\x00\\x09\\x94\\x23lv_bar_set_orientation',0,b'\\x00\\x09\\x56\\x23lv_bar_set_range',0,b'\\x00\\x09\\x51\\x23lv_bar_set_start_value',0,b'\\x00\\x09\\x51\\x23lv_bar_set_value',0,b'\\x00\\x01\\x48\\x23lv_bezier3',0,b'\\x00\\x08\\x40\\x23lv_bin_decoder_close',0,b'\\x00\\x04\\x70\\x23lv_bin_decoder_get_area',0,b'\\x00\\x04\\x76\\x23lv_bin_decoder_info',0,b'\\x00\\x0D\\x47\\x23lv_bin_decoder_init',0,b'\\x00\\x04\\x6C\\x23lv_bin_decoder_open',0,b'\\x00\\x02\\xBC\\x23lv_binfont_create',0,b'\\x00\\x07\\xF3\\x23lv_binfont_destroy',0,b'\\x00\\x0E\\x05\\x25lv_button_class',0,b'\\x00\\x03\\x93\\x23lv_button_create',0,b'\\x00\\x0E\\x05\\x25lv_buttonmatrix_class',0,b'\\x00\\x0B\\x64\\x23lv_buttonmatrix_clear_button_ctrl',0,b'\\x00\\x09\\xAF\\x23lv_buttonmatrix_clear_button_ctrl_all',0,b'\\x00\\x03\\x93\\x23lv_buttonmatrix_create',0,b'\\x00\\x01\\x04\\x23lv_buttonmatrix_get_button_text',0,b'\\x00\\x00\\xEC\\x23lv_buttonmatrix_get_map',0,b'\\x00\\x00\\x83\\x23lv_buttonmatrix_get_one_checked',0,b'\\x00\\x05\\xB8\\x23lv_buttonmatrix_get_selected_button',0,b'\\x00\\x00\\x73\\x23lv_buttonmatrix_has_button_ctrl',0,b'\\x00\\x0B\\x64\\x23lv_buttonmatrix_set_button_ctrl',0,b'\\x00\\x09\\xAF\\x23lv_buttonmatrix_set_button_ctrl_all',0,b'\\x00\\x0B\\x82\\x23lv_buttonmatrix_set_button_width',0,b'\\x00\\x09\\xAB\\x23lv_buttonmatrix_set_ctrl_map',0,b'\\x00\\x09\\x31\\x23lv_buttonmatrix_set_map',0,b'\\x00\\x09\\x24\\x23lv_buttonmatrix_set_one_checked',0,b'\\x00\\x0B\\x51\\x23lv_buttonmatrix_set_selected_button',0,b'\\x00\\x0E\\x05\\x25lv_calendar_class',0,b'\\x00\\x03\\x93\\x23lv_calendar_create',0,b'\\x00\\x03\\xB2\\x23lv_calendar_get_btnmatrix',0,b'\\x00\\x01\\xB7\\x23lv_calendar_get_highlighted_dates',0,b'\\x00\\x05\\x42\\x23lv_calendar_get_highlighted_dates_num',0,b'\\x00\\x04\\x95\\x23lv_calendar_get_pressed_date',0,b'\\x00\\x01\\xBA\\x23lv_calendar_get_showed_date',0,b'\\x00\\x01\\xBA\\x23lv_calendar_get_today_date',0,b'\\x00\\x0E\\x05\\x25lv_calendar_header_arrow_class',0,b'\\x00\\x03\\x93\\x23lv_calendar_header_arrow_create',0,b'\\x00\\x0E\\x05\\x25lv_calendar_header_dropdown_class',0,b'\\x00\\x03\\x93\\x23lv_calendar_header_dropdown_create',0,b'\\x00\\x09\\x35\\x23lv_calendar_header_dropdown_set_year_list',0,b'\\x00\\x09\\x2D\\x23lv_calendar_set_day_names',0,b'\\x00\\x09\\xB3\\x23lv_calendar_set_highlighted_dates',0,b'\\x00\\x0B\\x82\\x23lv_calendar_set_month_shown',0,b'\\x00\\x0B\\x99\\x23lv_calendar_set_today_date',0,b'\\x00\\x06\\x6C\\x23lv_calloc',0,b'\\x00\\x05\\x5E\\x23lv_canvas_buf_size',0,b'\\x00\\x0E\\x05\\x25lv_canvas_class',0,b'\\x00\\x09\\x8A\\x23lv_canvas_copy_buf',0,b'\\x00\\x03\\x93\\x23lv_canvas_create',0,b'\\x00\\x0A\\x22\\x23lv_canvas_fill_bg',0,b'\\x00\\x0A\\x86\\x23lv_canvas_finish_layer',0,b'\\x00\\x06\\x8B\\x23lv_canvas_get_buf',0,b'\\x00\\x02\\x76\\x23lv_canvas_get_draw_buf',0,b'\\x00\\x03\\x3F\\x23lv_canvas_get_image',0,b'\\x00\\x01\\xE2\\x23lv_canvas_get_px',0,b'\\x00\\x0A\\x86\\x23lv_canvas_init_layer',0,b'\\x00\\x0B\\xC1\\x23lv_canvas_set_buffer',0,b'\\x00\\x0A\\x2B\\x23lv_canvas_set_draw_buf',0,b'\\x00\\x0B\\xA8\\x23lv_canvas_set_palette',0,b'\\x00\\x09\\x61\\x23lv_canvas_set_px',0,b'\\x00\\x01\\xBD\\x23lv_chart_add_cursor',0,b'\\x00\\x01\\xC2\\x23lv_chart_add_series',0,b'\\x00\\x0E\\x05\\x25lv_chart_class',0,b'\\x00\\x03\\x93\\x23lv_chart_create',0,b'\\x00\\x03\\xF9\\x23lv_chart_get_cursor_point',0,b'\\x00\\x01\\x65\\x23lv_chart_get_first_point_center_offset',0,b'\\x00\\x05\\xB8\\x23lv_chart_get_point_count',0,b'\\x00\\x0A\\x06\\x23lv_chart_get_point_pos_by_id',0,b'\\x00\\x05\\xB8\\x23lv_chart_get_pressed_point',0,b'\\x00\\x02\\x12\\x23lv_chart_get_series_color',0,b'\\x00\\x01\\xC7\\x23lv_chart_get_series_next',0,b'\\x00\\x01\\x20\\x23lv_chart_get_series_x_array',0,b'\\x00\\x01\\x20\\x23lv_chart_get_series_y_array',0,b'\\x00\\x01\\xCB\\x23lv_chart_get_type',0,b'\\x00\\x05\\xBB\\x23lv_chart_get_x_start_point',0,b'\\x00\\x09\\xCD\\x23lv_chart_hide_series',0,b'\\x00\\x09\\x21\\x23lv_chart_refresh',0,b'\\x00\\x09\\xC9\\x23lv_chart_remove_series',0,b'\\x00\\x09\\xE4\\x23lv_chart_set_all_values',0,b'\\x00\\x09\\xB8\\x23lv_chart_set_axis_range',0,b'\\x00\\x09\\xBE\\x23lv_chart_set_cursor_point',0,b'\\x00\\x09\\xC4\\x23lv_chart_set_cursor_pos',0,b'\\x00\\x0B\\xB8\\x23lv_chart_set_div_line_count',0,b'\\x00\\x09\\xE4\\x23lv_chart_set_next_value',0,b'\\x00\\x09\\xE9\\x23lv_chart_set_next_value2',0,b'\\x00\\x0B\\x51\\x23lv_chart_set_point_count',0,b'\\x00\\x09\\xEF\\x23lv_chart_set_series_color',0,b'\\x00\\x09\\xD2\\x23lv_chart_set_series_ext_x_array',0,b'\\x00\\x09\\xD2\\x23lv_chart_set_series_ext_y_array',0,b'\\x00\\x09\\xF9\\x23lv_chart_set_series_value_by_id',0,b'\\x00\\x09\\xFF\\x23lv_chart_set_series_value_by_id2',0,b'\\x00\\x09\\xDE\\x23lv_chart_set_series_values',0,b'\\x00\\x09\\xD7\\x23lv_chart_set_series_values2',0,b'\\x00\\x0A\\x0C\\x23lv_chart_set_type',0,b'\\x00\\x0A\\x10\\x23lv_chart_set_update_mode',0,b'\\x00\\x09\\xF4\\x23lv_chart_set_x_start_point',0,b'\\x00\\x0E\\x05\\x25lv_checkbox_class',0,b'\\x00\\x03\\x93\\x23lv_checkbox_create',0,b'\\x00\\x01\\x01\\x23lv_checkbox_get_text',0,b'\\x00\\x09\\x35\\x23lv_checkbox_set_text',0,b'\\x00\\x09\\x35\\x23lv_checkbox_set_text_static',0,b'\\x00\\x05\\x73\\x23lv_circle_buf_capacity',0,b'\\x00\\x01\\xD1\\x23lv_circle_buf_create',0,b'\\x00\\x01\\xCE\\x23lv_circle_buf_create_from_array',0,b'\\x00\\x01\\xD5\\x23lv_circle_buf_create_from_buf',0,b'\\x00\\x07\\x12\\x23lv_circle_buf_destroy',0,b'\\x00\\x05\\x6D\\x23lv_circle_buf_fill',0,b'\\x00\\x06\\x0B\\x23lv_circle_buf_head',0,b'\\x00\\x00\\x11\\x23lv_circle_buf_is_empty',0,b'\\x00\\x00\\x11\\x23lv_circle_buf_is_full',0,b'\\x00\\x04\\x38\\x23lv_circle_buf_peek',0,b'\\x00\\x04\\x33\\x23lv_circle_buf_peek_at',0,b'\\x00\\x04\\x2B\\x23lv_circle_buf_read',0,b'\\x00\\x05\\x73\\x23lv_circle_buf_remain',0,b'\\x00\\x07\\x12\\x23lv_circle_buf_reset',0,b'\\x00\\x04\\x27\\x23lv_circle_buf_resize',0,b'\\x00\\x05\\x73\\x23lv_circle_buf_size',0,b'\\x00\\x04\\x24\\x23lv_circle_buf_skip',0,b'\\x00\\x06\\x0B\\x23lv_circle_buf_tail',0,b'\\x00\\x04\\x2F\\x23lv_circle_buf_write',0,b'\\x00\\x01\\x3B\\x23lv_clamp_height',0,b'\\x00\\x01\\x3B\\x23lv_clamp_width',0,b'\\x00\\x05\\xE3\\x23lv_color16_luminance',0,b'\\x00\\x07\\x15\\x23lv_color16_premultiply',0,b'\\x00\\x05\\xFC\\x23lv_color24_luminance',0,b'\\x00\\x00\\x14\\x23lv_color32_eq',0,b'\\x00\\x05\\xE6\\x23lv_color32_luminance',0,b'\\x00\\x01\\xF0\\x23lv_color32_make',0,b'\\x00\\x05\\x57\\x23lv_color_16_16_mix',0,b'\\x00\\x02\\x2D\\x23lv_color_black',0,b'\\x00\\x05\\xEC\\x23lv_color_brightness',0,b'\\x00\\x02\\x0B\\x23lv_color_darken',0,b'\\x00\\x00\\x1B\\x23lv_color_eq',0,b'\\x00\\x07\\x1C\\x23lv_color_filter_dsc_init',0,b'\\x00\\x0D\\x84\\x25lv_color_filter_shade',0,b'\\x00\\x05\\xE9\\x23lv_color_format_get_bpp',0,b'\\x00\\x05\\xE9\\x23lv_color_format_get_size',0,b'\\x00\\x00\\x18\\x23lv_color_format_has_alpha',0,b'\\x00\\x02\\x25\\x23lv_color_hex',0,b'\\x00\\x02\\x25\\x23lv_color_hex3',0,b'\\x00\\x02\\x20\\x23lv_color_hsv_to_rgb',0,b'\\x00\\x02\\x0B\\x23lv_color_lighten',0,b'\\x00\\x05\\xEC\\x23lv_color_luminance',0,b'\\x00\\x02\\x28\\x23lv_color_make',0,b'\\x00\\x02\\x06\\x23lv_color_mix',0,b'\\x00\\x01\\xDA\\x23lv_color_mix32',0,b'\\x00\\x01\\xDA\\x23lv_color_over32',0,b'\\x00\\x07\\x19\\x23lv_color_premultiply',0,b'\\x00\\x01\\xFC\\x23lv_color_rgb_to_hsv',0,b'\\x00\\x01\\xDE\\x23lv_color_to_32',0,b'\\x00\\x01\\xF9\\x23lv_color_to_hsv',0,b'\\x00\\x05\\x76\\x23lv_color_to_int',0,b'\\x00\\x05\\x4C\\x23lv_color_to_u16',0,b'\\x00\\x05\\x76\\x23lv_color_to_u32',0,b'\\x00\\x02\\x2D\\x23lv_color_white',0,b'\\x00\\x01\\x41\\x23lv_cubic_bezier',0,b'\\x00\\x0D\\x47\\x23lv_deinit',0,b'\\x00\\x0D\\x04\\x23lv_delay_ms',0,b'\\x00\\x0D\\x40\\x23lv_delay_set_cb',0,b'\\x00\\x07\\x71\\x23lv_display_add_event_cb',0,b'\\x00\\x02\\x38\\x23lv_display_create',0,b'\\x00\\x07\\x20\\x23lv_display_delete',0,b'\\x00\\x00\\x26\\x23lv_display_delete_event',0,b'\\x00\\x07\\x20\\x23lv_display_delete_refr_timer',0,b'\\x00\\x01\\x5B\\x23lv_display_dpx',0,b'\\x00\\x07\\x23\\x23lv_display_enable_invalidation',0,b'\\x00\\x00\\x1F\\x23lv_display_flush_is_last',0,b'\\x00\\x07\\x20\\x23lv_display_flush_ready',0,b'\\x00\\x00\\x1F\\x23lv_display_get_antialiasing',0,b'\\x00\\x02\\x5A\\x23lv_display_get_buf_active',0,b'\\x00\\x01\\xF6\\x23lv_display_get_color_format',0,b'\\x00\\x02\\x45\\x23lv_display_get_default',0,b'\\x00\\x01\\x58\\x23lv_display_get_dpi',0,b'\\x00\\x05\\x79\\x23lv_display_get_draw_buf_size',0,b'\\x00\\x06\\x0E\\x23lv_display_get_driver_data',0,b'\\x00\\x05\\x79\\x23lv_display_get_event_count',0,b'\\x00\\x02\\xA0\\x23lv_display_get_event_dsc',0,b'\\x00\\x01\\x58\\x23lv_display_get_horizontal_resolution',0,b'\\x00\\x05\\x86\\x23lv_display_get_inactive_time',0,b'\\x00\\x05\\x7C\\x23lv_display_get_invalidated_draw_buf_size',0,b'\\x00\\x03\\x7C\\x23lv_display_get_layer_bottom',0,b'\\x00\\x03\\x7C\\x23lv_display_get_layer_sys',0,b'\\x00\\x03\\x7C\\x23lv_display_get_layer_top',0,b'\\x00\\x02\\x3C\\x23lv_display_get_next',0,b'\\x00\\x01\\x58\\x23lv_display_get_offset_x',0,b'\\x00\\x01\\x58\\x23lv_display_get_offset_y',0,b'\\x00\\x01\\x58\\x23lv_display_get_physical_horizontal_resolution',0,b'\\x00\\x01\\x58\\x23lv_display_get_physical_vertical_resolution',0,b'\\x00\\x05\\x22\\x23lv_display_get_refr_timer',0,b'\\x00\\x02\\x35\\x23lv_display_get_rotation',0,b'\\x00\\x03\\x7C\\x23lv_display_get_screen_active',0,b'\\x00\\x03\\x7C\\x23lv_display_get_screen_prev',0,b'\\x00\\x05\\x0E\\x23lv_display_get_theme',0,b'\\x00\\x05\\x79\\x23lv_display_get_tile_cnt',0,b'\\x00\\x06\\x0E\\x23lv_display_get_user_data',0,b'\\x00\\x01\\x58\\x23lv_display_get_vertical_resolution',0,b'\\x00\\x00\\x1F\\x23lv_display_is_double_buffered',0,b'\\x00\\x00\\x1F\\x23lv_display_is_invalidation_enabled',0,b'\\x00\\x0C\\xDF\\x23lv_display_refr_timer',0,b'\\x00\\x05\\x81\\x23lv_display_remove_event_cb_with_user_data',0,b'\\x00\\x07\\x34\\x23lv_display_rotate_area',0,b'\\x00\\x04\\x3C\\x23lv_display_send_event',0,b'\\x00\\x07\\x23\\x23lv_display_set_antialiasing',0,b'\\x00\\x07\\x5A\\x23lv_display_set_buffers',0,b'\\x00\\x07\\x61\\x23lv_display_set_buffers_with_stride',0,b'\\x00\\x07\\x3D\\x23lv_display_set_color_format',0,b'\\x00\\x07\\x20\\x23lv_display_set_default',0,b'\\x00\\x07\\x2B\\x23lv_display_set_dpi',0,b'\\x00\\x07\\x49\\x23lv_display_set_draw_buffers',0,b'\\x00\\x07\\x56\\x23lv_display_set_driver_data',0,b'\\x00\\x07\\x6D\\x23lv_display_set_flush_cb',0,b'\\x00\\x07\\x69\\x23lv_display_set_flush_wait_cb',0,b'\\x00\\x07\\x2F\\x23lv_display_set_offset',0,b'\\x00\\x07\\x2F\\x23lv_display_set_physical_resolution',0,b'\\x00\\x07\\x41\\x23lv_display_set_render_mode',0,b'\\x00\\x07\\x2F\\x23lv_display_set_resolution',0,b'\\x00\\x07\\x45\\x23lv_display_set_rotation',0,b'\\x00\\x07\\x4E\\x23lv_display_set_theme',0,b'\\x00\\x07\\x52\\x23lv_display_set_tile_cnt',0,b'\\x00\\x07\\x56\\x23lv_display_set_user_data',0,b'\\x00\\x07\\x20\\x23lv_display_trigger_activity',0,b'\\x00\\x01\\x34\\x23lv_dpx',0,b'\\x00\\x02\\x8E\\x23lv_draw_add_task',0,b'\\x00\\x08\\xB3\\x23lv_draw_arc',0,b'\\x00\\x07\\x77\\x23lv_draw_arc_dsc_init',0,b'\\x00\\x06\\x98\\x23lv_draw_arc_get_area',0,b'\\x00\\x08\\xB7\\x23lv_draw_border',0,b'\\x00\\x07\\x7A\\x23lv_draw_border_dsc_init',0,b'\\x00\\x08\\xBC\\x23lv_draw_box_shadow',0,b'\\x00\\x07\\x7D\\x23lv_draw_box_shadow_dsc_init',0,b'\\x00\\x04\\x48\\x23lv_draw_buf_adjust_stride',0,b'\\x00\\x06\\x70\\x23lv_draw_buf_align',0,b'\\x00\\x06\\x11\\x23lv_draw_buf_align_ex',0,b'\\x00\\x07\\x8F\\x23lv_draw_buf_clear',0,b'\\x00\\x07\\x99\\x23lv_draw_buf_clear_flag',0,b'\\x00\\x07\\x93\\x23lv_draw_buf_copy',0,b'\\x00\\x02\\x79\\x23lv_draw_buf_create',0,b'\\x00\\x02\\x61\\x23lv_draw_buf_create_ex',0,b'\\x00\\x07\\x8C\\x23lv_draw_buf_destroy',0,b'\\x00\\x02\\x6F\\x23lv_draw_buf_dup',0,b'\\x00\\x02\\x5D\\x23lv_draw_buf_dup_ex',0,b'\\x00\\x07\\xA2\\x23lv_draw_buf_flush_cache',0,b'\\x00\\x04\\x44\\x23lv_draw_buf_from_image',0,b'\\x00\\x02\\x58\\x23lv_draw_buf_get_font_handlers',0,b'\\x00\\x02\\x58\\x23lv_draw_buf_get_handlers',0,b'\\x00\\x02\\x58\\x23lv_draw_buf_get_image_handlers',0,b'\\x00\\x06\\x16\\x23lv_draw_buf_goto_xy',0,b'\\x00\\x07\\x83\\x23lv_draw_buf_handlers_init',0,b'\\x00\\x00\\x2A\\x23lv_draw_buf_has_flag',0,b'\\x00\\x04\\x4C\\x23lv_draw_buf_init',0,b'\\x00\\x07\\x80\\x23lv_draw_buf_init_with_default_handlers',0,b'\\x00\\x07\\xA2\\x23lv_draw_buf_invalidate_cache',0,b'\\x00\\x04\\x41\\x23lv_draw_buf_premultiply',0,b'\\x00\\x02\\x68\\x23lv_draw_buf_reshape',0,b'\\x00\\x04\\x55\\x23lv_draw_buf_save_to_file',0,b'\\x00\\x07\\x99\\x23lv_draw_buf_set_flag',0,b'\\x00\\x07\\x9D\\x23lv_draw_buf_set_palette',0,b'\\x00\\x07\\xA6\\x23lv_draw_buf_to_image',0,b'\\x00\\x05\\xD0\\x23lv_draw_buf_width_to_stride',0,b'\\x00\\x05\\x89\\x23lv_draw_buf_width_to_stride_ex',0,b'\\x00\\x08\\xCB\\x23lv_draw_character',0,b'\\x00\\x06\\x65\\x23lv_draw_create_unit',0,b'\\x00\\x0D\\x47\\x23lv_draw_deinit',0,b'\\x00\\x0D\\x47\\x23lv_draw_dispatch',0,b'\\x00\\x00\\x22\\x23lv_draw_dispatch_layer',0,b'\\x00\\x0D\\x47\\x23lv_draw_dispatch_request',0,b'\\x00\\x0D\\x47\\x23lv_draw_dispatch_wait_for_request',0,b'\\x00\\x08\\xC1\\x23lv_draw_fill',0,b'\\x00\\x07\\xAA\\x23lv_draw_fill_dsc_init',0,b'\\x00\\x08\\xE4\\x23lv_draw_finalize_task_creation',0,b'\\x00\\x02\\x92\\x23lv_draw_get_available_task',0,b'\\x00\\x05\\x8E\\x23lv_draw_get_dependent_count',0,b'\\x00\\x02\\x92\\x23lv_draw_get_next_available_task',0,b'\\x00\\x05\\xE1\\x23lv_draw_get_unit_count',0,b'\\x00\\x07\\xAD\\x23lv_draw_glyph_dsc_init',0,b'\\x00\\x08\\xC6\\x23lv_draw_image',0,b'\\x00\\x07\\xB0\\x23lv_draw_image_dsc_init',0,b'\\x00\\x0D\\x47\\x23lv_draw_init',0,b'\\x00\\x08\\xD1\\x23lv_draw_label',0,b'\\x00\\x07\\xB3\\x23lv_draw_label_dsc_init',0,b'\\x00\\x07\\xD5\\x23lv_draw_label_iterate_characters',0,b'\\x00\\x08\\xC6\\x23lv_draw_layer',0,b'\\x00\\x06\\x36\\x23lv_draw_layer_alloc_buf',0,b'\\x00\\x03\\x71\\x23lv_draw_layer_create',0,b'\\x00\\x06\\x39\\x23lv_draw_layer_go_to_xy',0,b'\\x00\\x08\\xF3\\x23lv_draw_layer_init',0,b'\\x00\\x08\\xD6\\x23lv_draw_letter',0,b'\\x00\\x07\\xB6\\x23lv_draw_letter_dsc_init',0,b'\\x00\\x08\\xDB\\x23lv_draw_line',0,b'\\x00\\x07\\xB9\\x23lv_draw_line_dsc_init',0,b'\\x00\\x08\\xDF\\x23lv_draw_rect',0,b'\\x00\\x07\\xBC\\x23lv_draw_rect_dsc_init',0,b'\\x00\\x0D\\x23\\x23lv_draw_sw_i1_convert_to_vtiled',0,b'\\x00\\x0D\\x17\\x23lv_draw_sw_i1_invert',0,b'\\x00\\x0D\\x36\\x23lv_draw_sw_i1_to_argb8888',0,b'\\x00\\x0D\\x17\\x23lv_draw_sw_rgb565_swap',0,b'\\x00\\x0D\\x2C\\x23lv_draw_sw_rotate',0,b'\\x00\\x02\\x4F\\x23lv_draw_task_get_arc_dsc',0,b'\\x00\\x07\\xDB\\x23lv_draw_task_get_area',0,b'\\x00\\x02\\x52\\x23lv_draw_task_get_border_dsc',0,b'\\x00\\x02\\x55\\x23lv_draw_task_get_box_shadow_dsc',0,b'\\x00\\x06\\x1B\\x23lv_draw_task_get_draw_dsc',0,b'\\x00\\x02\\x7F\\x23lv_draw_task_get_fill_dsc',0,b'\\x00\\x02\\x82\\x23lv_draw_task_get_image_dsc',0,b'\\x00\\x02\\x85\\x23lv_draw_task_get_label_dsc',0,b'\\x00\\x02\\x88\\x23lv_draw_task_get_line_dsc',0,b'\\x00\\x02\\x9A\\x23lv_draw_task_get_triangle_dsc',0,b'\\x00\\x02\\x97\\x23lv_draw_task_get_type',0,b'\\x00\\x08\\xE8\\x23lv_draw_triangle',0,b'\\x00\\x07\\xDF\\x23lv_draw_triangle_dsc_init',0,b'\\x00\\x07\\xC5\\x23lv_draw_unit_draw_letter',0,b'\\x00\\x0D\\x47\\x23lv_draw_wait_for_finish',0,b'\\x00\\x09\\x3E\\x23lv_dropdown_add_option',0,b'\\x00\\x03\\xC7\\x23lv_dropdown_bind_value',0,b'\\x00\\x0E\\x05\\x25lv_dropdown_class',0,b'\\x00\\x09\\x21\\x23lv_dropdown_clear_options',0,b'\\x00\\x09\\x21\\x23lv_dropdown_close',0,b'\\x00\\x03\\x93\\x23lv_dropdown_create',0,b'\\x00\\x02\\x32\\x23lv_dropdown_get_dir',0,b'\\x00\\x03\\x93\\x23lv_dropdown_get_list',0,b'\\x00\\x05\\xB8\\x23lv_dropdown_get_option_count',0,b'\\x00\\x01\\x68\\x23lv_dropdown_get_option_index',0,b'\\x00\\x01\\x01\\x23lv_dropdown_get_options',0,b'\\x00\\x05\\xB8\\x23lv_dropdown_get_selected',0,b'\\x00\\x00\\x4F\\x23lv_dropdown_get_selected_highlight',0,b'\\x00\\x0B\\xD9\\x23lv_dropdown_get_selected_str',0,b'\\x00\\x00\\xF5\\x23lv_dropdown_get_symbol',0,b'\\x00\\x00\\xF5\\x23lv_dropdown_get_text',0,b'\\x00\\x00\\x4F\\x23lv_dropdown_is_open',0,b'\\x00\\x09\\x21\\x23lv_dropdown_open',0,b'\\x00\\x0A\\x27\\x23lv_dropdown_set_dir',0,b'\\x00\\x09\\x35\\x23lv_dropdown_set_options',0,b'\\x00\\x09\\x35\\x23lv_dropdown_set_options_static',0,b'\\x00\\x0B\\x55\\x23lv_dropdown_set_selected',0,b'\\x00\\x09\\x24\\x23lv_dropdown_set_selected_highlight',0,b'\\x00\\x0B\\xCD\\x23lv_dropdown_set_symbol',0,b'\\x00\\x09\\x35\\x23lv_dropdown_set_text',0,b'\\x00\\x0E\\x05\\x25lv_dropdownlist_class',0,b'\\x00\\x03\\x57\\x23lv_evdev_create',0,b'\\x00\\x08\\x5C\\x23lv_evdev_delete',0,b'\\x00\\x04\\xB3\\x23lv_evdev_discovery_start',0,b'\\x00\\x04\\xBB\\x23lv_evdev_discovery_stop',0,b'\\x00\\x08\\x5C\\x23lv_evdev_grab_device',0,b'\\x00\\x08\\x5C\\x23lv_evdev_release_device',0,b'\\x00\\x08\\x63\\x23lv_evdev_set_calibration',0,b'\\x00\\x08\\x5F\\x23lv_evdev_set_swap_axes',0,b'\\x00\\x02\\xA8\\x23lv_event_add',0,b'\\x00\\x00\\xF2\\x23lv_event_code_get_name',0,b'\\x00\\x0D\\x49\\x23lv_event_dsc_get_cb',0,b'\\x00\\x06\\x1E\\x23lv_event_dsc_get_user_data',0,b'\\x00\\x02\\x9D\\x23lv_event_get_code',0,b'\\x00\\x05\\x91\\x23lv_event_get_count',0,b'\\x00\\x01\\xA5\\x23lv_event_get_cover_area',0,b'\\x00\\x06\\x21\\x23lv_event_get_current_target',0,b'\\x00\\x03\\x7F\\x23lv_event_get_current_target_obj',0,b'\\x00\\x02\\x8B\\x23lv_event_get_draw_task',0,b'\\x00\\x02\\xA4\\x23lv_event_get_dsc',0,b'\\x00\\x03\\x34\\x23lv_event_get_hit_test_info',0,b'\\x00\\x03\\x51\\x23lv_event_get_indev',0,b'\\x00\\x01\\xA2\\x23lv_event_get_invalidated_area',0,b'\\x00\\x05\\x94\\x23lv_event_get_key',0,b'\\x00\\x03\\x6E\\x23lv_event_get_layer',0,b'\\x00\\x01\\xA5\\x23lv_event_get_old_size',0,b'\\x00\\x06\\x21\\x23lv_event_get_param',0,b'\\x00\\x01\\x5F\\x23lv_event_get_rotary_diff',0,b'\\x00\\x01\\x93\\x23lv_event_get_scroll_anim',0,b'\\x00\\x03\\xF6\\x23lv_event_get_self_size_info',0,b'\\x00\\x06\\x21\\x23lv_event_get_target',0,b'\\x00\\x03\\x7F\\x23lv_event_get_target_obj',0,b'\\x00\\x06\\x21\\x23lv_event_get_user_data',0,b'\\x00\\x05\\xE1\\x23lv_event_register_id',0,b'\\x00\\x00\\x32\\x23lv_event_remove',0,b'\\x00\\x07\\xE2\\x23lv_event_remove_all',0,b'\\x00\\x00\\x2E\\x23lv_event_remove_dsc',0,b'\\x00\\x04\\x59\\x23lv_event_send',0,b'\\x00\\x07\\xEC\\x23lv_event_set_cover_res',0,b'\\x00\\x07\\xE8\\x23lv_event_set_ext_draw_size',0,b'\\x00\\x07\\xE5\\x23lv_event_stop_bubbling',0,b'\\x00\\x07\\xE5\\x23lv_event_stop_processing',0,b'\\x00\\x0D\\x47\\x23lv_flex_init',0,b'\\x00\\x00\\x37\\x25lv_font_default',0,b'\\x00\\x06\\x87\\x23lv_font_get_bitmap_fmt_txt',0,b'\\x00\\x02\\xD8\\x23lv_font_get_default',0,b'\\x00\\x06\\x87\\x23lv_font_get_glyph_bitmap',0,b'\\x00\\x00\\x36\\x23lv_font_get_glyph_dsc',0,b'\\x00\\x00\\x36\\x23lv_font_get_glyph_dsc_fmt_txt',0,b'\\x00\\x05\\x4F\\x23lv_font_get_glyph_width',0,b'\\x00\\x01\\x62\\x23lv_font_get_line_height',0,b'\\x00\\x07\\xF0\\x23lv_font_glyph_release_draw_data',0,b'\\x00\\x0D\\xBE\\x25lv_font_montserrat_14',0,b'\\x00\\x07\\xFA\\x23lv_font_set_kerning',0,b'\\x00\\x0D\\x10\\x23lv_free',0,b'\\x00\\x0D\\x10\\x23lv_free_core',0,b'\\x00\\x03\\x0C\\x23lv_fs_close',0,b'\\x00\\x02\\xDD\\x23lv_fs_dir_close',0,b'\\x00\\x02\\xE5\\x23lv_fs_dir_open',0,b'\\x00\\x02\\xE0\\x23lv_fs_dir_read',0,b'\\x00\\x08\\x02\\x23lv_fs_drv_init',0,b'\\x00\\x08\\x02\\x23lv_fs_drv_register',0,b'\\x00\\x02\\xDA\\x23lv_fs_get_drv',0,b'\\x00\\x00\\xEF\\x23lv_fs_get_ext',0,b'\\x00\\x00\\xEF\\x23lv_fs_get_last',0,b'\\x00\\x00\\xD2\\x23lv_fs_get_letters',0,b'\\x00\\x00\\x00\\x23lv_fs_is_ready',0,b'\\x00\\x08\\x05\\x23lv_fs_make_path_from_buffer',0,b'\\x00\\x03\\x0F\\x23lv_fs_open',0,b'\\x00\\x03\\x1D\\x23lv_fs_read',0,b'\\x00\\x03\\x18\\x23lv_fs_seek',0,b'\\x00\\x03\\x14\\x23lv_fs_tell',0,b'\\x00\\x00\\xD2\\x23lv_fs_up',0,b'\\x00\\x03\\x23\\x23lv_fs_write',0,b'\\x00\\x08\\x14\\x23lv_grad_conical_init',0,b'\\x00\\x08\\x0B\\x23lv_grad_horizontal_init',0,b'\\x00\\x08\\x1C\\x23lv_grad_init_stops',0,b'\\x00\\x08\\x14\\x23lv_grad_linear_init',0,b'\\x00\\x08\\x14\\x23lv_grad_radial_init',0,b'\\x00\\x08\\x0E\\x23lv_grad_radial_set_focal',0,b'\\x00\\x08\\x0B\\x23lv_grad_vertical_init',0,b'\\x00\\x01\\x81\\x23lv_grid_fr',0,b'\\x00\\x0D\\x47\\x23lv_grid_init',0,b'\\x00\\x08\\x2E\\x23lv_group_add_obj',0,b'\\x00\\x03\\x2F\\x23lv_group_by_index',0,b'\\x00\\x03\\x32\\x23lv_group_create',0,b'\\x00\\x08\\x23\\x23lv_group_delete',0,b'\\x00\\x08\\x26\\x23lv_group_focus_freeze',0,b'\\x00\\x08\\x23\\x23lv_group_focus_next',0,b'\\x00\\x09\\x21\\x23lv_group_focus_obj',0,b'\\x00\\x08\\x23\\x23lv_group_focus_prev',0,b'\\x00\\x05\\xE1\\x23lv_group_get_count',0,b'\\x00\\x03\\x32\\x23lv_group_get_default',0,b'\\x00\\x0D\\x4F\\x23lv_group_get_edge_cb',0,b'\\x00\\x00\\x42\\x23lv_group_get_editing',0,b'\\x00\\x0D\\x4C\\x23lv_group_get_focus_cb',0,b'\\x00\\x03\\x86\\x23lv_group_get_focused',0,b'\\x00\\x03\\x82\\x23lv_group_get_obj_by_index',0,b'\\x00\\x05\\x97\\x23lv_group_get_obj_count',0,b'\\x00\\x00\\x3F\\x23lv_group_get_wrap',0,b'\\x00\\x08\\x23\\x23lv_group_remove_all_objs',0,b'\\x00\\x09\\x21\\x23lv_group_remove_obj',0,b'\\x00\\x04\\x5E\\x23lv_group_send_data',0,b'\\x00\\x08\\x23\\x23lv_group_set_default',0,b'\\x00\\x08\\x36\\x23lv_group_set_edge_cb',0,b'\\x00\\x08\\x26\\x23lv_group_set_editing',0,b'\\x00\\x08\\x32\\x23lv_group_set_focus_cb',0,b'\\x00\\x08\\x2A\\x23lv_group_set_refocus_policy',0,b'\\x00\\x08\\x26\\x23lv_group_set_wrap',0,b'\\x00\\x0A\\x9F\\x23lv_group_swap_obj',0,b'\\x00\\x08\\x54\\x23lv_image_buf_free',0,b'\\x00\\x08\\x57\\x23lv_image_buf_set_palette',0,b'\\x00\\x0D\\x20\\x23lv_image_cache_drop',0,b'\\x00\\x0D\\x47\\x23lv_image_cache_dump',0,b'\\x00\\x04\\x9C\\x23lv_image_cache_init',0,b'\\x00\\x00\\xD0\\x23lv_image_cache_is_enabled',0,b'\\x00\\x03\\x66\\x23lv_image_cache_iter_create',0,b'\\x00\\x0D\\x07\\x23lv_image_cache_resize',0,b'\\x00\\x0E\\x05\\x25lv_image_class',0,b'\\x00\\x03\\x93\\x23lv_image_create',0,b'\\x00\\x01\\xB1\\x23lv_image_decoder_add_to_cache',0,b'\\x00\\x08\\x3A\\x23lv_image_decoder_close',0,b'\\x00\\x03\\x3D\\x23lv_image_decoder_create',0,b'\\x00\\x08\\x3D\\x23lv_image_decoder_delete',0,b'\\x00\\x04\\x62\\x23lv_image_decoder_get_area',0,b'\\x00\\x04\\xAF\\x23lv_image_decoder_get_info',0,b'\\x00\\x03\\x3A\\x23lv_image_decoder_get_next',0,b'\\x00\\x04\\x67\\x23lv_image_decoder_open',0,b'\\x00\\x02\\x72\\x23lv_image_decoder_post_process',0,b'\\x00\\x08\\x50\\x23lv_image_decoder_set_close_cb',0,b'\\x00\\x08\\x48\\x23lv_image_decoder_set_get_area_cb',0,b'\\x00\\x08\\x4C\\x23lv_image_decoder_set_info_cb',0,b'\\x00\\x08\\x44\\x23lv_image_decoder_set_open_cb',0,b'\\x00\\x00\\x4F\\x23lv_image_get_antialias',0,b'\\x00\\x03\\x42\\x23lv_image_get_bitmap_map_src',0,b'\\x00\\x01\\xAE\\x23lv_image_get_blend_mode',0,b'\\x00\\x03\\x37\\x23lv_image_get_inner_align',0,b'\\x00\\x01\\x65\\x23lv_image_get_offset_x',0,b'\\x00\\x01\\x65\\x23lv_image_get_offset_y',0,b'\\x00\\x0A\\xD3\\x23lv_image_get_pivot',0,b'\\x00\\x01\\x65\\x23lv_image_get_rotation',0,b'\\x00\\x01\\x65\\x23lv_image_get_scale',0,b'\\x00\\x01\\x65\\x23lv_image_get_scale_x',0,b'\\x00\\x01\\x65\\x23lv_image_get_scale_y',0,b'\\x00\\x06\\x8B\\x23lv_image_get_src',0,b'\\x00\\x09\\x24\\x23lv_image_set_antialias',0,b'\\x00\\x0A\\x69\\x23lv_image_set_bitmap_map_src',0,b'\\x00\\x09\\x9D\\x23lv_image_set_blend_mode',0,b'\\x00\\x0A\\x65\\x23lv_image_set_inner_align',0,b'\\x00\\x09\\x4D\\x23lv_image_set_offset_x',0,b'\\x00\\x09\\x4D\\x23lv_image_set_offset_y',0,b'\\x00\\x09\\x56\\x23lv_image_set_pivot',0,b'\\x00\\x09\\x4D\\x23lv_image_set_rotation',0,b'\\x00\\x0B\\x51\\x23lv_image_set_scale',0,b'\\x00\\x0B\\x51\\x23lv_image_set_scale_x',0,b'\\x00\\x0B\\x51\\x23lv_image_set_scale_y',0,b'\\x00\\x0B\\xCD\\x23lv_image_set_src',0,b'\\x00\\x03\\x45\\x23lv_image_src_get_type',0,b'\\x00\\x0E\\x05\\x25lv_imagebutton_class',0,b'\\x00\\x03\\x93\\x23lv_imagebutton_create',0,b'\\x00\\x06\\x8E\\x23lv_imagebutton_get_src_left',0,b'\\x00\\x06\\x8E\\x23lv_imagebutton_get_src_middle',0,b'\\x00\\x06\\x8E\\x23lv_imagebutton_get_src_right',0,b'\\x00\\x0A\\x71\\x23lv_imagebutton_set_src',0,b'\\x00\\x0A\\x6D\\x23lv_imagebutton_set_state',0,b'\\x00\\x03\\x5B\\x23lv_indev_active',0,b'\\x00\\x08\\x97\\x23lv_indev_add_event_cb',0,b'\\x00\\x03\\x5B\\x23lv_indev_create',0,b'\\x00\\x08\\x5C\\x23lv_indev_delete',0,b'\\x00\\x08\\x5F\\x23lv_indev_enable',0,b'\\x00\\x03\\xC1\\x23lv_indev_get_active_obj',0,b'\\x00\\x03\\x89\\x23lv_indev_get_cursor',0,b'\\x00\\x02\\x3F\\x23lv_indev_get_display',0,b'\\x00\\x06\\x30\\x23lv_indev_get_driver_data',0,b'\\x00\\x05\\x9A\\x23lv_indev_get_event_count',0,b'\\x00\\x02\\xAE\\x23lv_indev_get_event_dsc',0,b'\\x00\\x02\\x2F\\x23lv_indev_get_gesture_dir',0,b'\\x00\\x03\\x29\\x23lv_indev_get_group',0,b'\\x00\\x05\\xA2\\x23lv_indev_get_key',0,b'\\x00\\x03\\x48\\x23lv_indev_get_mode',0,b'\\x00\\x03\\x54\\x23lv_indev_get_next',0,b'\\x00\\x08\\xA1\\x23lv_indev_get_point',0,b'\\x00\\x00\\x49\\x23lv_indev_get_press_moved',0,b'\\x00\\x0D\\x52\\x23lv_indev_get_read_cb',0,b'\\x00\\x05\\x25\\x23lv_indev_get_read_timer',0,b'\\x00\\x02\\x2F\\x23lv_indev_get_scroll_dir',0,b'\\x00\\x03\\x8C\\x23lv_indev_get_scroll_obj',0,b'\\x00\\x05\\xEF\\x23lv_indev_get_short_click_streak',0,b'\\x00\\x03\\x4B\\x23lv_indev_get_state',0,b'\\x00\\x03\\x5D\\x23lv_indev_get_type',0,b'\\x00\\x06\\x30\\x23lv_indev_get_user_data',0,b'\\x00\\x08\\xA1\\x23lv_indev_get_vect',0,b'\\x00\\x08\\x5C\\x23lv_indev_read',0,b'\\x00\\x0C\\xDF\\x23lv_indev_read_timer_cb',0,b'\\x00\\x00\\x45\\x23lv_indev_remove_event',0,b'\\x00\\x05\\x9D\\x23lv_indev_remove_event_cb_with_user_data',0,b'\\x00\\x08\\x83\\x23lv_indev_reset',0,b'\\x00\\x08\\x5C\\x23lv_indev_reset_long_press',0,b'\\x00\\x03\\x9A\\x23lv_indev_search_obj',0,b'\\x00\\x04\\x7B\\x23lv_indev_send_event',0,b'\\x00\\x08\\x87\\x23lv_indev_set_button_points',0,b'\\x00\\x08\\x83\\x23lv_indev_set_cursor',0,b'\\x00\\x08\\x6A\\x23lv_indev_set_display',0,b'\\x00\\x08\\x93\\x23lv_indev_set_driver_data',0,b'\\x00\\x08\\x73\\x23lv_indev_set_group',0,b'\\x00\\x08\\x8B\\x23lv_indev_set_long_press_repeat_time',0,b'\\x00\\x08\\x8B\\x23lv_indev_set_long_press_time',0,b'\\x00\\x08\\x7B\\x23lv_indev_set_mode',0,b'\\x00\\x08\\x9D\\x23lv_indev_set_read_cb',0,b'\\x00\\x08\\x8F\\x23lv_indev_set_scroll_limit',0,b'\\x00\\x08\\x8F\\x23lv_indev_set_scroll_throw',0,b'\\x00\\x08\\x7F\\x23lv_indev_set_type',0,b'\\x00\\x08\\x93\\x23lv_indev_set_user_data',0,b'\\x00\\x08\\x5C\\x23lv_indev_stop_processing',0,b'\\x00\\x08\\x5C\\x23lv_indev_wait_release',0,b'\\x00\\x0D\\x47\\x23lv_init',0,b'\\x00\\x00\\xD0\\x23lv_is_initialized',0,b'\\x00\\x03\\x60\\x23lv_iter_create',0,b'\\x00\\x08\\xA5\\x23lv_iter_destroy',0,b'\\x00\\x06\\x33\\x23lv_iter_get_context',0,b'\\x00\\x08\\xAC\\x23lv_iter_inspect',0,b'\\x00\\x08\\xA8\\x23lv_iter_make_peekable',0,b'\\x00\\x04\\x83\\x23lv_iter_next',0,b'\\x00\\x04\\x83\\x23lv_iter_peek',0,b'\\x00\\x04\\x80\\x23lv_iter_peek_advance',0,b'\\x00\\x04\\x80\\x23lv_iter_peek_reset',0,b'\\x00\\x0E\\x05\\x25lv_keyboard_class',0,b'\\x00\\x03\\x93\\x23lv_keyboard_create',0,b'\\x00\\x07\\xE5\\x23lv_keyboard_def_event_cb',0,b'\\x00\\x01\\x04\\x23lv_keyboard_get_button_text',0,b'\\x00\\x00\\xEC\\x23lv_keyboard_get_map_array',0,b'\\x00\\x03\\x68\\x23lv_keyboard_get_mode',0,b'\\x00\\x00\\x83\\x23lv_keyboard_get_popovers',0,b'\\x00\\x05\\xB8\\x23lv_keyboard_get_selected_button',0,b'\\x00\\x03\\xB2\\x23lv_keyboard_get_textarea',0,b'\\x00\\x0A\\x7C\\x23lv_keyboard_set_map',0,b'\\x00\\x0A\\x78\\x23lv_keyboard_set_mode',0,b'\\x00\\x09\\x24\\x23lv_keyboard_set_popovers',0,b'\\x00\\x0A\\x9F\\x23lv_keyboard_set_textarea',0,b'\\x00\\x03\\xCB\\x23lv_label_bind_text',0,b'\\x00\\x0E\\x05\\x25lv_label_class',0,b'\\x00\\x03\\x93\\x23lv_label_create',0,b'\\x00\\x0B\\x82\\x23lv_label_cut_text',0,b'\\x00\\x05\\xC3\\x23lv_label_get_letter_on',0,b'\\x00\\x0B\\xFB\\x23lv_label_get_letter_pos',0,b'\\x00\\x03\\x6B\\x23lv_label_get_long_mode',0,b'\\x00\\x00\\x83\\x23lv_label_get_recolor',0,b'\\x00\\x00\\xE9\\x23lv_label_get_text',0,b'\\x00\\x05\\xB8\\x23lv_label_get_text_selection_end',0,b'\\x00\\x05\\xB8\\x23lv_label_get_text_selection_start',0,b'\\x00\\x0B\\x5A\\x23lv_label_ins_text',0,b'\\x00\\x00\\x92\\x23lv_label_is_char_under_pos',0,b'\\x00\\x0A\\x82\\x23lv_label_set_long_mode',0,b'\\x00\\x09\\x24\\x23lv_label_set_recolor',0,b'\\x00\\x09\\x35\\x23lv_label_set_text',0,b'\\x00\\x0B\\x51\\x23lv_label_set_text_selection_end',0,b'\\x00\\x0B\\x51\\x23lv_label_set_text_selection_start',0,b'\\x00\\x09\\x35\\x23lv_label_set_text_static',0,b'\\x00\\x03\\xC1\\x23lv_layer_bottom',0,b'\\x00\\x08\\xB0\\x23lv_layer_init',0,b'\\x00\\x08\\xB0\\x23lv_layer_reset',0,b'\\x00\\x03\\xC1\\x23lv_layer_sys',0,b'\\x00\\x03\\xC1\\x23lv_layer_top',0,b'\\x00\\x05\\xDD\\x23lv_layout_register',0,b'\\x00\\x0E\\x05\\x25lv_led_class',0,b'\\x00\\x03\\x93\\x23lv_led_create',0,b'\\x00\\x05\\xF5\\x23lv_led_get_brightness',0,b'\\x00\\x09\\x21\\x23lv_led_off',0,b'\\x00\\x09\\x21\\x23lv_led_on',0,b'\\x00\\x0B\\xA4\\x23lv_led_set_brightness',0,b'\\x00\\x0A\\x19\\x23lv_led_set_color',0,b'\\x00\\x09\\x21\\x23lv_led_toggle',0,b'\\x00\\x0E\\x05\\x25lv_line_class',0,b'\\x00\\x03\\x93\\x23lv_line_create',0,b'\\x00\\x05\\xA8\\x23lv_line_get_point_count',0,b'\\x00\\x03\\xF0\\x23lv_line_get_points',0,b'\\x00\\x03\\xED\\x23lv_line_get_points_mutable',0,b'\\x00\\x00\\x83\\x23lv_line_get_y_invert',0,b'\\x00\\x00\\x4F\\x23lv_line_is_point_array_mutable',0,b'\\x00\\x0A\\xCE\\x23lv_line_set_points',0,b'\\x00\\x0A\\xC9\\x23lv_line_set_points_mutable',0,b'\\x00\\x09\\x24\\x23lv_line_set_y_invert',0,b'\\x00\\x02\\x45\\x23lv_linux_fbdev_create',0,b'\\x00\\x07\\x27\\x23lv_linux_fbdev_set_file',0,b'\\x00\\x07\\x23\\x23lv_linux_fbdev_set_force_refresh',0,b'\\x00\\x03\\xA8\\x23lv_list_add_button',0,b'\\x00\\x03\\x96\\x23lv_list_add_text',0,b'\\x00\\x0E\\x05\\x25lv_list_button_class',0,b'\\x00\\x0E\\x05\\x25lv_list_class',0,b'\\x00\\x03\\x93\\x23lv_list_create',0,b'\\x00\\x00\\xF8\\x23lv_list_get_button_text',0,b'\\x00\\x0A\\xA8\\x23lv_list_set_button_text',0,b'\\x00\\x0E\\x05\\x25lv_list_text_class',0,b'\\x00\\x09\\x00\\x23lv_ll_chg_list',0,b'\\x00\\x08\\xFD\\x23lv_ll_clear',0,b'\\x00\\x09\\x13\\x23lv_ll_clear_custom',0,b'\\x00\\x06\\x45\\x23lv_ll_get_head',0,b'\\x00\\x05\\xA5\\x23lv_ll_get_len',0,b'\\x00\\x06\\x48\\x23lv_ll_get_next',0,b'\\x00\\x06\\x48\\x23lv_ll_get_prev',0,b'\\x00\\x06\\x45\\x23lv_ll_get_tail',0,b'\\x00\\x09\\x06\\x23lv_ll_init',0,b'\\x00\\x06\\x3E\\x23lv_ll_ins_head',0,b'\\x00\\x06\\x41\\x23lv_ll_ins_prev',0,b'\\x00\\x06\\x3E\\x23lv_ll_ins_tail',0,b'\\x00\\x00\\x4C\\x23lv_ll_is_empty',0,b'\\x00\\x09\\x0E\\x23lv_ll_move_before',0,b'\\x00\\x09\\x0A\\x23lv_ll_remove',0,b'\\x00\\x0D\\x47\\x23lv_lock',0,b'\\x00\\x04\\xBB\\x23lv_lock_isr',0,b'\\x00\\x0D\\x47\\x23lv_lodepng_deinit',0,b'\\x00\\x0D\\x47\\x23lv_lodepng_init',0,b'\\x00\\x06\\x65\\x23lv_malloc',0,b'\\x00\\x06\\x65\\x23lv_malloc_core',0,b'\\x00\\x06\\x65\\x23lv_malloc_zeroed',0,b'\\x00\\x01\\x41\\x23lv_map',0,b'\\x00\\x06\\x74\\x23lv_mem_add_pool',0,b'\\x00\\x0D\\x47\\x23lv_mem_deinit',0,b'\\x00\\x0D\\x47\\x23lv_mem_init',0,b'\\x00\\x09\\x17\\x23lv_mem_monitor',0,b'\\x00\\x09\\x17\\x23lv_mem_monitor_core',0,b'\\x00\\x0D\\x10\\x23lv_mem_remove_pool',0,b'\\x00\\x04\\xBB\\x23lv_mem_test',0,b'\\x00\\x04\\xBB\\x23lv_mem_test_core',0,b'\\x00\\x01\\x1B\\x23lv_memcmp',0,b'\\x00\\x06\\x78\\x23lv_memcpy',0,b'\\x00\\x06\\x78\\x23lv_memmove',0,b'\\x00\\x0D\\x1B\\x23lv_memset',0,b'\\x00\\x00\\x5B\\x23lv_menu_back_button_is_root',0,b'\\x00\\x0E\\x05\\x25lv_menu_class',0,b'\\x00\\x09\\x21\\x23lv_menu_clear_history',0,b'\\x00\\x0E\\x05\\x25lv_menu_cont_class',0,b'\\x00\\x03\\x93\\x23lv_menu_cont_create',0,b'\\x00\\x03\\x93\\x23lv_menu_create',0,b'\\x00\\x03\\x93\\x23lv_menu_get_cur_main_page',0,b'\\x00\\x03\\x93\\x23lv_menu_get_cur_sidebar_page',0,b'\\x00\\x03\\x93\\x23lv_menu_get_main_header',0,b'\\x00\\x03\\x93\\x23lv_menu_get_main_header_back_button',0,b'\\x00\\x03\\x93\\x23lv_menu_get_sidebar_header',0,b'\\x00\\x03\\x93\\x23lv_menu_get_sidebar_header_back_button',0,b'\\x00\\x0E\\x05\\x25lv_menu_main_cont_class',0,b'\\x00\\x0E\\x05\\x25lv_menu_main_header_cont_class',0,b'\\x00\\x0E\\x05\\x25lv_menu_page_class',0,b'\\x00\\x03\\x96\\x23lv_menu_page_create',0,b'\\x00\\x0E\\x05\\x25lv_menu_section_class',0,b'\\x00\\x03\\x93\\x23lv_menu_section_create',0,b'\\x00\\x0E\\x05\\x25lv_menu_separator_class',0,b'\\x00\\x03\\x93\\x23lv_menu_separator_create',0,b'\\x00\\x0A\\xB8\\x23lv_menu_set_load_page_event',0,b'\\x00\\x0A\\x8E\\x23lv_menu_set_mode_header',0,b'\\x00\\x0A\\x92\\x23lv_menu_set_mode_root_back_button',0,b'\\x00\\x0A\\x9F\\x23lv_menu_set_page',0,b'\\x00\\x09\\x35\\x23lv_menu_set_page_title',0,b'\\x00\\x09\\x35\\x23lv_menu_set_page_title_static',0,b'\\x00\\x0A\\x9F\\x23lv_menu_set_sidebar_page',0,b'\\x00\\x0E\\x05\\x25lv_menu_sidebar_cont_class',0,b'\\x00\\x0E\\x05\\x25lv_menu_sidebar_header_cont_class',0,b'\\x00\\x03\\x93\\x23lv_msgbox_add_close_button',0,b'\\x00\\x03\\x96\\x23lv_msgbox_add_footer_button',0,b'\\x00\\x03\\xA4\\x23lv_msgbox_add_header_button',0,b'\\x00\\x03\\x96\\x23lv_msgbox_add_text',0,b'\\x00\\x03\\x96\\x23lv_msgbox_add_title',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_backdrop_class',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_class',0,b'\\x00\\x09\\x21\\x23lv_msgbox_close',0,b'\\x00\\x09\\x21\\x23lv_msgbox_close_async',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_content_class',0,b'\\x00\\x03\\x93\\x23lv_msgbox_create',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_footer_button_class',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_footer_class',0,b'\\x00\\x03\\x93\\x23lv_msgbox_get_content',0,b'\\x00\\x03\\x93\\x23lv_msgbox_get_footer',0,b'\\x00\\x03\\x93\\x23lv_msgbox_get_header',0,b'\\x00\\x03\\x93\\x23lv_msgbox_get_title',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_header_button_class',0,b'\\x00\\x0E\\x05\\x25lv_msgbox_header_class',0,b'\\x00\\x04\\x9F\\x23lv_mutex_delete',0,b'\\x00\\x04\\x9F\\x23lv_mutex_init',0,b'\\x00\\x04\\x9F\\x23lv_mutex_lock',0,b'\\x00\\x04\\x9F\\x23lv_mutex_lock_isr',0,b'\\x00\\x04\\x9F\\x23lv_mutex_unlock',0,b'\\x00\\x02\\xB6\\x23lv_obj_add_event_cb',0,b'\\x00\\x0A\\x96\\x23lv_obj_add_flag',0,b'\\x00\\x0B\\x33\\x23lv_obj_add_state',0,b'\\x00\\x0B\\x13\\x23lv_obj_add_style',0,b'\\x00\\x09\\x71\\x23lv_obj_align',0,b'\\x00\\x0A\\xBD\\x23lv_obj_align_to',0,b'\\x00\\x09\\x21\\x23lv_obj_allocate_spec_attr',0,b'\\x00\\x00\\x86\\x23lv_obj_area_is_visible',0,b'\\x00\\x03\\xC7\\x23lv_obj_bind_checked',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_eq',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_ge',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_gt',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_le',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_lt',0,b'\\x00\\x03\\xD0\\x23lv_obj_bind_flag_if_not_eq',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_eq',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_ge',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_gt',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_le',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_lt',0,b'\\x00\\x03\\xD6\\x23lv_obj_bind_state_if_not_eq',0,b'\\x00\\x01\\x70\\x23lv_obj_calculate_ext_draw_size',0,b'\\x00\\x05\\x09\\x23lv_obj_calculate_style_text_align',0,b'\\x00\\x09\\x21\\x23lv_obj_center',0,b'\\x00\\x00\\x8A\\x23lv_obj_check_type',0,b'\\x00\\x0E\\x05\\x25lv_obj_class',0,b'\\x00\\x03\\x8F\\x23lv_obj_class_create_obj',0,b'\\x00\\x09\\x21\\x23lv_obj_class_init_obj',0,b'\\x00\\x09\\x21\\x23lv_obj_clean',0,b'\\x00\\x03\\x93\\x23lv_obj_create',0,b'\\x00\\x09\\x21\\x23lv_obj_delete',0,b'\\x00\\x06\\xA2\\x23lv_obj_delete_anim_completed_cb',0,b'\\x00\\x09\\x21\\x23lv_obj_delete_async',0,b'\\x00\\x0B\\x51\\x23lv_obj_delete_delayed',0,b'\\x00\\x09\\x21\\x23lv_obj_dump_tree',0,b'\\x00\\x06\\x95\\x23lv_obj_enable_style_refresh',0,b'\\x00\\x04\\x87\\x23lv_obj_event_base',0,b'\\x00\\x0B\\x82\\x23lv_obj_fade_in',0,b'\\x00\\x0B\\x82\\x23lv_obj_fade_out',0,b'\\x00\\x03\\xB5\\x23lv_obj_get_child',0,b'\\x00\\x03\\xB9\\x23lv_obj_get_child_by_type',0,b'\\x00\\x05\\xB8\\x23lv_obj_get_child_count',0,b'\\x00\\x05\\xBF\\x23lv_obj_get_child_count_by_type',0,b'\\x00\\x03\\x79\\x23lv_obj_get_class',0,b'\\x00\\x0B\\xDE\\x23lv_obj_get_click_area',0,b'\\x00\\x0B\\xDE\\x23lv_obj_get_content_coords',0,b'\\x00\\x01\\x74\\x23lv_obj_get_content_height',0,b'\\x00\\x01\\x74\\x23lv_obj_get_content_width',0,b'\\x00\\x0B\\xDE\\x23lv_obj_get_coords',0,b'\\x00\\x02\\x42\\x23lv_obj_get_display',0,b'\\x00\\x05\\xA8\\x23lv_obj_get_event_count',0,b'\\x00\\x02\\xB2\\x23lv_obj_get_event_dsc',0,b'\\x00\\x03\\x2C\\x23lv_obj_get_group',0,b'\\x00\\x01\\x74\\x23lv_obj_get_height',0,b'\\x00\\x01\\x74\\x23lv_obj_get_index',0,b'\\x00\\x01\\x77\\x23lv_obj_get_index_by_type',0,b'\\x00\\x04\\xE4\\x23lv_obj_get_local_style_prop',0,b'\\x00\\x03\\xB2\\x23lv_obj_get_parent',0,b'\\x00\\x03\\xB2\\x23lv_obj_get_screen',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_bottom',0,b'\\x00\\x02\\x32\\x23lv_obj_get_scroll_dir',0,b'\\x00\\x0A\\xD3\\x23lv_obj_get_scroll_end',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_left',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_right',0,b'\\x00\\x04\\xC3\\x23lv_obj_get_scroll_snap_x',0,b'\\x00\\x04\\xC3\\x23lv_obj_get_scroll_snap_y',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_top',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_x',0,b'\\x00\\x01\\x74\\x23lv_obj_get_scroll_y',0,b'\\x00\\x09\\x85\\x23lv_obj_get_scrollbar_area',0,b'\\x00\\x04\\xC6\\x23lv_obj_get_scrollbar_mode',0,b'\\x00\\x01\\x74\\x23lv_obj_get_self_height',0,b'\\x00\\x01\\x74\\x23lv_obj_get_self_width',0,b'\\x00\\x03\\xB5\\x23lv_obj_get_sibling',0,b'\\x00\\x03\\xB9\\x23lv_obj_get_sibling_by_type',0,b'\\x00\\x05\\x54\\x23lv_obj_get_state',0,b'\\x00\\x05\\xF8\\x23lv_obj_get_style_opa_recursive',0,b'\\x00\\x04\\xF7\\x23lv_obj_get_style_prop',0,b'\\x00\\x01\\xE7\\x23lv_obj_get_style_recolor_recursive',0,b'\\x00\\x03\\x76\\x23lv_obj_get_transform',0,b'\\x00\\x0B\\xE2\\x23lv_obj_get_transformed_area',0,b'\\x00\\x06\\x4C\\x23lv_obj_get_user_data',0,b'\\x00\\x01\\x74\\x23lv_obj_get_width',0,b'\\x00\\x01\\x74\\x23lv_obj_get_x',0,b'\\x00\\x01\\x74\\x23lv_obj_get_x2',0,b'\\x00\\x01\\x74\\x23lv_obj_get_x_aligned',0,b'\\x00\\x01\\x74\\x23lv_obj_get_y',0,b'\\x00\\x01\\x74\\x23lv_obj_get_y2',0,b'\\x00\\x01\\x74\\x23lv_obj_get_y_aligned',0,b'\\x00\\x00\\x8A\\x23lv_obj_has_class',0,b'\\x00\\x00\\x8E\\x23lv_obj_has_flag',0,b'\\x00\\x00\\x8E\\x23lv_obj_has_flag_any',0,b'\\x00\\x00\\x96\\x23lv_obj_has_state',0,b'\\x00\\x00\\x9A\\x23lv_obj_has_style_prop',0,b'\\x00\\x00\\x5F\\x23lv_obj_hit_test',0,b'\\x00\\x0B\\x69\\x23lv_obj_init_draw_arc_dsc',0,b'\\x00\\x0B\\x6E\\x23lv_obj_init_draw_image_dsc',0,b'\\x00\\x0B\\x73\\x23lv_obj_init_draw_label_dsc',0,b'\\x00\\x0B\\x78\\x23lv_obj_init_draw_line_dsc',0,b'\\x00\\x0B\\x7D\\x23lv_obj_init_draw_rect_dsc',0,b'\\x00\\x0B\\xD6\\x23lv_obj_invalidate',0,b'\\x00\\x0B\\xE7\\x23lv_obj_invalidate_area',0,b'\\x00\\x00\\x4F\\x23lv_obj_is_editable',0,b'\\x00\\x00\\x4F\\x23lv_obj_is_group_def',0,b'\\x00\\x00\\x83\\x23lv_obj_is_layout_positioned',0,b'\\x00\\x00\\x83\\x23lv_obj_is_scrolling',0,b'\\x00\\x00\\x83\\x23lv_obj_is_valid',0,b'\\x00\\x00\\x83\\x23lv_obj_is_visible',0,b'\\x00\\x09\\x21\\x23lv_obj_mark_layout_as_dirty',0,b'\\x00\\x09\\x5B\\x23lv_obj_move_children_by',0,b'\\x00\\x09\\x56\\x23lv_obj_move_to',0,b'\\x00\\x09\\x4D\\x23lv_obj_move_to_index',0,b'\\x00\\x09\\x1E\\x23lv_obj_null_on_delete',0,b'\\x00\\x09\\x24\\x23lv_obj_readjust_scroll',0,b'\\x00\\x08\\xF9\\x23lv_obj_redraw',0,b'\\x00\\x09\\x21\\x23lv_obj_refr_pos',0,b'\\x00\\x00\\x4F\\x23lv_obj_refr_size',0,b'\\x00\\x09\\x21\\x23lv_obj_refresh_ext_draw_size',0,b'\\x00\\x00\\x4F\\x23lv_obj_refresh_self_size',0,b'\\x00\\x0B\\x9F\\x23lv_obj_refresh_style',0,b'\\x00\\x00\\x69\\x23lv_obj_remove_event',0,b'\\x00\\x05\\xAF\\x23lv_obj_remove_event_cb',0,b'\\x00\\x05\\xB3\\x23lv_obj_remove_event_cb_with_user_data',0,b'\\x00\\x00\\x57\\x23lv_obj_remove_event_dsc',0,b'\\x00\\x0A\\x96\\x23lv_obj_remove_flag',0,b'\\x00\\x0B\\x1D\\x23lv_obj_remove_from_subject',0,b'\\x00\\x00\\x7E\\x23lv_obj_remove_local_style_prop',0,b'\\x00\\x0B\\x33\\x23lv_obj_remove_state',0,b'\\x00\\x0B\\x13\\x23lv_obj_remove_style',0,b'\\x00\\x09\\x21\\x23lv_obj_remove_style_all',0,b'\\x00\\x00\\x63\\x23lv_obj_replace_style',0,b'\\x00\\x0C\\x44\\x23lv_obj_report_style_change',0,b'\\x00\\x09\\x21\\x23lv_obj_reset_transform',0,b'\\x00\\x09\\x5B\\x23lv_obj_scroll_by',0,b'\\x00\\x09\\x5B\\x23lv_obj_scroll_by_bounded',0,b'\\x00\\x09\\x5B\\x23lv_obj_scroll_to',0,b'\\x00\\x09\\x24\\x23lv_obj_scroll_to_view',0,b'\\x00\\x09\\x24\\x23lv_obj_scroll_to_view_recursive',0,b'\\x00\\x09\\x51\\x23lv_obj_scroll_to_x',0,b'\\x00\\x09\\x51\\x23lv_obj_scroll_to_y',0,b'\\x00\\x09\\x21\\x23lv_obj_scrollbar_invalidate',0,b'\\x00\\x04\\x8B\\x23lv_obj_send_event',0,b'\\x00\\x09\\x6D\\x23lv_obj_set_align',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_content_height',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_content_width',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_ext_click_area',0,b'\\x00\\x0A\\x2F\\x23lv_obj_set_flex_align',0,b'\\x00\\x0A\\x3A\\x23lv_obj_set_flex_flow',0,b'\\x00\\x0B\\xA4\\x23lv_obj_set_flex_grow',0,b'\\x00\\x0A\\x5B\\x23lv_obj_set_grid_align',0,b'\\x00\\x0A\\x52\\x23lv_obj_set_grid_cell',0,b'\\x00\\x09\\x43\\x23lv_obj_set_grid_dsc_array',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_height',0,b'\\x00\\x0B\\x51\\x23lv_obj_set_layout',0,b'\\x00\\x0B\\xAD\\x23lv_obj_set_local_style_prop',0,b'\\x00\\x0A\\x9F\\x23lv_obj_set_parent',0,b'\\x00\\x09\\x56\\x23lv_obj_set_pos',0,b'\\x00\\x0A\\x27\\x23lv_obj_set_scroll_dir',0,b'\\x00\\x0A\\xED\\x23lv_obj_set_scroll_snap_x',0,b'\\x00\\x0A\\xED\\x23lv_obj_set_scroll_snap_y',0,b'\\x00\\x0A\\xF1\\x23lv_obj_set_scrollbar_mode',0,b'\\x00\\x09\\x56\\x23lv_obj_set_size',0,b'\\x00\\x0B\\x37\\x23lv_obj_set_state',0,b'\\x00\\x09\\x77\\x23lv_obj_set_style_align',0,b'\\x00\\x09\\x7C\\x23lv_obj_set_style_anim',0,b'\\x00\\x0B\\x82\\x23lv_obj_set_style_anim_duration',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_arc_color',0,b'\\x00\\x0B\\xD1\\x23lv_obj_set_style_arc_image_src',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_arc_opa',0,b'\\x00\\x09\\x28\\x23lv_obj_set_style_arc_rounded',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_arc_width',0,b'\\x00\\x09\\x98\\x23lv_obj_set_style_base_dir',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_bg_color',0,b'\\x00\\x0A\\x4D\\x23lv_obj_set_style_bg_grad',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_bg_grad_color',0,b'\\x00\\x0A\\x48\\x23lv_obj_set_style_bg_grad_dir',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_bg_grad_opa',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_bg_grad_stop',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_bg_image_opa',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_bg_image_recolor',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_bg_image_recolor_opa',0,b'\\x00\\x0B\\xD1\\x23lv_obj_set_style_bg_image_src',0,b'\\x00\\x09\\x28\\x23lv_obj_set_style_bg_image_tiled',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_bg_main_opa',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_bg_main_stop',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_bg_opa',0,b'\\x00\\x0B\\xD1\\x23lv_obj_set_style_bitmap_mask_src',0,b'\\x00\\x09\\xA1\\x23lv_obj_set_style_blend_mode',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_border_color',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_border_opa',0,b'\\x00\\x09\\x28\\x23lv_obj_set_style_border_post',0,b'\\x00\\x09\\xA6\\x23lv_obj_set_style_border_side',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_border_width',0,b'\\x00\\x09\\x28\\x23lv_obj_set_style_clip_corner',0,b'\\x00\\x0A\\x14\\x23lv_obj_set_style_color_filter_dsc',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_color_filter_opa',0,b'\\x00\\x0A\\x35\\x23lv_obj_set_style_flex_cross_place',0,b'\\x00\\x0A\\x3E\\x23lv_obj_set_style_flex_flow',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_flex_grow',0,b'\\x00\\x0A\\x35\\x23lv_obj_set_style_flex_main_place',0,b'\\x00\\x0A\\x35\\x23lv_obj_set_style_flex_track_place',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_grid_cell_column_pos',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_grid_cell_column_span',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_grid_cell_row_pos',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_grid_cell_row_span',0,b'\\x00\\x0A\\x60\\x23lv_obj_set_style_grid_cell_x_align',0,b'\\x00\\x0A\\x60\\x23lv_obj_set_style_grid_cell_y_align',0,b'\\x00\\x0A\\x60\\x23lv_obj_set_style_grid_column_align',0,b'\\x00\\x09\\x48\\x23lv_obj_set_style_grid_column_dsc_array',0,b'\\x00\\x0A\\x60\\x23lv_obj_set_style_grid_row_align',0,b'\\x00\\x09\\x48\\x23lv_obj_set_style_grid_row_dsc_array',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_height',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_image_opa',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_image_recolor',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_image_recolor_opa',0,b'\\x00\\x0B\\x47\\x23lv_obj_set_style_layout',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_length',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_line_color',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_line_dash_gap',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_line_dash_width',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_line_opa',0,b'\\x00\\x09\\x28\\x23lv_obj_set_style_line_rounded',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_line_width',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_margin_bottom',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_margin_left',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_margin_right',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_margin_top',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_max_height',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_max_width',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_min_height',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_min_width',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_opa',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_opa_layered',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_outline_color',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_outline_opa',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_outline_pad',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_outline_width',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_bottom',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_column',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_left',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_radial',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_right',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_row',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_pad_top',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_radial_offset',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_radius',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_recolor',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_recolor_opa',0,b'\\x00\\x0B\\x82\\x23lv_obj_set_style_rotary_sensitivity',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_shadow_color',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_shadow_offset_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_shadow_offset_y',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_shadow_opa',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_shadow_spread',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_shadow_width',0,b'\\x00\\x0B\\x29\\x23lv_obj_set_style_text_align',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_text_color',0,b'\\x00\\x0B\\x2E\\x23lv_obj_set_style_text_decor',0,b'\\x00\\x0A\\x43\\x23lv_obj_set_style_text_font',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_text_letter_space',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_text_line_space',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_text_opa',0,b'\\x00\\x0A\\x1D\\x23lv_obj_set_style_text_outline_stroke_color',0,b'\\x00\\x0B\\xB3\\x23lv_obj_set_style_text_outline_stroke_opa',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_text_outline_stroke_width',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_height',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_pivot_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_pivot_y',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_rotation',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_scale_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_scale_y',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_skew_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_skew_y',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_transform_width',0,b'\\x00\\x0B\\x18\\x23lv_obj_set_style_transition',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_translate_radial',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_translate_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_translate_y',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_width',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_x',0,b'\\x00\\x09\\x68\\x23lv_obj_set_style_y',0,b'\\x00\\x0A\\x8A\\x23lv_obj_set_transform',0,b'\\x00\\x0B\\xBD\\x23lv_obj_set_user_data',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_width',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_x',0,b'\\x00\\x09\\x4D\\x23lv_obj_set_y',0,b'\\x00\\x0B\\xD6\\x23lv_obj_stop_scroll_anim',0,b'\\x00\\x04\\xF2\\x23lv_obj_style_apply_color_filter',0,b'\\x00\\x01\\xEB\\x23lv_obj_style_apply_recolor',0,b'\\x00\\x0A\\x9F\\x23lv_obj_swap',0,b'\\x00\\x0B\\xF0\\x23lv_obj_transform_point',0,b'\\x00\\x0B\\xF5\\x23lv_obj_transform_point_array',0,b'\\x00\\x0A\\xC4\\x23lv_obj_tree_walk',0,b'\\x00\\x0A\\x9A\\x23lv_obj_update_flag',0,b'\\x00\\x0B\\xD6\\x23lv_obj_update_layout',0,b'\\x00\\x09\\x24\\x23lv_obj_update_snap',0,b'\\x00\\x06\\x54\\x23lv_observer_get_target',0,b'\\x00\\x03\\xBE\\x23lv_observer_get_target_obj',0,b'\\x00\\x06\\x57\\x23lv_observer_get_user_data',0,b'\\x00\\x0C\\x00\\x23lv_observer_remove',0,b'\\x00\\x05\\xE1\\x23lv_os_get_idle_percent',0,b'\\x00\\x02\\x19\\x23lv_palette_darken',0,b'\\x00\\x02\\x19\\x23lv_palette_lighten',0,b'\\x00\\x02\\x16\\x23lv_palette_main',0,b'\\x00\\x01\\x34\\x23lv_pct',0,b'\\x00\\x01\\x37\\x23lv_pct_to_px',0,b'\\x00\\x0C\\x2A\\x23lv_point_array_transform',0,b'\\x00\\x03\\xFD\\x23lv_point_from_precise',0,b'\\x00\\x0C\\x07\\x23lv_point_precise_set',0,b'\\x00\\x0C\\x0C\\x23lv_point_precise_swap',0,b'\\x00\\x0C\\x19\\x23lv_point_set',0,b'\\x00\\x0C\\x26\\x23lv_point_swap',0,b'\\x00\\x03\\xF3\\x23lv_point_to_precise',0,b'\\x00\\x0C\\x1E\\x23lv_point_transform',0,b'\\x00\\x01\\x84\\x23lv_pow',0,b'\\x00\\x0E\\x05\\x25lv_qrcode_class',0,b'\\x00\\x03\\x93\\x23lv_qrcode_create',0,b'\\x00\\x0A\\x19\\x23lv_qrcode_set_dark_color',0,b'\\x00\\x0A\\x19\\x23lv_qrcode_set_light_color',0,b'\\x00\\x09\\x4D\\x23lv_qrcode_set_size',0,b'\\x00\\x04\\x90\\x23lv_qrcode_update',0,b'\\x00\\x05\\xD4\\x23lv_rand',0,b'\\x00\\x0D\\x04\\x23lv_rand_set_seed',0,b'\\x00\\x0C\\x33\\x23lv_rb_destroy',0,b'\\x00\\x00\\xA8\\x23lv_rb_drop',0,b'\\x00\\x00\\xA4\\x23lv_rb_drop_node',0,b'\\x00\\x04\\x0A\\x23lv_rb_find',0,b'\\x00\\x00\\x9F\\x23lv_rb_init',0,b'\\x00\\x04\\x06\\x23lv_rb_insert',0,b'\\x00\\x04\\x03\\x23lv_rb_maximum',0,b'\\x00\\x04\\x00\\x23lv_rb_maximum_from',0,b'\\x00\\x04\\x03\\x23lv_rb_minimum',0,b'\\x00\\x04\\x00\\x23lv_rb_minimum_from',0,b'\\x00\\x06\\x5E\\x23lv_rb_remove',0,b'\\x00\\x06\\x5A\\x23lv_rb_remove_node',0,b'\\x00\\x06\\x74\\x23lv_realloc',0,b'\\x00\\x06\\x74\\x23lv_realloc_core',0,b'\\x00\\x06\\x74\\x23lv_reallocf',0,b'\\x00\\x07\\x20\\x23lv_refr_now',0,b'\\x00\\x03\\xC7\\x23lv_roller_bind_value',0,b'\\x00\\x0E\\x05\\x25lv_roller_class',0,b'\\x00\\x03\\x93\\x23lv_roller_create',0,b'\\x00\\x05\\xB8\\x23lv_roller_get_option_count',0,b'\\x00\\x01\\x01\\x23lv_roller_get_options',0,b'\\x00\\x05\\xB8\\x23lv_roller_get_selected',0,b'\\x00\\x0B\\xD9\\x23lv_roller_get_selected_str',0,b'\\x00\\x09\\x39\\x23lv_roller_set_options',0,b'\\x00\\x0B\\x55\\x23lv_roller_set_selected',0,b'\\x00\\x00\\x52\\x23lv_roller_set_selected_str',0,b'\\x00\\x0B\\x51\\x23lv_roller_set_visible_row_count',0,b'\\x00\\x04\\xC0\\x23lv_scale_add_section',0,b'\\x00\\x0E\\x05\\x25lv_scale_class',0,b'\\x00\\x03\\x93\\x23lv_scale_create',0,b'\\x00\\x05\\xA8\\x23lv_scale_get_angle_range',0,b'\\x00\\x00\\x4F\\x23lv_scale_get_label_show',0,b'\\x00\\x01\\x65\\x23lv_scale_get_major_tick_every',0,b'\\x00\\x04\\xBD\\x23lv_scale_get_mode',0,b'\\x00\\x01\\x65\\x23lv_scale_get_range_max_value',0,b'\\x00\\x01\\x65\\x23lv_scale_get_range_min_value',0,b'\\x00\\x01\\x65\\x23lv_scale_get_rotation',0,b'\\x00\\x01\\x65\\x23lv_scale_get_total_tick_count',0,b'\\x00\\x0C\\x36\\x23lv_scale_section_set_range',0,b'\\x00\\x0C\\x3B\\x23lv_scale_section_set_style',0,b'\\x00\\x0B\\x51\\x23lv_scale_set_angle_range',0,b'\\x00\\x09\\x24\\x23lv_scale_set_draw_ticks_on_top',0,b'\\x00\\x0A\\xAD\\x23lv_scale_set_image_needle_value',0,b'\\x00\\x09\\x24\\x23lv_scale_set_label_show',0,b'\\x00\\x0A\\xB2\\x23lv_scale_set_line_needle_value',0,b'\\x00\\x0B\\x51\\x23lv_scale_set_major_tick_every',0,b'\\x00\\x0A\\xD7\\x23lv_scale_set_mode',0,b'\\x00\\x09\\x24\\x23lv_scale_set_post_draw',0,b'\\x00\\x09\\x56\\x23lv_scale_set_range',0,b'\\x00\\x09\\x4D\\x23lv_scale_set_rotation',0,b'\\x00\\x0A\\xDB\\x23lv_scale_set_section_range',0,b'\\x00\\x0A\\xE1\\x23lv_scale_set_section_style_indicator',0,b'\\x00\\x0A\\xE1\\x23lv_scale_set_section_style_items',0,b'\\x00\\x0A\\xE1\\x23lv_scale_set_section_style_main',0,b'\\x00\\x09\\x2D\\x23lv_scale_set_text_src',0,b'\\x00\\x0B\\x51\\x23lv_scale_set_total_tick_count',0,b'\\x00\\x03\\xC1\\x23lv_screen_active',0,b'\\x00\\x09\\x21\\x23lv_screen_load',0,b'\\x00\\x0A\\xE6\\x23lv_screen_load_anim',0,b'\\x00\\x03\\xC7\\x23lv_slider_bind_value',0,b'\\x00\\x0E\\x05\\x25lv_slider_class',0,b'\\x00\\x03\\x93\\x23lv_slider_create',0,b'\\x00\\x01\\x74\\x23lv_slider_get_left_value',0,b'\\x00\\x01\\x74\\x23lv_slider_get_max_value',0,b'\\x00\\x01\\x74\\x23lv_slider_get_min_value',0,b'\\x00\\x04\\xC9\\x23lv_slider_get_mode',0,b'\\x00\\x04\\xCC\\x23lv_slider_get_orientation',0,b'\\x00\\x01\\x74\\x23lv_slider_get_value',0,b'\\x00\\x00\\x83\\x23lv_slider_is_dragged',0,b'\\x00\\x00\\x4F\\x23lv_slider_is_symmetrical',0,b'\\x00\\x0A\\xF5\\x23lv_slider_set_mode',0,b'\\x00\\x0A\\xF9\\x23lv_slider_set_orientation',0,b'\\x00\\x09\\x56\\x23lv_slider_set_range',0,b'\\x00\\x09\\x51\\x23lv_slider_set_start_value',0,b'\\x00\\x09\\x51\\x23lv_slider_set_value',0,b'\\x00\\x04\\xEF\\x23lv_span_get_style',0,b'\\x00\\x01\\x08\\x23lv_span_get_text',0,b'\\x00\\x0C\\x40\\x23lv_span_set_text',0,b'\\x00\\x0C\\x40\\x23lv_span_set_text_static',0,b'\\x00\\x0D\\x47\\x23lv_span_stack_deinit',0,b'\\x00\\x0D\\x47\\x23lv_span_stack_init',0,b'\\x00\\x04\\xD9\\x23lv_spangroup_add_span',0,b'\\x00\\x0E\\x05\\x25lv_spangroup_class',0,b'\\x00\\x03\\x93\\x23lv_spangroup_create',0,b'\\x00\\x0B\\x05\\x23lv_spangroup_delete_span',0,b'\\x00\\x05\\x06\\x23lv_spangroup_get_align',0,b'\\x00\\x04\\xE0\\x23lv_spangroup_get_child',0,b'\\x00\\x01\\x6C\\x23lv_spangroup_get_expand_height',0,b'\\x00\\x05\\xAB\\x23lv_spangroup_get_expand_width',0,b'\\x00\\x01\\x65\\x23lv_spangroup_get_indent',0,b'\\x00\\x01\\x65\\x23lv_spangroup_get_max_line_height',0,b'\\x00\\x01\\x65\\x23lv_spangroup_get_max_lines',0,b'\\x00\\x04\\xD3\\x23lv_spangroup_get_mode',0,b'\\x00\\x04\\xD6\\x23lv_spangroup_get_overflow',0,b'\\x00\\x04\\xDC\\x23lv_spangroup_get_span_by_point',0,b'\\x00\\x04\\xCF\\x23lv_spangroup_get_span_coords',0,b'\\x00\\x05\\xB8\\x23lv_spangroup_get_span_count',0,b'\\x00\\x09\\x21\\x23lv_spangroup_refresh',0,b'\\x00\\x0B\\x25\\x23lv_spangroup_set_align',0,b'\\x00\\x09\\x4D\\x23lv_spangroup_set_indent',0,b'\\x00\\x09\\x4D\\x23lv_spangroup_set_max_lines',0,b'\\x00\\x0A\\xFD\\x23lv_spangroup_set_mode',0,b'\\x00\\x0B\\x01\\x23lv_spangroup_set_overflow',0,b'\\x00\\x0B\\x0E\\x23lv_spangroup_set_span_style',0,b'\\x00\\x0B\\x09\\x23lv_spangroup_set_span_text',0,b'\\x00\\x0B\\x09\\x23lv_spangroup_set_span_text_static',0,b'\\x00\\x0E\\x05\\x25lv_spinbox_class',0,b'\\x00\\x03\\x93\\x23lv_spinbox_create',0,b'\\x00\\x09\\x21\\x23lv_spinbox_decrement',0,b'\\x00\\x00\\x4F\\x23lv_spinbox_get_rollover',0,b'\\x00\\x01\\x65\\x23lv_spinbox_get_step',0,b'\\x00\\x01\\x65\\x23lv_spinbox_get_value',0,b'\\x00\\x09\\x21\\x23lv_spinbox_increment',0,b'\\x00\\x0B\\x51\\x23lv_spinbox_set_cursor_pos',0,b'\\x00\\x0B\\x82\\x23lv_spinbox_set_digit_format',0,b'\\x00\\x0A\\x27\\x23lv_spinbox_set_digit_step_direction',0,b'\\x00\\x09\\x56\\x23lv_spinbox_set_range',0,b'\\x00\\x09\\x24\\x23lv_spinbox_set_rollover',0,b'\\x00\\x0B\\x51\\x23lv_spinbox_set_step',0,b'\\x00\\x09\\x4D\\x23lv_spinbox_set_value',0,b'\\x00\\x09\\x21\\x23lv_spinbox_step_next',0,b'\\x00\\x09\\x21\\x23lv_spinbox_step_prev',0,b'\\x00\\x0E\\x05\\x25lv_spinner_class',0,b'\\x00\\x03\\x93\\x23lv_spinner_create',0,b'\\x00\\x0B\\x82\\x23lv_spinner_set_anim_params',0,b'\\x00\\x0D\\x0B\\x23lv_sqrt',0,b'\\x00\\x01\\x7E\\x23lv_sqrt32',0,b'\\x00\\x00\\xD5\\x23lv_strcat',0,b'\\x00\\x00\\xE1\\x23lv_strchr',0,b'\\x00\\x01\\x0E\\x23lv_strcmp',0,b'\\x00\\x00\\xD5\\x23lv_strcpy',0,b'\\x00\\x00\\xDE\\x23lv_strdup',0,b'\\x00\\x05\\x36\\x23lv_strlcpy',0,b'\\x00\\x05\\x3B\\x23lv_strlen',0,b'\\x00\\x00\\xD9\\x23lv_strncat',0,b'\\x00\\x01\\x12\\x23lv_strncmp',0,b'\\x00\\x00\\xD9\\x23lv_strncpy',0,b'\\x00\\x00\\xE5\\x23lv_strndup',0,b'\\x00\\x05\\x3E\\x23lv_strnlen',0,b'\\x00\\x00\\x80\\x25lv_style_const_prop_id_inv',0,b'\\x00\\x0C\\x87\\x23lv_style_copy',0,b'\\x00\\x06\\x02\\x23lv_style_get_num_custom_props',0,b'\\x00\\x04\\xEA\\x23lv_style_get_prop',0,b'\\x00\\x0C\\x44\\x23lv_style_init',0,b'\\x00\\x00\\xB0\\x23lv_style_is_empty',0,b'\\x00\\x04\\xFC\\x23lv_style_prop_get_default',0,b'\\x00\\x05\\xFF\\x23lv_style_prop_lookup_flags',0,b'\\x00\\x05\\xFF\\x23lv_style_register_prop',0,b'\\x00\\x00\\xAC\\x23lv_style_remove_prop',0,b'\\x00\\x0C\\x44\\x23lv_style_reset',0,b'\\x00\\x0C\\x53\\x23lv_style_set_align',0,b'\\x00\\x0C\\x57\\x23lv_style_set_anim',0,b'\\x00\\x0C\\x9B\\x23lv_style_set_anim_duration',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_arc_color',0,b'\\x00\\x0C\\xA8\\x23lv_style_set_arc_image_src',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_arc_opa',0,b'\\x00\\x0C\\x47\\x23lv_style_set_arc_rounded',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_arc_width',0,b'\\x00\\x0C\\x5B\\x23lv_style_set_base_dir',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_bg_color',0,b'\\x00\\x0C\\x7F\\x23lv_style_set_bg_grad',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_bg_grad_color',0,b'\\x00\\x0C\\x7B\\x23lv_style_set_bg_grad_dir',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_bg_grad_opa',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_bg_grad_stop',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_bg_image_opa',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_bg_image_recolor',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_bg_image_recolor_opa',0,b'\\x00\\x0C\\xA8\\x23lv_style_set_bg_image_src',0,b'\\x00\\x0C\\x47\\x23lv_style_set_bg_image_tiled',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_bg_main_opa',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_bg_main_stop',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_bg_opa',0,b'\\x00\\x0C\\xA8\\x23lv_style_set_bitmap_mask_src',0,b'\\x00\\x0C\\x5F\\x23lv_style_set_blend_mode',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_border_color',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_border_opa',0,b'\\x00\\x0C\\x47\\x23lv_style_set_border_post',0,b'\\x00\\x0C\\x63\\x23lv_style_set_border_side',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_border_width',0,b'\\x00\\x0C\\x47\\x23lv_style_set_clip_corner',0,b'\\x00\\x0C\\x67\\x23lv_style_set_color_filter_dsc',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_color_filter_opa',0,b'\\x00\\x0C\\x6F\\x23lv_style_set_flex_cross_place',0,b'\\x00\\x0C\\x73\\x23lv_style_set_flex_flow',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_flex_grow',0,b'\\x00\\x0C\\x6F\\x23lv_style_set_flex_main_place',0,b'\\x00\\x0C\\x6F\\x23lv_style_set_flex_track_place',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_grid_cell_column_pos',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_grid_cell_column_span',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_grid_cell_row_pos',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_grid_cell_row_span',0,b'\\x00\\x0C\\x83\\x23lv_style_set_grid_cell_x_align',0,b'\\x00\\x0C\\x83\\x23lv_style_set_grid_cell_y_align',0,b'\\x00\\x0C\\x83\\x23lv_style_set_grid_column_align',0,b'\\x00\\x0C\\x4B\\x23lv_style_set_grid_column_dsc_array',0,b'\\x00\\x0C\\x83\\x23lv_style_set_grid_row_align',0,b'\\x00\\x0C\\x4B\\x23lv_style_set_grid_row_dsc_array',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_height',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_image_opa',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_image_recolor',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_image_recolor_opa',0,b'\\x00\\x0C\\x97\\x23lv_style_set_layout',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_length',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_line_color',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_line_dash_gap',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_line_dash_width',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_line_opa',0,b'\\x00\\x0C\\x47\\x23lv_style_set_line_rounded',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_line_width',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_margin_bottom',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_margin_left',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_margin_right',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_margin_top',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_max_height',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_max_width',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_min_height',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_min_width',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_opa',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_opa_layered',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_outline_color',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_outline_opa',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_outline_pad',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_outline_width',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_bottom',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_column',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_left',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_radial',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_right',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_row',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_pad_top',0,b'\\x00\\x0C\\xA3\\x23lv_style_set_prop',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_radial_offset',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_radius',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_recolor',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_recolor_opa',0,b'\\x00\\x0C\\x9B\\x23lv_style_set_rotary_sensitivity',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_shadow_color',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_shadow_offset_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_shadow_offset_y',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_shadow_opa',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_shadow_spread',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_shadow_width',0,b'\\x00\\x0C\\x8F\\x23lv_style_set_text_align',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_text_color',0,b'\\x00\\x0C\\x93\\x23lv_style_set_text_decor',0,b'\\x00\\x0C\\x77\\x23lv_style_set_text_font',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_text_letter_space',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_text_line_space',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_text_opa',0,b'\\x00\\x0C\\x6B\\x23lv_style_set_text_outline_stroke_color',0,b'\\x00\\x0C\\x9F\\x23lv_style_set_text_outline_stroke_opa',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_text_outline_stroke_width',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_height',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_pivot_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_pivot_y',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_rotation',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_scale_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_scale_y',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_skew_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_skew_y',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_transform_width',0,b'\\x00\\x0C\\x8B\\x23lv_style_set_transition',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_translate_radial',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_translate_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_translate_y',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_width',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_x',0,b'\\x00\\x0C\\x4F\\x23lv_style_set_y',0,b'\\x00\\x0C\\xAC\\x23lv_style_transition_dsc_init',0,b'\\x00\\x03\\xE2\\x23lv_subject_add_observer',0,b'\\x00\\x03\\xDC\\x23lv_subject_add_observer_obj',0,b'\\x00\\x03\\xE7\\x23lv_subject_add_observer_with_target',0,b'\\x00\\x0C\\xBE\\x23lv_subject_copy_string',0,b'\\x00\\x0C\\xB4\\x23lv_subject_deinit',0,b'\\x00\\x02\\x1D\\x23lv_subject_get_color',0,b'\\x00\\x04\\xFF\\x23lv_subject_get_group_element',0,b'\\x00\\x01\\x7B\\x23lv_subject_get_int',0,b'\\x00\\x06\\x92\\x23lv_subject_get_pointer',0,b'\\x00\\x02\\x1D\\x23lv_subject_get_previous_color',0,b'\\x00\\x01\\x7B\\x23lv_subject_get_previous_int',0,b'\\x00\\x06\\x92\\x23lv_subject_get_previous_pointer',0,b'\\x00\\x01\\x0B\\x23lv_subject_get_previous_string',0,b'\\x00\\x01\\x0B\\x23lv_subject_get_string',0,b'\\x00\\x0C\\xC6\\x23lv_subject_init_color',0,b'\\x00\\x0C\\xCA\\x23lv_subject_init_group',0,b'\\x00\\x0C\\xC2\\x23lv_subject_init_int',0,b'\\x00\\x0C\\xCF\\x23lv_subject_init_pointer',0,b'\\x00\\x0C\\xB7\\x23lv_subject_init_string',0,b'\\x00\\x0C\\xB4\\x23lv_subject_notify',0,b'\\x00\\x0C\\xC6\\x23lv_subject_set_color',0,b'\\x00\\x0C\\xC2\\x23lv_subject_set_int',0,b'\\x00\\x0C\\xCF\\x23lv_subject_set_pointer',0,b'\\x00\\x0E\\x05\\x25lv_switch_class',0,b'\\x00\\x03\\x93\\x23lv_switch_create',0,b'\\x00\\x05\\x03\\x23lv_switch_get_orientation',0,b'\\x00\\x0B\\x21\\x23lv_switch_set_orientation',0,b'\\x00\\x0E\\x05\\x25lv_table_class',0,b'\\x00\\x0B\\x93\\x23lv_table_clear_cell_ctrl',0,b'\\x00\\x03\\x93\\x23lv_table_create',0,b'\\x00\\x06\\x4F\\x23lv_table_get_cell_user_data',0,b'\\x00\\x00\\xFC\\x23lv_table_get_cell_value',0,b'\\x00\\x05\\xA8\\x23lv_table_get_column_count',0,b'\\x00\\x01\\x70\\x23lv_table_get_column_width',0,b'\\x00\\x05\\xA8\\x23lv_table_get_row_count',0,b'\\x00\\x0B\\x4C\\x23lv_table_get_selected_cell',0,b'\\x00\\x00\\x78\\x23lv_table_has_cell_ctrl',0,b'\\x00\\x0B\\x93\\x23lv_table_set_cell_ctrl',0,b'\\x00\\x0B\\x41\\x23lv_table_set_cell_user_data',0,b'\\x00\\x0B\\x8D\\x23lv_table_set_cell_value',0,b'\\x00\\x0B\\x51\\x23lv_table_set_column_count',0,b'\\x00\\x0B\\x5F\\x23lv_table_set_column_width',0,b'\\x00\\x0B\\x51\\x23lv_table_set_row_count',0,b'\\x00\\x0B\\x3C\\x23lv_table_set_selected_cell',0,b'\\x00\\x03\\x96\\x23lv_tabview_add_tab',0,b'\\x00\\x0E\\x05\\x25lv_tabview_class',0,b'\\x00\\x03\\x93\\x23lv_tabview_create',0,b'\\x00\\x03\\x93\\x23lv_tabview_get_content',0,b'\\x00\\x05\\xA8\\x23lv_tabview_get_tab_active',0,b'\\x00\\x03\\x93\\x23lv_tabview_get_tab_bar',0,b'\\x00\\x05\\xA8\\x23lv_tabview_get_tab_count',0,b'\\x00\\x0B\\x5A\\x23lv_tabview_rename_tab',0,b'\\x00\\x0B\\x55\\x23lv_tabview_set_active',0,b'\\x00\\x0A\\x27\\x23lv_tabview_set_tab_bar_position',0,b'\\x00\\x09\\x4D\\x23lv_tabview_set_tab_bar_size',0,b'\\x00\\x0C\\x10\\x23lv_text_get_size',0,b'\\x00\\x01\\x24\\x23lv_text_get_width',0,b'\\x00\\x01\\x2A\\x23lv_text_get_width_with_flags',0,b'\\x00\\x00\\xB3\\x23lv_text_is_cmd',0,b'\\x00\\x0B\\x51\\x23lv_textarea_add_char',0,b'\\x00\\x09\\x35\\x23lv_textarea_add_text',0,b'\\x00\\x0E\\x05\\x25lv_textarea_class',0,b'\\x00\\x09\\x21\\x23lv_textarea_clear_selection',0,b'\\x00\\x03\\x93\\x23lv_textarea_create',0,b'\\x00\\x09\\x21\\x23lv_textarea_cursor_down',0,b'\\x00\\x09\\x21\\x23lv_textarea_cursor_left',0,b'\\x00\\x09\\x21\\x23lv_textarea_cursor_right',0,b'\\x00\\x09\\x21\\x23lv_textarea_cursor_up',0,b'\\x00\\x09\\x21\\x23lv_textarea_delete_char',0,b'\\x00\\x09\\x21\\x23lv_textarea_delete_char_forward',0,b'\\x00\\x00\\xF5\\x23lv_textarea_get_accepted_chars',0,b'\\x00\\x05\\xA8\\x23lv_textarea_get_current_char',0,b'\\x00\\x00\\x4F\\x23lv_textarea_get_cursor_click_pos',0,b'\\x00\\x05\\xB8\\x23lv_textarea_get_cursor_pos',0,b'\\x00\\x03\\xB2\\x23lv_textarea_get_label',0,b'\\x00\\x05\\xA8\\x23lv_textarea_get_max_length',0,b'\\x00\\x00\\x83\\x23lv_textarea_get_one_line',0,b'\\x00\\x00\\xF5\\x23lv_textarea_get_password_bullet',0,b'\\x00\\x00\\x83\\x23lv_textarea_get_password_mode',0,b'\\x00\\x05\\xA8\\x23lv_textarea_get_password_show_time',0,b'\\x00\\x00\\xF5\\x23lv_textarea_get_placeholder_text',0,b'\\x00\\x01\\x01\\x23lv_textarea_get_text',0,b'\\x00\\x00\\x4F\\x23lv_textarea_get_text_selection',0,b'\\x00\\x09\\x35\\x23lv_textarea_set_accepted_chars',0,b'\\x00\\x0B\\x25\\x23lv_textarea_set_align',0,b'\\x00\\x09\\x24\\x23lv_textarea_set_cursor_click_pos',0,b'\\x00\\x09\\x4D\\x23lv_textarea_set_cursor_pos',0,b'\\x00\\x09\\x35\\x23lv_textarea_set_insert_replace',0,b'\\x00\\x0B\\x51\\x23lv_textarea_set_max_length',0,b'\\x00\\x09\\x24\\x23lv_textarea_set_one_line',0,b'\\x00\\x09\\x35\\x23lv_textarea_set_password_bullet',0,b'\\x00\\x09\\x24\\x23lv_textarea_set_password_mode',0,b'\\x00\\x0B\\x51\\x23lv_textarea_set_password_show_time',0,b'\\x00\\x09\\x35\\x23lv_textarea_set_placeholder_text',0,b'\\x00\\x09\\x35\\x23lv_textarea_set_text',0,b'\\x00\\x09\\x24\\x23lv_textarea_set_text_selection',0,b'\\x00\\x00\\x83\\x23lv_textarea_text_is_selected',0,b'\\x00\\x09\\x21\\x23lv_theme_apply',0,b'\\x00\\x0D\\x47\\x23lv_theme_default_deinit',0,b'\\x00\\x05\\x20\\x23lv_theme_default_get',0,b'\\x00\\x05\\x16\\x23lv_theme_default_init',0,b'\\x00\\x00\\xD0\\x23lv_theme_default_is_inited',0,b'\\x00\\x02\\x0F\\x23lv_theme_get_color_primary',0,b'\\x00\\x02\\x0F\\x23lv_theme_get_color_secondary',0,b'\\x00\\x02\\xD5\\x23lv_theme_get_font_large',0,b'\\x00\\x02\\xD5\\x23lv_theme_get_font_normal',0,b'\\x00\\x02\\xD5\\x23lv_theme_get_font_small',0,b'\\x00\\x05\\x1D\\x23lv_theme_get_from_obj',0,b'\\x00\\x0D\\x47\\x23lv_theme_mono_deinit',0,b'\\x00\\x05\\x11\\x23lv_theme_mono_init',0,b'\\x00\\x00\\xD0\\x23lv_theme_mono_is_inited',0,b'\\x00\\x0C\\xDB\\x23lv_theme_set_apply_cb',0,b'\\x00\\x0C\\xD7\\x23lv_theme_set_parent',0,b'\\x00\\x0D\\x47\\x23lv_theme_simple_deinit',0,b'\\x00\\x05\\x20\\x23lv_theme_simple_get',0,b'\\x00\\x05\\x0E\\x23lv_theme_simple_init',0,b'\\x00\\x00\\xD0\\x23lv_theme_simple_is_inited',0,b'\\x00\\x04\\x9F\\x23lv_thread_delete',0,b'\\x00\\x04\\xA2\\x23lv_thread_init',0,b'\\x00\\x04\\x99\\x23lv_thread_sync_delete',0,b'\\x00\\x04\\x99\\x23lv_thread_sync_init',0,b'\\x00\\x04\\x99\\x23lv_thread_sync_signal',0,b'\\x00\\x04\\x99\\x23lv_thread_sync_signal_isr',0,b'\\x00\\x04\\x99\\x23lv_thread_sync_wait',0,b'\\x00\\x05\\xC8\\x23lv_tick_elaps',0,b'\\x00\\x05\\xE1\\x23lv_tick_get',0,b'\\x00\\x0D\\x04\\x23lv_tick_inc',0,b'\\x00\\x0D\\x01\\x23lv_tick_set_cb',0,b'\\x00\\x03\\x9E\\x23lv_tileview_add_tile',0,b'\\x00\\x0E\\x05\\x25lv_tileview_class',0,b'\\x00\\x03\\x93\\x23lv_tileview_create',0,b'\\x00\\x03\\x93\\x23lv_tileview_get_tile_active',0,b'\\x00\\x0A\\xA3\\x23lv_tileview_set_tile',0,b'\\x00\\x0B\\x87\\x23lv_tileview_set_tile_by_index',0,b'\\x00\\x0E\\x05\\x25lv_tileview_tile_class',0,b'\\x00\\x05\\x2B\\x23lv_timer_create',0,b'\\x00\\x05\\x30\\x23lv_timer_create_basic',0,b'\\x00\\x0C\\xDF\\x23lv_timer_delete',0,b'\\x00\\x06\\x95\\x23lv_timer_enable',0,b'\\x00\\x05\\xE1\\x23lv_timer_get_idle',0,b'\\x00\\x05\\x28\\x23lv_timer_get_next',0,b'\\x00\\x00\\xB7\\x23lv_timer_get_paused',0,b'\\x00\\x05\\xE1\\x23lv_timer_get_time_until_next',0,b'\\x00\\x06\\x62\\x23lv_timer_get_user_data',0,b'\\x00\\x05\\xE1\\x23lv_timer_handler',0,b'\\x00\\x05\\xC8\\x23lv_timer_handler_run_in_period',0,b'\\x00\\x0D\\x43\\x23lv_timer_handler_set_resume_cb',0,b'\\x00\\x0C\\xDF\\x23lv_timer_pause',0,b'\\x00\\x0D\\x47\\x23lv_timer_periodic_handler',0,b'\\x00\\x0C\\xDF\\x23lv_timer_ready',0,b'\\x00\\x0C\\xDF\\x23lv_timer_reset',0,b'\\x00\\x0C\\xDF\\x23lv_timer_resume',0,b'\\x00\\x0C\\xE2\\x23lv_timer_set_auto_delete',0,b'\\x00\\x0C\\xF2\\x23lv_timer_set_cb',0,b'\\x00\\x0C\\xEA\\x23lv_timer_set_period',0,b'\\x00\\x0C\\xE6\\x23lv_timer_set_repeat_count',0,b'\\x00\\x0C\\xEE\\x23lv_timer_set_user_data',0,b'\\x00\\x02\\xC9\\x23lv_tiny_ttf_create_data',0,b'\\x00\\x02\\xCE\\x23lv_tiny_ttf_create_data_ex',0,b'\\x00\\x02\\xBF\\x23lv_tiny_ttf_create_file',0,b'\\x00\\x02\\xC3\\x23lv_tiny_ttf_create_file_ex',0,b'\\x00\\x07\\xF3\\x23lv_tiny_ttf_destroy',0,b'\\x00\\x07\\xF6\\x23lv_tiny_ttf_set_size',0,b'\\x00\\x0E\\x34\\x25lv_tree_node_class',0,b'\\x00\\x05\\x32\\x23lv_tree_node_create',0,b'\\x00\\x0C\\xFA\\x23lv_tree_node_delete',0,b'\\x00\\x00\\xBA\\x23lv_tree_walk',0,b'\\x00\\x01\\x31\\x23lv_trigo_cos',0,b'\\x00\\x01\\x31\\x23lv_trigo_sin',0,b'\\x00\\x0D\\x47\\x23lv_unlock',0,b'\\x00\\x06\\x7D\\x23lv_utils_bsearch',0,b'\\x00\\x03\\xAD\\x23lv_win_add_button',0,b'\\x00\\x03\\x96\\x23lv_win_add_title',0,b'\\x00\\x0E\\x05\\x25lv_win_class',0,b'\\x00\\x03\\x93\\x23lv_win_create',0,b'\\x00\\x03\\x93\\x23lv_win_get_content',0,b'\\x00\\x03\\x93\\x23lv_win_get_header',0,b'\\x00\\x03\\x4E\\x23lv_windows_acquire_encoder_indev',0,b'\\x00\\x03\\x4E\\x23lv_windows_acquire_keypad_indev',0,b'\\x00\\x03\\x4E\\x23lv_windows_acquire_pointer_indev',0,b'\\x00\\x02\\x47\\x23lv_windows_create_display',0,b'\\x00\\x01\\x37\\x23lv_windows_dpi_to_logical',0,b'\\x00\\x01\\x37\\x23lv_windows_dpi_to_physical',0,b'\\x00\\x06\\x0E\\x23lv_windows_get_display_window_handle',0,b'\\x00\\x06\\x2D\\x23lv_windows_get_indev_window_handle',0,b'\\x00\\x01\\x37\\x23lv_windows_zoom_to_logical',0,b'\\x00\\x01\\x37\\x23lv_windows_zoom_to_physical',0,b'\\x00\\x06\\x65\\x23lv_zalloc',0),     _struct_unions = ((b'\\x00\\x00\\x0E\\x43\\x00\\x00\\x00\\x02$10',b'\\x00\\x0E\\x10\\x11center',b'\\x00\\x01\\x32\\x11start_angle',b'\\x00\\x01\\x32\\x11end_angle'),(b'\\x00\\x00\\x0E\\x44\\x00\\x00\\x00\\x02$2',b'\\x00\\x0E\\x42\\x11y',b'\\x00\\x0E\\x42\\x11u',b'\\x00\\x0E\\x42\\x11v'),(b'\\x00\\x00\\x0E\\x45\\x00\\x00\\x00\\x02$3',b'\\x00\\x0E\\x42\\x11y',b'\\x00\\x0E\\x42\\x11uv'),(b'\\x00\\x00\\x0E\\x4B\\x00\\x00\\x00\\x03$6',b'\\x00\\x00\\x0F\\x11index',b'\\x00\\x00\\xAA\\x11src'),(b'\\x00\\x00\\x0E\\x4C\\x00\\x00\\x00\\x03$7',b'\\x00\\x0E\\x46\\x11linear',b'\\x00\\x0E\\x47\\x11radial',b'\\x00\\x0E\\x43\\x11conical'),(b'\\x00\\x00\\x0E\\x46\\x00\\x00\\x00\\x02$8',b'\\x00\\x0E\\x10\\x11start',b'\\x00\\x0E\\x10\\x11end'),(b'\\x00\\x00\\x0E\\x47\\x00\\x00\\x00\\x02$9',b'\\x00\\x0E\\x10\\x11focal',b'\\x00\\x0E\\x10\\x11focal_extent',b'\\x00\\x0E\\x10\\x11end',b'\\x00\\x0E\\x10\\x11end_extent'),(b'\\x00\\x00\\x0D\\x6A\\x00\\x00\\x00\\x02$lv_anim_bezier3_para_t',b'\\x00\\x01\\x32\\x11x1',b'\\x00\\x01\\x32\\x11y1',b'\\x00\\x01\\x32\\x11x2',b'\\x00\\x01\\x32\\x11y2'),(b'\\x00\\x00\\x0D\\x70\\x00\\x00\\x00\\x02$lv_area_t',b'\\x00\\x00\\xC9\\x11x1',b'\\x00\\x00\\xC9\\x11y1',b'\\x00\\x00\\xC9\\x11x2',b'\\x00\\x00\\xC9\\x11y2'),(b'\\x00\\x00\\x0D\\x7B\\x00\\x00\\x00\\x02$lv_calendar_date_t',b'\\x00\\x00\\x98\\x11year',b'\\x00\\x01\\x86\\x11month',b'\\x00\\x01\\x86\\x11day'),(b'\\x00\\x00\\x05\\xE4\\x00\\x00\\x00\\x02$lv_color16_t',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x05blue',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x06green',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x05red'),(b'\\x00\\x00\\x0D\\x83\\x00\\x00\\x00\\x02$lv_color16a_t',b'\\x00\\x00\\x80\\x11lumi',b'\\x00\\x00\\x80\\x11alpha'),(b'\\x00\\x00\\x00\\x15\\x00\\x00\\x00\\x02$lv_color32_t',b'\\x00\\x00\\x80\\x11blue',b'\\x00\\x00\\x80\\x11green',b'\\x00\\x00\\x80\\x11red',b'\\x00\\x00\\x80\\x11alpha'),(b'\\x00\\x00\\x0D\\x85\\x00\\x00\\x00\\x02$lv_color_hsv_t',b'\\x00\\x00\\x98\\x11h',b'\\x00\\x00\\x80\\x11s',b'\\x00\\x00\\x80\\x11v'),(b'\\x00\\x00\\x00\\x1C\\x00\\x00\\x00\\x02$lv_color_t',b'\\x00\\x00\\x80\\x11blue',b'\\x00\\x00\\x80\\x11green',b'\\x00\\x00\\x80\\x11red'),(b'\\x00\\x00\\x0D\\x88\\x00\\x00\\x00\\x02$lv_draw_arc_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11width',b'\\x00\\x00\\xC9\\x11start_angle',b'\\x00\\x00\\xC9\\x11end_angle',b'\\x00\\x0E\\x10\\x11center',b'\\x00\\x00\\x98\\x11radius',b'\\x00\\x00\\xAA\\x11img_src',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01rounded'),(b'\\x00\\x00\\x0D\\x89\\x00\\x00\\x00\\x02$lv_draw_border_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\xC9\\x11radius',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11width',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x09\\xA8\\x13\\x00\\x00\\x00\\x05side'),(b'\\x00\\x00\\x0D\\x8A\\x00\\x00\\x00\\x02$lv_draw_box_shadow_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\xC9\\x11radius',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11width',b'\\x00\\x00\\xC9\\x11spread',b'\\x00\\x00\\xC9\\x11ofs_x',b'\\x00\\x00\\xC9\\x11ofs_y',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01bg_cover'),(b'\\x00\\x00\\x0D\\x8D\\x00\\x00\\x00\\x02$lv_draw_dsc_base_t',b'\\x00\\x00\\x50\\x11obj',b'\\x00\\x00\\x0F\\x11part',b'\\x00\\x00\\x0F\\x11id1',b'\\x00\\x00\\x0F\\x11id2',b'\\x00\\x00\\x24\\x11layer',b'\\x00\\x00\\xA2\\x11dsc_size',b'\\x00\\x00\\xC0\\x11user_data'),(b'\\x00\\x00\\x0D\\x8E\\x00\\x00\\x00\\x02$lv_draw_fill_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\xC9\\x11radius',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x0D\\xD5\\x11grad'),(b'\\x00\\x00\\x0D\\x92\\x00\\x00\\x00\\x02$lv_draw_label_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\x54\\x11text',b'\\x00\\x00\\x37\\x11font',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11line_space',b'\\x00\\x00\\xC9\\x11letter_space',b'\\x00\\x00\\xC9\\x11ofs_x',b'\\x00\\x00\\xC9\\x11ofs_y',b'\\x00\\x00\\xC9\\x11rotation',b'\\x00\\x00\\x0F\\x11sel_start',b'\\x00\\x00\\x0F\\x11sel_end',b'\\x00\\x00\\x1C\\x11sel_color',b'\\x00\\x00\\x1C\\x11sel_bg_color',b'\\x00\\x00\\x0F\\x11text_length',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x0B\\x27\\x11align',b'\\x00\\x09\\x9A\\x11bidi_dir',b'\\x00\\x0B\\x30\\x13\\x00\\x00\\x00\\x03decor',b'\\x00\\x01\\x2F\\x13\\x00\\x00\\x00\\x05flag',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01text_local',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01text_static',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01has_bided',b'\\x00\\x0D\\x93\\x11hint',b'\\x00\\x00\\x80\\x11outline_stroke_opa',b'\\x00\\x00\\x1C\\x11outline_stroke_color',b'\\x00\\x00\\xC9\\x11outline_stroke_width'),(b'\\x00\\x00\\x0D\\x95\\x00\\x00\\x00\\x02$lv_draw_letter_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\x0F\\x11unicode',b'\\x00\\x00\\x37\\x11font',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11rotation',b'\\x00\\x00\\xC9\\x11scale_x',b'\\x00\\x00\\xC9\\x11scale_y',b'\\x00\\x00\\xC9\\x11skew_x',b'\\x00\\x00\\xC9\\x11skew_y',b'\\x00\\x0E\\x10\\x11pivot',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x0B\\x30\\x13\\x00\\x00\\x00\\x03decor',b'\\x00\\x09\\x9F\\x13\\x00\\x00\\x00\\x03blend_mode',b'\\x00\\x00\\x80\\x11outline_stroke_opa',b'\\x00\\x00\\xC9\\x11outline_stroke_width',b'\\x00\\x00\\x1C\\x11outline_stroke_color'),(b'\\x00\\x00\\x0D\\x96\\x00\\x00\\x00\\x02$lv_draw_line_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x0E\\x0D\\x11p1',b'\\x00\\x0E\\x0D\\x11p2',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\xC9\\x11width',b'\\x00\\x00\\xC9\\x11dash_width',b'\\x00\\x00\\xC9\\x11dash_gap',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01round_start',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01round_end',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01raw_end'),(b'\\x00\\x00\\x0D\\x99\\x00\\x00\\x00\\x02$lv_draw_rect_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\xC9\\x11radius',b'\\x00\\x00\\x80\\x11bg_opa',b'\\x00\\x00\\x1C\\x11bg_color',b'\\x00\\x0D\\xD5\\x11bg_grad',b'\\x00\\x00\\xAA\\x11bg_image_src',b'\\x00\\x00\\xAA\\x11bg_image_symbol_font',b'\\x00\\x00\\x1C\\x11bg_image_recolor',b'\\x00\\x00\\x80\\x11bg_image_opa',b'\\x00\\x00\\x80\\x11bg_image_recolor_opa',b'\\x00\\x00\\x80\\x11bg_image_tiled',b'\\x00\\x00\\x1C\\x11border_color',b'\\x00\\x00\\xC9\\x11border_width',b'\\x00\\x00\\x80\\x11border_opa',b'\\x00\\x09\\xA8\\x13\\x00\\x00\\x00\\x05border_side',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01border_post',b'\\x00\\x00\\x1C\\x11outline_color',b'\\x00\\x00\\xC9\\x11outline_width',b'\\x00\\x00\\xC9\\x11outline_pad',b'\\x00\\x00\\x80\\x11outline_opa',b'\\x00\\x00\\x1C\\x11shadow_color',b'\\x00\\x00\\xC9\\x11shadow_width',b'\\x00\\x00\\xC9\\x11shadow_offset_x',b'\\x00\\x00\\xC9\\x11shadow_offset_y',b'\\x00\\x00\\xC9\\x11shadow_spread',b'\\x00\\x00\\x80\\x11shadow_opa'),(b'\\x00\\x00\\x0D\\xA7\\x00\\x00\\x00\\x02$lv_draw_triangle_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x0E\\x0E\\x11p',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x0D\\xD5\\x11grad'),(b'\\x00\\x00\\x0D\\xAE\\x00\\x00\\x00\\x02$lv_event_list_t',b'\\x00\\x0D\\x71\\x11array',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01is_traversing',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01has_marked_deleting'),(b'\\x00\\x00\\x0D\\xB4\\x00\\x00\\x00\\x02$lv_font_fmt_txt_cmap_t',b'\\x00\\x00\\x0F\\x11range_start',b'\\x00\\x00\\x98\\x11range_length',b'\\x00\\x00\\x98\\x11glyph_id_start',b'\\x00\\x0E\\x49\\x11unicode_list',b'\\x00\\x00\\xAA\\x11glyph_id_ofs_list',b'\\x00\\x00\\x98\\x11list_length',b'\\x00\\x0D\\xB5\\x11type'),(b'\\x00\\x00\\x0D\\xB6\\x00\\x00\\x00\\x02$lv_font_fmt_txt_dsc_t',b'\\x00\\x05\\xFD\\x11glyph_bitmap',b'\\x00\\x0D\\xB7\\x11glyph_dsc',b'\\x00\\x0D\\xB3\\x11cmaps',b'\\x00\\x00\\xAA\\x11kern_dsc',b'\\x00\\x00\\x98\\x11kern_scale',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x09cmap_num',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x04bpp',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x01kern_classes',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x02bitmap_format'),(b'\\x00\\x00\\x0D\\xB8\\x00\\x00\\x00\\x02$lv_font_fmt_txt_glyph_dsc_t',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x14bitmap_index',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x0Cadv_w',b'\\x00\\x00\\x80\\x11box_w',b'\\x00\\x00\\x80\\x11box_h',b'\\x00\\x01\\x86\\x11ofs_x',b'\\x00\\x01\\x86\\x11ofs_y'),(b'\\x00\\x00\\x0D\\xB9\\x00\\x00\\x00\\x02$lv_font_fmt_txt_kern_classes_t',b'\\x00\\x0D\\x68\\x11class_pair_values',b'\\x00\\x05\\xFD\\x11left_class_mapping',b'\\x00\\x05\\xFD\\x11right_class_mapping',b'\\x00\\x00\\x80\\x11left_class_cnt',b'\\x00\\x00\\x80\\x11right_class_cnt'),(b'\\x00\\x00\\x0D\\xBA\\x00\\x00\\x00\\x02$lv_font_fmt_txt_kern_pair_t',b'\\x00\\x00\\xAA\\x11glyph_ids',b'\\x00\\x0D\\x68\\x11values',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x1Epair_cnt',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x02glyph_ids_size'),(b'\\x00\\x00\\x0D\\xBB\\x00\\x00\\x00\\x02$lv_font_glyph_dsc_t',b'\\x00\\x00\\x37\\x11resolved_font',b'\\x00\\x00\\x98\\x11adv_w',b'\\x00\\x00\\x98\\x11box_w',b'\\x00\\x00\\x98\\x11box_h',b'\\x00\\x01\\x32\\x11ofs_x',b'\\x00\\x01\\x32\\x11ofs_y',b'\\x00\\x0D\\xBC\\x11format',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01is_placeholder',b'\\x00\\x00\\xC9\\x11outline_stroke_width',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01req_raw_bitmap',b'\\x00\\x0E\\x4B\\x11gid',b'\\x00\\x0D\\x77\\x11entry'),(b'\\x00\\x00\\x0D\\xC5\\x00\\x00\\x00\\x02$lv_fs_dir_t',b'\\x00\\x00\\xC0\\x11dir_d',b'\\x00\\x00\\x3D\\x11drv'),(b'\\x00\\x00\\x0D\\xC9\\x00\\x00\\x00\\x02$lv_fs_file_t',b'\\x00\\x00\\xC0\\x11file_d',b'\\x00\\x00\\x3D\\x11drv',b'\\x00\\x0D\\xC7\\x11cache'),(b'\\x00\\x00\\x0D\\xD5\\x00\\x00\\x00\\x02$lv_grad_dsc_t',b'\\x00\\x0D\\xD7\\x11stops',b'\\x00\\x00\\x80\\x11stops_count',b'\\x00\\x0A\\x4A\\x13\\x00\\x00\\x00\\x04dir',b'\\x00\\x08\\x1A\\x13\\x00\\x00\\x00\\x03extend',b'\\x00\\x0E\\x4C\\x11params',b'\\x00\\x00\\xC0\\x11state'),(b'\\x00\\x00\\x0D\\xD6\\x00\\x00\\x00\\x02$lv_grad_stop_t',b'\\x00\\x00\\x1C\\x11color',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x80\\x11frac'),(b'\\x00\\x00\\x0D\\xE1\\x00\\x00\\x00\\x02$lv_image_dsc_t',b'\\x00\\x0D\\xE3\\x11header',b'\\x00\\x00\\x0F\\x11data_size',b'\\x00\\x05\\xFD\\x11data',b'\\x00\\x00\\xAA\\x11reserved',b'\\x00\\x00\\xAA\\x11reserved_2'),(b'\\x00\\x00\\x0D\\xE3\\x00\\x00\\x00\\x02$lv_image_header_t',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x08magic',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x08cf',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x10flags',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x10w',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x10h',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x10stride',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x10reserved_2'),(b'\\x00\\x00\\x0D\\xE9\\x00\\x00\\x00\\x02$lv_indev_data_t',b'\\x00\\x0E\\x10\\x11point',b'\\x00\\x00\\x0F\\x11key',b'\\x00\\x00\\x0F\\x11btn_id',b'\\x00\\x01\\x32\\x11enc_diff',b'\\x00\\x0D\\xED\\x11state',b'\\x00\\x00\\x55\\x11continue_reading',b'\\x00\\x0D\\xEB\\x11gesture_type',b'\\x00\\x0E\\x50\\x11gesture_data'),(b'\\x00\\x00\\x0D\\xFA\\x00\\x00\\x00\\x02$lv_ll_t',b'\\x00\\x00\\x0F\\x11n_size',b'\\x00\\x07\\x3B\\x11head',b'\\x00\\x07\\x3B\\x11tail'),(b'\\x00\\x00\\x0D\\xFC\\x00\\x00\\x00\\x02$lv_mem_monitor_t',b'\\x00\\x00\\xA2\\x11total_size',b'\\x00\\x00\\xA2\\x11free_cnt',b'\\x00\\x00\\xA2\\x11free_size',b'\\x00\\x00\\xA2\\x11free_biggest_size',b'\\x00\\x00\\xA2\\x11used_cnt',b'\\x00\\x00\\xA2\\x11max_used',b'\\x00\\x00\\x80\\x11used_pct',b'\\x00\\x00\\x80\\x11frag_pct'),(b'\\x00\\x00\\x0E\\x0D\\x00\\x00\\x00\\x02$lv_point_precise_t',b'\\x00\\x00\\xC9\\x11x',b'\\x00\\x00\\xC9\\x11y'),(b'\\x00\\x00\\x0E\\x10\\x00\\x00\\x00\\x02$lv_point_t',b'\\x00\\x00\\xC9\\x11x',b'\\x00\\x00\\xC9\\x11y'),(b'\\x00\\x00\\x0E\\x20\\x00\\x00\\x00\\x02$lv_sqrt_res_t',b'\\x00\\x00\\x98\\x11i',b'\\x00\\x00\\x98\\x11f'),(b'\\x00\\x00\\x0E\\x21\\x00\\x00\\x00\\x02$lv_style_const_prop_t',b'\\x00\\x00\\x80\\x11prop',b'\\x00\\x04\\xF5\\x11value'),(b'\\x00\\x00\\x0E\\x24\\x00\\x00\\x00\\x02$lv_style_t',b'\\x00\\x00\\xC0\\x11values_and_props',b'\\x00\\x00\\x0F\\x11has_group',b'\\x00\\x00\\x80\\x11prop_cnt'),(b'\\x00\\x00\\x0E\\x25\\x00\\x00\\x00\\x02$lv_style_transition_dsc_t',b'\\x00\\x05\\xFD\\x11props',b'\\x00\\x00\\xC0\\x11user_data',b'\\x00\\x06\\xB6\\x11path_xcb',b'\\x00\\x00\\x0F\\x11time',b'\\x00\\x00\\x0F\\x11delay'),(b'\\x00\\x00\\x04\\xF5\\x00\\x00\\x00\\x03$lv_style_value_t',b'\\x00\\x00\\xC9\\x11num',b'\\x00\\x00\\xAA\\x11ptr',b'\\x00\\x00\\x1C\\x11color'),(b'\\x00\\x00\\x0E\\x26\\x00\\x00\\x00\\x02$lv_subject_t',b'\\x00\\x0D\\xFA\\x11subs_ll',b'\\x00\\x0E\\x28\\x11value',b'\\x00\\x0E\\x28\\x11prev_value',b'\\x00\\x00\\xC0\\x11user_data',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x04type',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x18size',b'\\x00\\x00\\x0F\\x13\\x00\\x00\\x00\\x01notify_restart_query'),(b'\\x00\\x00\\x0E\\x28\\x00\\x00\\x00\\x03$lv_subject_value_t',b'\\x00\\x00\\xC9\\x11num',b'\\x00\\x00\\xAA\\x11pointer',b'\\x00\\x00\\x1C\\x11color'),(b'\\x00\\x00\\x0E\\x30\\x00\\x00\\x00\\x02$lv_thread_sync_t',b'\\x00\\x00\\xC0\\x11cs',b'\\x00\\x00\\xC0\\x11cv',b'\\x00\\x00\\x55\\x11v'),(b'\\x00\\x00\\x0E\\x41\\x00\\x00\\x00\\x03$lv_yuv_buf_t',b'\\x00\\x0E\\x42\\x11yuv',b'\\x00\\x0E\\x44\\x11planar',b'\\x00\\x0E\\x45\\x11semi_planar'),(b'\\x00\\x00\\x0E\\x42\\x00\\x00\\x00\\x02$lv_yuv_plane_t',b'\\x00\\x00\\xC0\\x11buf',b'\\x00\\x00\\x0F\\x11stride'),(b'\\x00\\x00\\x0D\\x55\\x00\\x00\\x00\\x10MirBlob',),(b'\\x00\\x00\\x0D\\x56\\x00\\x00\\x00\\x10MirBufferStream',),(b'\\x00\\x00\\x0D\\x57\\x00\\x00\\x00\\x10MirConnection',),(b'\\x00\\x00\\x0D\\x58\\x00\\x00\\x00\\x10MirDisplayConfig',),(b'\\x00\\x00\\x0D\\x59\\x00\\x00\\x00\\x10MirPersistentId',),(b'\\x00\\x00\\x0D\\x5A\\x00\\x00\\x00\\x10MirPromptSession',),(b'\\x00\\x00\\x0D\\x5B\\x00\\x00\\x00\\x10MirScreencast',),(b'\\x00\\x00\\x0D\\x5C\\x00\\x00\\x00\\x10MirSurface',),(b'\\x00\\x00\\x0D\\x5D\\x00\\x00\\x00\\x10MirSurfaceSpec',),(b'\\x00\\x00\\x0E\\x4D\\x00\\x00\\x00\\x03_lv_anim_path_para_t',b'\\x00\\x0D\\x6A\\x11bezier3'),(b'\\x00\\x00\\x0D\\x6B\\x00\\x00\\x00\\x02_lv_anim_t',b'\\x00\\x00\\xC0\\x11var',b'\\x00\\x00\\xCE\\x11exec_cb',b'\\x00\\x00\\x08\\x11custom_exec_cb',b'\\x00\\x06\\xCB\\x11start_cb',b'\\x00\\x06\\xCB\\x11completed_cb',b'\\x00\\x06\\xCB\\x11deleted_cb',b'\\x00\\x06\\xB2\\x11get_value_cb',b'\\x00\\x00\\xC0\\x11user_data',b'\\x00\\x06\\xB6\\x11path_cb',b'\\x00\\x00\\xC9\\x11start_value',b'\\x00\\x00\\xC9\\x11current_value',b'\\x00\\x00\\xC9\\x11end_value',b'\\x00\\x00\\xC9\\x11duration',b'\\x00\\x00\\xC9\\x11act_time',b'\\x00\\x00\\x0F\\x11reverse_delay',b'\\x00\\x00\\x0F\\x11reverse_duration',b'\\x00\\x00\\x0F\\x11repeat_delay',b'\\x00\\x00\\x0F\\x11repeat_cnt',b'\\x00\\x0E\\x4D\\x11parameter',b'\\x00\\x00\\x0F\\x11last_timer_run',b'\\x00\\x00\\x0F\\x11pause_time',b'\\x00\\x00\\x0F\\x11pause_duration',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01is_paused',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01reverse_play_in_progress',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01run_round',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01start_cb_called',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01early_apply'),(b'\\x00\\x00\\x0D\\x6C\\x00\\x00\\x00\\x10_lv_anim_timeline_t',),(b'\\x00\\x00\\x0D\\x6E\\x00\\x00\\x00\\x10_lv_animimg_t',),(b'\\x00\\x00\\x0D\\x6F\\x00\\x00\\x00\\x10_lv_arc_t',),(b'\\x00\\x00\\x0D\\x71\\x00\\x00\\x00\\x02_lv_array_t',b'\\x00\\x07\\x3B\\x11data',b'\\x00\\x00\\x0F\\x11size',b'\\x00\\x00\\x0F\\x11capacity',b'\\x00\\x00\\x0F\\x11element_size',b'\\x00\\x00\\x55\\x11inner_alloc'),(b'\\x00\\x00\\x0D\\x72\\x00\\x00\\x00\\x10_lv_bar_anim_t',),(b'\\x00\\x00\\x0D\\x73\\x00\\x00\\x00\\x10_lv_bar_t',),(b'\\x00\\x00\\x0D\\x74\\x00\\x00\\x00\\x10_lv_barcode_t',),(b'\\x00\\x00\\x0D\\x75\\x00\\x00\\x00\\x10_lv_button_t',),(b'\\x00\\x00\\x0D\\x76\\x00\\x00\\x00\\x10_lv_buttonmatrix_t',),(b'\\x00\\x00\\x0D\\x78\\x00\\x00\\x00\\x10_lv_cache_entry_t',),(b'\\x00\\x00\\x0D\\x79\\x00\\x00\\x00\\x10_lv_cache_t',),(b'\\x00\\x00\\x0D\\x7C\\x00\\x00\\x00\\x10_lv_calendar_t',),(b'\\x00\\x00\\x0D\\x7D\\x00\\x00\\x00\\x10_lv_canvas_t',),(b'\\x00\\x00\\x0D\\x7E\\x00\\x00\\x00\\x10_lv_chart_cursor_t',),(b'\\x00\\x00\\x0D\\x7F\\x00\\x00\\x00\\x10_lv_chart_series_t',),(b'\\x00\\x00\\x0D\\x80\\x00\\x00\\x00\\x10_lv_chart_t',),(b'\\x00\\x00\\x0D\\x81\\x00\\x00\\x00\\x10_lv_checkbox_t',),(b'\\x00\\x00\\x0D\\x82\\x00\\x00\\x00\\x10_lv_circle_buf_t',),(b'\\x00\\x00\\x0D\\x84\\x00\\x00\\x00\\x02_lv_color_filter_dsc_t',b'\\x00\\x07\\x1E\\x11filter_cb',b'\\x00\\x00\\xC0\\x11user_data'),(b'\\x00\\x00\\x0D\\x86\\x00\\x00\\x00\\x10_lv_cover_check_info_t',),(b'\\x00\\x00\\x0D\\x87\\x00\\x00\\x00\\x10_lv_display_t',),(b'\\x00\\x00\\x0D\\x8B\\x00\\x00\\x00\\x10_lv_draw_buf_handlers_t',),(b'\\x00\\x00\\x0D\\x8C\\x00\\x00\\x00\\x02_lv_draw_buf_t',b'\\x00\\x0D\\xE3\\x11header',b'\\x00\\x00\\x0F\\x11data_size',b'\\x00\\x07\\x3B\\x11data',b'\\x00\\x00\\xC0\\x11unaligned_data',b'\\x00\\x02\\x5E\\x11handlers'),(b'\\x00\\x00\\x0D\\x8F\\x00\\x00\\x00\\x10_lv_draw_glyph_dsc_t',),(b'\\x00\\x00\\x0D\\x90\\x00\\x00\\x00\\x02_lv_draw_image_dsc_t',b'\\x00\\x0D\\x8D\\x11base',b'\\x00\\x00\\xAA\\x11src',b'\\x00\\x0D\\xE3\\x11header',b'\\x00\\x00\\xC9\\x11clip_radius',b'\\x00\\x00\\xC9\\x11rotation',b'\\x00\\x00\\xC9\\x11scale_x',b'\\x00\\x00\\xC9\\x11scale_y',b'\\x00\\x00\\xC9\\x11skew_x',b'\\x00\\x00\\xC9\\x11skew_y',b'\\x00\\x0E\\x10\\x11pivot',b'\\x00\\x00\\x1C\\x11recolor',b'\\x00\\x00\\x80\\x11recolor_opa',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x09\\x9F\\x13\\x00\\x00\\x00\\x04blend_mode',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x01antialias',b'\\x00\\x00\\x98\\x13\\x00\\x00\\x00\\x01tile',b'\\x00\\x07\\xD1\\x11sup',b'\\x00\\x0D\\x70\\x11image_area',b'\\x00\\x04\\x46\\x11bitmap_mask_src'),(b'\\x00\\x00\\x0D\\x91\\x00\\x00\\x00\\x10_lv_draw_image_sup_t',),(b'\\x00\\x00\\x0D\\x94\\x00\\x00\\x00\\x10_lv_draw_label_hint_t',),(b'\\x00\\x00\\x0D\\x97\\x00\\x00\\x00\\x10_lv_draw_mask_rect_dsc_t',),(b'\\x00\\x00\\x0D\\x98\\x00\\x00\\x00\\x10_lv_draw_mask_t',),(b'\\x00\\x00\\x0D\\x9A\\x00\\x00\\x00\\x10_lv_draw_sw_blend_dsc_t',),(b'\\x00\\x00\\x0D\\x9B\\x00\\x00\\x00\\x10_lv_draw_sw_blend_fill_dsc_t',),(b'\\x00\\x00\\x0D\\x9C\\x00\\x00\\x00\\x10_lv_draw_sw_blend_image_dsc_t',),(b'\\x00\\x00\\x0D\\x9D\\x00\\x00\\x00\\x10_lv_draw_sw_mask_angle_param_t',),(b'\\x00\\x00\\x0D\\x9E\\x00\\x00\\x00\\x10_lv_draw_sw_mask_common_dsc_t',),(b'\\x00\\x00\\x0D\\x9F\\x00\\x00\\x00\\x10_lv_draw_sw_mask_fade_param_t',),(b'\\x00\\x00\\x0D\\xA0\\x00\\x00\\x00\\x10_lv_draw_sw_mask_line_param_t',),(b'\\x00\\x00\\x0D\\xA1\\x00\\x00\\x00\\x10_lv_draw_sw_mask_map_param_t',),(b'\\x00\\x00\\x0D\\xA2\\x00\\x00\\x00\\x10_lv_draw_sw_mask_radius_param_t',),(b'\\x00\\x00\\x0D\\xA3\\x00\\x00\\x00\\x10_lv_draw_sw_unit_t',),(b'\\x00\\x00\\x0D\\xA5\\x00\\x00\\x00\\x10_lv_draw_task_t',),(b'\\x00\\x00\\x0D\\xA8\\x00\\x00\\x00\\x10_lv_draw_unit_t',),(b'\\x00\\x00\\x0D\\xA9\\x00\\x00\\x00\\x10_lv_draw_vector_task_dsc_t',),(b'\\x00\\x00\\x0D\\xAA\\x00\\x00\\x00\\x10_lv_dropdown_list_t',),(b'\\x00\\x00\\x0D\\xAB\\x00\\x00\\x00\\x10_lv_dropdown_t',),(b'\\x00\\x00\\x0D\\xAC\\x00\\x00\\x00\\x10_lv_evdev_discovery_t',),(b'\\x00\\x00\\x0D\\xAD\\x00\\x00\\x00\\x10_lv_event_dsc_t',),(b'\\x00\\x00\\x0D\\xAF\\x00\\x00\\x00\\x10_lv_event_t',),(b'\\x00\\x00\\x0D\\xB0\\x00\\x00\\x00\\x10_lv_ffmpeg_player_t',),(b'\\x00\\x00\\x0D\\xB1\\x00\\x00\\x00\\x10_lv_file_explorer_t',),(b'\\x00\\x00\\x0D\\xBE\\x00\\x00\\x00\\x02_lv_font_t',b'\\x00\\x0D\\x5E\\x11get_glyph_dsc',b'\\x00\\x0E\\x52\\x11get_glyph_bitmap',b'\\x00\\x0E\\x54\\x11release_glyph',b'\\x00\\x00\\xC9\\x11line_height',b'\\x00\\x00\\xC9\\x11base_line',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x02subpx',b'\\x00\\x00\\x80\\x13\\x00\\x00\\x00\\x01kerning',b'\\x00\\x01\\x86\\x11underline_position',b'\\x00\\x01\\x86\\x11underline_thickness',b'\\x00\\x00\\xAA\\x11dsc',b'\\x00\\x00\\x37\\x11fallback',b'\\x00\\x00\\xC0\\x11user_data'),(b'\\x00\\x00\\x0D\\xBF\\x00\\x00\\x00\\x10_lv_fpoint_t',),(b'\\x00\\x00\\x0D\\xC0\\x00\\x00\\x00\\x10_lv_fragment_class_t',),(b'\\x00\\x00\\x0D\\xC1\\x00\\x00\\x00\\x10_lv_fragment_managed_states_t',),(b'\\x00\\x00\\x0D\\xC2\\x00\\x00\\x00\\x10_lv_fragment_t',),(b'\\x00\\x00\\x0D\\xC3\\x00\\x00\\x00\\x10_lv_freetype_outline_event_param_t',),(b'\\x00\\x00\\x0D\\xC4\\x00\\x00\\x00\\x10_lv_freetype_outline_vector_t',),(b'\\x00\\x00\\x0D\\xC6\\x00\\x00\\x00\\x02_lv_fs_drv_t',b'\\x00\\x00\\x01\\x11letter',b'\\x00\\x00\\x0F\\x11cache_size',b'\\x00\\x0D\\x5F\\x11ready_cb',b'\\x00\\x0E\\x4F\\x11open_cb',b'\\x00\\x0D\\xCB\\x11close_cb',b'\\x00\\x0D\\xCF\\x11read_cb',b'\\x00\\x0D\\xD0\\x11write_cb',b'\\x00\\x0D\\xCE\\x11seek_cb',b'\\x00\\x0D\\xCD\\x11tell_cb',b'\\x00\\x0E\\x4E\\x11dir_open_cb',b'\\x00\\x0D\\xCC\\x11dir_read_cb',b'\\x00\\x0D\\xCB\\x11dir_close_cb',b'\\x00\\x00\\xC0\\x11user_data'),(b'\\x00\\x00\\x0D\\xC8\\x00\\x00\\x00\\x10_lv_fs_file_cache_t',),(b'\\x00\\x00\\x0D\\xCA\\x00\\x00\\x00\\x10_lv_fs_path_ex_t',),(b'\\x00\\x00\\x0D\\xD2\\x00\\x00\\x00\\x10_lv_gif_t',),(b'\\x00\\x00\\x0D\\xD3\\x00\\x00\\x00\\x10_lv_glfw_texture_t',),(b'\\x00\\x00\\x0D\\xD4\\x00\\x00\\x00\\x10_lv_glfw_window_t',),(b'\\x00\\x00\\x0D\\xD9\\x00\\x00\\x00\\x10_lv_group_t',),(b'\\x00\\x00\\x0D\\xDB\\x00\\x00\\x00\\x10_lv_hit_test_info_t',),(b'\\x00\\x00\\x0D\\xDC\\x00\\x00\\x00\\x10_lv_image_cache_data_t',),(b'\\x00\\x00\\x0D\\xDE\\x00\\x00\\x00\\x10_lv_image_decoder_args_t',),(b'\\x00\\x00\\x0D\\xDF\\x00\\x00\\x00\\x10_lv_image_decoder_dsc_t',),(b'\\x00\\x00\\x0D\\xE0\\x00\\x00\\x00\\x10_lv_image_decoder_t',),(b'\\x00\\x00\\x0D\\xE2\\x00\\x00\\x00\\x10_lv_image_header_cache_data_t',),(b'\\x00\\x00\\x0D\\xE5\\x00\\x00\\x00\\x10_lv_image_t',),(b'\\x00\\x00\\x0D\\xE6\\x00\\x00\\x00\\x10_lv_imagebutton_src_info_t',),(b'\\x00\\x00\\x0D\\xE7\\x00\\x00\\x00\\x10_lv_imagebutton_t',),(b'\\x00\\x00\\x0D\\xE8\\x00\\x00\\x00\\x10_lv_ime_pinyin_t',),(b'\\x00\\x00\\x0D\\xEE\\x00\\x00\\x00\\x10_lv_indev_t',),(b'\\x00\\x00\\x0D\\xEF\\x00\\x00\\x00\\x10_lv_iter_t',),(b'\\x00\\x00\\x0D\\xF1\\x00\\x00\\x00\\x10_lv_keyboard_t',),(b'\\x00\\x00\\x0D\\xF2\\x00\\x00\\x00\\x10_lv_label_t',),(b'\\x00\\x00\\x0D\\xF3\\x00\\x00\\x00\\x02_lv_layer_t',b'\\x00\\x02\\x69\\x11draw_buf',b'\\x00\\x0D\\x70\\x11buf_area',b'\\x00\\x00\\x19\\x11color_format',b'\\x00\\x0D\\x70\\x11_clip_area',b'\\x00\\x0D\\x70\\x11phy_clip_area',b'\\x00\\x00\\x80\\x11opa',b'\\x00\\x00\\x15\\x11recolor',b'\\x00\\x00\\xC9\\x11partial_y_offset',b'\\x00\\x02\\x50\\x11draw_task_head',b'\\x00\\x00\\x24\\x11parent',b'\\x00\\x00\\x24\\x11next',b'\\x00\\x00\\x55\\x11all_tasks_added',b'\\x00\\x00\\xC0\\x11user_data'),(b'\\x00\\x00\\x0D\\xF6\\x00\\x00\\x00\\x10_lv_led_t',),(b'\\x00\\x00\\x0D\\xF7\\x00\\x00\\x00\\x10_lv_libinput_event_t',),(b'\\x00\\x00\\x0D\\xF8\\x00\\x00\\x00\\x10_lv_libinput_t',),(b'\\x00\\x00\\x0D\\xF9\\x00\\x00\\x00\\x10_lv_line_t',),(b'\\x00\\x00\\x0D\\xFB\\x00\\x00\\x00\\x10_lv_matrix_t',),(b'\\x00\\x00\\x0D\\xFD\\x00\\x00\\x00\\x10_lv_menu_history_t',),(b'\\x00\\x00\\x0D\\xFE\\x00\\x00\\x00\\x10_lv_menu_load_page_event_data_t',),(b'\\x00\\x00\\x0D\\xFF\\x00\\x00\\x00\\x10_lv_menu_page_t',),(b'\\x00\\x00\\x0E\\x00\\x00\\x00\\x00\\x10_lv_menu_t',),(b'\\x00\\x00\\x0E\\x01\\x00\\x00\\x00\\x10_lv_monkey_config_t',),(b'\\x00\\x00\\x0E\\x02\\x00\\x00\\x00\\x10_lv_msgbox_t',),(b'\\x00\\x00\\x0E\\x05\\x00\\x00\\x00\\x10_lv_obj_class_t',),(b'\\x00\\x00\\x0E\\x07\\x00\\x00\\x00\\x10_lv_obj_spec_attr_t',),(b'\\x00\\x00\\x0E\\x08\\x00\\x00\\x00\\x10_lv_obj_style_t',),(b'\\x00\\x00\\x0E\\x09\\x00\\x00\\x00\\x10_lv_obj_style_transition_dsc_t',),(b'\\x00\\x00\\x0E\\x0A\\x00\\x00\\x00\\x10_lv_obj_t',),(b'\\x00\\x00\\x0E\\x0C\\x00\\x00\\x00\\x10_lv_observer_t',),(b'\\x00\\x00\\x0E\\x11\\x00\\x00\\x00\\x10_lv_profiler_builtin_config_t',),(b'\\x00\\x00\\x0E\\x12\\x00\\x00\\x00\\x10_lv_qrcode_t',),(b'\\x00\\x00\\x0E\\x14\\x00\\x00\\x00\\x10_lv_rb_node_t',),(b'\\x00\\x00\\x0E\\x15\\x00\\x00\\x00\\x10_lv_rb_t',),(b'\\x00\\x00\\x0E\\x17\\x00\\x00\\x00\\x10_lv_rlottie_t',),(b'\\x00\\x00\\x0E\\x18\\x00\\x00\\x00\\x10_lv_roller_t',),(b'\\x00\\x00\\x0E\\x19\\x00\\x00\\x00\\x10_lv_scale_section_t',),(b'\\x00\\x00\\x0E\\x1A\\x00\\x00\\x00\\x10_lv_scale_t',),(b'\\x00\\x00\\x0E\\x1B\\x00\\x00\\x00\\x10_lv_slider_t',),(b'\\x00\\x00\\x0E\\x1C\\x00\\x00\\x00\\x02_lv_span_coords_t',b'\\x00\\x0D\\x70\\x11heading',b'\\x00\\x0D\\x70\\x11middle',b'\\x00\\x0D\\x70\\x11trailing'),(b'\\x00\\x00\\x0E\\x1D\\x00\\x00\\x00\\x10_lv_span_t',),(b'\\x00\\x00\\x0E\\x1E\\x00\\x00\\x00\\x10_lv_spangroup_t',),(b'\\x00\\x00\\x0E\\x1F\\x00\\x00\\x00\\x10_lv_spinbox_t',),(b'\\x00\\x00\\x0E\\x29\\x00\\x00\\x00\\x10_lv_switch_t',),(b'\\x00\\x00\\x0E\\x2A\\x00\\x00\\x00\\x10_lv_table_cell_t',),(b'\\x00\\x00\\x0E\\x2B\\x00\\x00\\x00\\x10_lv_table_t',),(b'\\x00\\x00\\x0E\\x2C\\x00\\x00\\x00\\x10_lv_tabview_t',),(b'\\x00\\x00\\x0E\\x2E\\x00\\x00\\x00\\x10_lv_textarea_t',),(b'\\x00\\x00\\x0E\\x2F\\x00\\x00\\x00\\x10_lv_theme_t',),(b'\\x00\\x00\\x0E\\x31\\x00\\x00\\x00\\x10_lv_tileview_t',),(b'\\x00\\x00\\x0E\\x32\\x00\\x00\\x00\\x10_lv_tileview_tile_t',),(b'\\x00\\x00\\x0E\\x33\\x00\\x00\\x00\\x10_lv_timer_t',),(b'\\x00\\x00\\x0E\\x34\\x00\\x00\\x00\\x02_lv_tree_class_t',b'\\x00\\x05\\x33\\x11base_class',b'\\x00\\x00\\x0F\\x11instance_size',b'\\x00\\x0E\\x57\\x11constructor_cb',b'\\x00\\x0E\\x57\\x11destructor_cb'),(b'\\x00\\x00\\x0E\\x36\\x00\\x00\\x00\\x02_lv_tree_node_t',b'\\x00\\x05\\x34\\x11parent',b'\\x00\\x0E\\x35\\x11children',b'\\x00\\x00\\x0F\\x11child_cnt',b'\\x00\\x00\\x0F\\x11child_cap',b'\\x00\\x05\\x33\\x11class_p'),(b'\\x00\\x00\\x0E\\x37\\x00\\x00\\x00\\x10_lv_vector_draw_dsc_t',),(b'\\x00\\x00\\x0E\\x38\\x00\\x00\\x00\\x10_lv_vector_dsc_t',),(b'\\x00\\x00\\x0E\\x39\\x00\\x00\\x00\\x10_lv_vector_fill_dsc_t',),(b'\\x00\\x00\\x0E\\x3A\\x00\\x00\\x00\\x10_lv_vector_gradient_t',),(b'\\x00\\x00\\x0E\\x3B\\x00\\x00\\x00\\x10_lv_vector_path_t',),(b'\\x00\\x00\\x0E\\x3C\\x00\\x00\\x00\\x10_lv_vector_stroke_dsc_t',),(b'\\x00\\x00\\x0E\\x3D\\x00\\x00\\x00\\x10_lv_win_t',),(b'\\x00\\x00\\x0E\\x3E\\x00\\x00\\x00\\x10_lv_xkb_t',),(b'\\x00\\x00\\x0E\\x3F\\x00\\x00\\x00\\x10_lv_xml_component_ctx_t',),(b'\\x00\\x00\\x0E\\x40\\x00\\x00\\x00\\x10_lv_xml_parser_state_t',),(b'\\x00\\x00\\x0E\\x48\\x00\\x00\\x00\\x10_silence_gcc_warning',),(b'\\x00\\x00\\x0E\\x5A\\x00\\x00\\x00\\x10xcb_connection_t',)),     _enums = (b'\\x00\\x00\\x0D\\x65\\x00\\x00\\x00\\x16$1\\x00LV_OPA_TRANSP,LV_OPA_0,LV_OPA_10,LV_OPA_20,LV_OPA_30,LV_OPA_40,LV_OPA_50,LV_OPA_60,LV_OPA_70,LV_OPA_80,LV_OPA_90,LV_OPA_100,LV_OPA_COVER',b'\\x00\\x00\\x0D\\x61\\x00\\x00\\x00\\x16$11\\x00LV_STYLE_PROP_INV,LV_STYLE_WIDTH,LV_STYLE_HEIGHT,LV_STYLE_LENGTH,LV_STYLE_MIN_WIDTH,LV_STYLE_MAX_WIDTH,LV_STYLE_MIN_HEIGHT,LV_STYLE_MAX_HEIGHT,LV_STYLE_X,LV_STYLE_Y,LV_STYLE_ALIGN,LV_STYLE_RADIUS,LV_STYLE_RADIAL_OFFSET,LV_STYLE_PAD_RADIAL,LV_STYLE_PAD_TOP,LV_STYLE_PAD_BOTTOM,LV_STYLE_PAD_LEFT,LV_STYLE_PAD_RIGHT,LV_STYLE_PAD_ROW,LV_STYLE_PAD_COLUMN,LV_STYLE_LAYOUT,LV_STYLE_MARGIN_TOP,LV_STYLE_MARGIN_BOTTOM,LV_STYLE_MARGIN_LEFT,LV_STYLE_MARGIN_RIGHT,LV_STYLE_BG_COLOR,LV_STYLE_BG_OPA,LV_STYLE_BG_GRAD_DIR,LV_STYLE_BG_MAIN_STOP,LV_STYLE_BG_GRAD_STOP,LV_STYLE_BG_GRAD_COLOR,LV_STYLE_BG_MAIN_OPA,LV_STYLE_BG_GRAD_OPA,LV_STYLE_BG_GRAD,LV_STYLE_BASE_DIR,LV_STYLE_BG_IMAGE_SRC,LV_STYLE_BG_IMAGE_OPA,LV_STYLE_BG_IMAGE_RECOLOR,LV_STYLE_BG_IMAGE_RECOLOR_OPA,LV_STYLE_BG_IMAGE_TILED,LV_STYLE_CLIP_CORNER,LV_STYLE_BORDER_WIDTH,LV_STYLE_BORDER_COLOR,LV_STYLE_BORDER_OPA,LV_STYLE_BORDER_SIDE,LV_STYLE_BORDER_POST,LV_STYLE_OUTLINE_WIDTH,LV_STYLE_OUTLINE_COLOR,LV_STYLE_OUTLINE_OPA,LV_STYLE_OUTLINE_PAD,LV_STYLE_SHADOW_WIDTH,LV_STYLE_SHADOW_COLOR,LV_STYLE_SHADOW_OPA,LV_STYLE_SHADOW_OFFSET_X,LV_STYLE_SHADOW_OFFSET_Y,LV_STYLE_SHADOW_SPREAD,LV_STYLE_IMAGE_OPA,LV_STYLE_IMAGE_RECOLOR,LV_STYLE_IMAGE_RECOLOR_OPA,LV_STYLE_LINE_WIDTH,LV_STYLE_LINE_DASH_WIDTH,LV_STYLE_LINE_DASH_GAP,LV_STYLE_LINE_ROUNDED,LV_STYLE_LINE_COLOR,LV_STYLE_LINE_OPA,LV_STYLE_ARC_WIDTH,LV_STYLE_ARC_ROUNDED,LV_STYLE_ARC_COLOR,LV_STYLE_ARC_OPA,LV_STYLE_ARC_IMAGE_SRC,LV_STYLE_TEXT_COLOR,LV_STYLE_TEXT_OPA,LV_STYLE_TEXT_FONT,LV_STYLE_TEXT_LETTER_SPACE,LV_STYLE_TEXT_LINE_SPACE,LV_STYLE_TEXT_DECOR,LV_STYLE_TEXT_ALIGN,LV_STYLE_TEXT_OUTLINE_STROKE_WIDTH,LV_STYLE_TEXT_OUTLINE_STROKE_OPA,LV_STYLE_TEXT_OUTLINE_STROKE_COLOR,LV_STYLE_OPA,LV_STYLE_OPA_LAYERED,LV_STYLE_COLOR_FILTER_DSC,LV_STYLE_COLOR_FILTER_OPA,LV_STYLE_ANIM,LV_STYLE_ANIM_DURATION,LV_STYLE_TRANSITION,LV_STYLE_BLEND_MODE,LV_STYLE_TRANSFORM_WIDTH,LV_STYLE_TRANSFORM_HEIGHT,LV_STYLE_TRANSLATE_X,LV_STYLE_TRANSLATE_Y,LV_STYLE_TRANSFORM_SCALE_X,LV_STYLE_TRANSFORM_SCALE_Y,LV_STYLE_TRANSFORM_ROTATION,LV_STYLE_TRANSFORM_PIVOT_X,LV_STYLE_TRANSFORM_PIVOT_Y,LV_STYLE_TRANSFORM_SKEW_X,LV_STYLE_TRANSFORM_SKEW_Y,LV_STYLE_BITMAP_MASK_SRC,LV_STYLE_ROTARY_SENSITIVITY,LV_STYLE_TRANSLATE_RADIAL,LV_STYLE_RECOLOR,LV_STYLE_RECOLOR_OPA,LV_STYLE_FLEX_FLOW,LV_STYLE_FLEX_MAIN_PLACE,LV_STYLE_FLEX_CROSS_PLACE,LV_STYLE_FLEX_TRACK_PLACE,LV_STYLE_FLEX_GROW,LV_STYLE_GRID_COLUMN_ALIGN,LV_STYLE_GRID_ROW_ALIGN,LV_STYLE_GRID_ROW_DSC_ARRAY,LV_STYLE_GRID_COLUMN_DSC_ARRAY,LV_STYLE_GRID_CELL_COLUMN_POS,LV_STYLE_GRID_CELL_COLUMN_SPAN,LV_STYLE_GRID_CELL_X_ALIGN,LV_STYLE_GRID_CELL_ROW_POS,LV_STYLE_GRID_CELL_ROW_SPAN,LV_STYLE_GRID_CELL_Y_ALIGN,LV_STYLE_LAST_BUILT_IN_PROP,LV_STYLE_NUM_BUILT_IN_PROPS,LV_STYLE_PROP_ANY,LV_STYLE_PROP_CONST',b'\\x00\\x00\\x0D\\x62\\x00\\x00\\x00\\x16$12\\x00LV_STATE_DEFAULT,LV_STATE_CHECKED,LV_STATE_FOCUSED,LV_STATE_FOCUS_KEY,LV_STATE_EDITED,LV_STATE_HOVERED,LV_STATE_PRESSED,LV_STATE_SCROLLED,LV_STATE_DISABLED,LV_STATE_USER_1,LV_STATE_USER_2,LV_STATE_USER_3,LV_STATE_USER_4,LV_STATE_ANY',b'\\x00\\x00\\x0D\\x63\\x00\\x00\\x00\\x16$13\\x00LV_PART_MAIN,LV_PART_SCROLLBAR,LV_PART_INDICATOR,LV_PART_KNOB,LV_PART_SELECTED,LV_PART_ITEMS,LV_PART_CURSOR,LV_PART_CUSTOM_FIRST,LV_PART_ANY',b'\\x00\\x00\\x0D\\x64\\x00\\x00\\x00\\x16$14\\x00LV_PART_TEXTAREA_PLACEHOLDER',b'\\x00\\x00\\x0D\\x66\\x00\\x00\\x00\\x16$4\\x00LV_TREE_WALK_PRE_ORDER,LV_TREE_WALK_POST_ORDER',b'\\x00\\x00\\x0D\\x67\\x00\\x00\\x00\\x16$5\\x00LV_STR_SYMBOL_BULLET,LV_STR_SYMBOL_AUDIO,LV_STR_SYMBOL_VIDEO,LV_STR_SYMBOL_LIST,LV_STR_SYMBOL_OK,LV_STR_SYMBOL_CLOSE,LV_STR_SYMBOL_POWER,LV_STR_SYMBOL_SETTINGS,LV_STR_SYMBOL_HOME,LV_STR_SYMBOL_DOWNLOAD,LV_STR_SYMBOL_DRIVE,LV_STR_SYMBOL_REFRESH,LV_STR_SYMBOL_MUTE,LV_STR_SYMBOL_VOLUME_MID,LV_STR_SYMBOL_VOLUME_MAX,LV_STR_SYMBOL_IMAGE,LV_STR_SYMBOL_TINT,LV_STR_SYMBOL_PREV,LV_STR_SYMBOL_PLAY,LV_STR_SYMBOL_PAUSE,LV_STR_SYMBOL_STOP,LV_STR_SYMBOL_NEXT,LV_STR_SYMBOL_EJECT,LV_STR_SYMBOL_LEFT,LV_STR_SYMBOL_RIGHT,LV_STR_SYMBOL_PLUS,LV_STR_SYMBOL_MINUS,LV_STR_SYMBOL_EYE_OPEN,LV_STR_SYMBOL_EYE_CLOSE,LV_STR_SYMBOL_WARNING,LV_STR_SYMBOL_SHUFFLE,LV_STR_SYMBOL_UP,LV_STR_SYMBOL_DOWN,LV_STR_SYMBOL_LOOP,LV_STR_SYMBOL_DIRECTORY,LV_STR_SYMBOL_UPLOAD,LV_STR_SYMBOL_CALL,LV_STR_SYMBOL_CUT,LV_STR_SYMBOL_COPY,LV_STR_SYMBOL_SAVE,LV_STR_SYMBOL_BARS,LV_STR_SYMBOL_ENVELOPE,LV_STR_SYMBOL_CHARGE,LV_STR_SYMBOL_PASTE,LV_STR_SYMBOL_BELL,LV_STR_SYMBOL_KEYBOARD,LV_STR_SYMBOL_GPS,LV_STR_SYMBOL_FILE,LV_STR_SYMBOL_WIFI,LV_STR_SYMBOL_BATTERY_FULL,LV_STR_SYMBOL_BATTERY_3,LV_STR_SYMBOL_BATTERY_2,LV_STR_SYMBOL_BATTERY_1,LV_STR_SYMBOL_BATTERY_EMPTY,LV_STR_SYMBOL_USB,LV_STR_SYMBOL_BLUETOOTH,LV_STR_SYMBOL_TRASH,LV_STR_SYMBOL_EDIT,LV_STR_SYMBOL_BACKSPACE,LV_STR_SYMBOL_SD_CARD,LV_STR_SYMBOL_NEW_LINE,LV_STR_SYMBOL_DUMMY',b'\\x00\\x00\\x06\\xFC\\x00\\x00\\x00\\x16$lv_align_t\\x00LV_ALIGN_DEFAULT,LV_ALIGN_TOP_LEFT,LV_ALIGN_TOP_MID,LV_ALIGN_TOP_RIGHT,LV_ALIGN_BOTTOM_LEFT,LV_ALIGN_BOTTOM_MID,LV_ALIGN_BOTTOM_RIGHT,LV_ALIGN_LEFT_MID,LV_ALIGN_RIGHT_MID,LV_ALIGN_CENTER,LV_ALIGN_OUT_TOP_LEFT,LV_ALIGN_OUT_TOP_MID,LV_ALIGN_OUT_TOP_RIGHT,LV_ALIGN_OUT_BOTTOM_LEFT,LV_ALIGN_OUT_BOTTOM_MID,LV_ALIGN_OUT_BOTTOM_RIGHT,LV_ALIGN_OUT_LEFT_TOP,LV_ALIGN_OUT_LEFT_MID,LV_ALIGN_OUT_LEFT_BOTTOM,LV_ALIGN_OUT_RIGHT_TOP,LV_ALIGN_OUT_RIGHT_MID,LV_ALIGN_OUT_RIGHT_BOTTOM',b'\\x00\\x00\\x0D\\x6D\\x00\\x00\\x00\\x16$lv_animimg_part_t\\x00LV_ANIM_IMAGE_PART_MAIN',b'\\x00\\x00\\x09\\x83\\x00\\x00\\x00\\x16$lv_arc_mode_t\\x00LV_ARC_MODE_NORMAL,LV_ARC_MODE_SYMMETRICAL,LV_ARC_MODE_REVERSE',b'\\x00\\x00\\x09\\x92\\x00\\x00\\x00\\x16$lv_bar_mode_t\\x00LV_BAR_MODE_NORMAL,LV_BAR_MODE_SYMMETRICAL,LV_BAR_MODE_RANGE',b'\\x00\\x00\\x09\\x96\\x00\\x00\\x00\\x16$lv_bar_orientation_t\\x00LV_BAR_ORIENTATION_AUTO,LV_BAR_ORIENTATION_HORIZONTAL,LV_BAR_ORIENTATION_VERTICAL',b'\\x00\\x00\\x09\\x9A\\x00\\x00\\x00\\x16$lv_base_dir_t\\x00LV_BASE_DIR_LTR,LV_BASE_DIR_RTL,LV_BASE_DIR_AUTO,LV_BASE_DIR_NEUTRAL,LV_BASE_DIR_WEAK',b'\\x00\\x00\\x09\\x9F\\x00\\x00\\x00\\x16$lv_blend_mode_t\\x00LV_BLEND_MODE_NORMAL,LV_BLEND_MODE_ADDITIVE,LV_BLEND_MODE_SUBTRACTIVE,LV_BLEND_MODE_MULTIPLY,LV_BLEND_MODE_DIFFERENCE',b'\\x00\\x00\\x09\\xA8\\x00\\x00\\x00\\x16$lv_border_side_t\\x00LV_BORDER_SIDE_NONE,LV_BORDER_SIDE_BOTTOM,LV_BORDER_SIDE_TOP,LV_BORDER_SIDE_LEFT,LV_BORDER_SIDE_RIGHT,LV_BORDER_SIDE_FULL,LV_BORDER_SIDE_INTERNAL',b'\\x00\\x00\\x00\\x76\\x00\\x00\\x00\\x16$lv_buttonmatrix_ctrl_t\\x00LV_BUTTONMATRIX_CTRL_NONE,LV_BUTTONMATRIX_CTRL_WIDTH_1,LV_BUTTONMATRIX_CTRL_WIDTH_2,LV_BUTTONMATRIX_CTRL_WIDTH_3,LV_BUTTONMATRIX_CTRL_WIDTH_4,LV_BUTTONMATRIX_CTRL_WIDTH_5,LV_BUTTONMATRIX_CTRL_WIDTH_6,LV_BUTTONMATRIX_CTRL_WIDTH_7,LV_BUTTONMATRIX_CTRL_WIDTH_8,LV_BUTTONMATRIX_CTRL_WIDTH_9,LV_BUTTONMATRIX_CTRL_WIDTH_10,LV_BUTTONMATRIX_CTRL_WIDTH_11,LV_BUTTONMATRIX_CTRL_WIDTH_12,LV_BUTTONMATRIX_CTRL_WIDTH_13,LV_BUTTONMATRIX_CTRL_WIDTH_14,LV_BUTTONMATRIX_CTRL_WIDTH_15,LV_BUTTONMATRIX_CTRL_HIDDEN,LV_BUTTONMATRIX_CTRL_NO_REPEAT,LV_BUTTONMATRIX_CTRL_DISABLED,LV_BUTTONMATRIX_CTRL_CHECKABLE,LV_BUTTONMATRIX_CTRL_CHECKED,LV_BUTTONMATRIX_CTRL_CLICK_TRIG,LV_BUTTONMATRIX_CTRL_POPOVER,LV_BUTTONMATRIX_CTRL_RECOLOR,LV_BUTTONMATRIX_CTRL_RESERVED_1,LV_BUTTONMATRIX_CTRL_RESERVED_2,LV_BUTTONMATRIX_CTRL_CUSTOM_1,LV_BUTTONMATRIX_CTRL_CUSTOM_2',b'\\x00\\x00\\x01\\xC5\\x00\\x00\\x00\\x16$lv_chart_axis_t\\x00LV_CHART_AXIS_PRIMARY_Y,LV_CHART_AXIS_SECONDARY_Y,LV_CHART_AXIS_PRIMARY_X,LV_CHART_AXIS_SECONDARY_X,LV_CHART_AXIS_LAST',b'\\x00\\x00\\x0A\\x0E\\x00\\x00\\x00\\x16$lv_chart_type_t\\x00LV_CHART_TYPE_NONE,LV_CHART_TYPE_LINE,LV_CHART_TYPE_BAR,LV_CHART_TYPE_SCATTER',b'\\x00\\x00\\x0A\\x12\\x00\\x00\\x00\\x16$lv_chart_update_mode_t\\x00LV_CHART_UPDATE_MODE_SHIFT,LV_CHART_UPDATE_MODE_CIRCULAR',b'\\x00\\x00\\x00\\x19\\x00\\x00\\x00\\x16$lv_color_format_t\\x00LV_COLOR_FORMAT_UNKNOWN,LV_COLOR_FORMAT_RAW,LV_COLOR_FORMAT_RAW_ALPHA,LV_COLOR_FORMAT_L8,LV_COLOR_FORMAT_I1,LV_COLOR_FORMAT_I2,LV_COLOR_FORMAT_I4,LV_COLOR_FORMAT_I8,LV_COLOR_FORMAT_A8,LV_COLOR_FORMAT_RGB565,LV_COLOR_FORMAT_ARGB8565,LV_COLOR_FORMAT_RGB565A8,LV_COLOR_FORMAT_AL88,LV_COLOR_FORMAT_RGB888,LV_COLOR_FORMAT_ARGB8888,LV_COLOR_FORMAT_XRGB8888,LV_COLOR_FORMAT_A1,LV_COLOR_FORMAT_A2,LV_COLOR_FORMAT_A4,LV_COLOR_FORMAT_ARGB1555,LV_COLOR_FORMAT_ARGB4444,LV_COLOR_FORMAT_ARGB2222,LV_COLOR_FORMAT_YUV_START,LV_COLOR_FORMAT_I420,LV_COLOR_FORMAT_I422,LV_COLOR_FORMAT_I444,LV_COLOR_FORMAT_I400,LV_COLOR_FORMAT_NV21,LV_COLOR_FORMAT_NV12,LV_COLOR_FORMAT_YUY2,LV_COLOR_FORMAT_UYVY,LV_COLOR_FORMAT_YUV_END,LV_COLOR_FORMAT_PROPRIETARY_START,LV_COLOR_FORMAT_NEMA_TSC_START,LV_COLOR_FORMAT_NEMA_TSC4,LV_COLOR_FORMAT_NEMA_TSC6,LV_COLOR_FORMAT_NEMA_TSC6A,LV_COLOR_FORMAT_NEMA_TSC6AP,LV_COLOR_FORMAT_NEMA_TSC12,LV_COLOR_FORMAT_NEMA_TSC12A,LV_COLOR_FORMAT_NEMA_TSC_END,LV_COLOR_FORMAT_NATIVE,LV_COLOR_FORMAT_NATIVE_WITH_ALPHA',b'\\x00\\x00\\x07\\xEE\\x00\\x00\\x00\\x16$lv_cover_res_t\\x00LV_COVER_RES_COVER,LV_COVER_RES_NOT_COVER,LV_COVER_RES_MASKED',b'\\x00\\x00\\x01\\xC0\\x00\\x00\\x00\\x16$lv_dir_t\\x00LV_DIR_NONE,LV_DIR_LEFT,LV_DIR_RIGHT,LV_DIR_TOP,LV_DIR_BOTTOM,LV_DIR_HOR,LV_DIR_VER,LV_DIR_ALL',b'\\x00\\x00\\x07\\x43\\x00\\x00\\x00\\x16$lv_display_render_mode_t\\x00LV_DISPLAY_RENDER_MODE_PARTIAL,LV_DISPLAY_RENDER_MODE_DIRECT,LV_DISPLAY_RENDER_MODE_FULL',b'\\x00\\x00\\x07\\x47\\x00\\x00\\x00\\x16$lv_display_rotation_t\\x00LV_DISPLAY_ROTATION_0,LV_DISPLAY_ROTATION_90,LV_DISPLAY_ROTATION_180,LV_DISPLAY_ROTATION_270',b'\\x00\\x00\\x0D\\xA4\\x00\\x00\\x00\\x16$lv_draw_task_state_t\\x00LV_DRAW_TASK_STATE_WAITING,LV_DRAW_TASK_STATE_QUEUED,LV_DRAW_TASK_STATE_IN_PROGRESS,LV_DRAW_TASK_STATE_READY',b'\\x00\\x00\\x0D\\xA6\\x00\\x00\\x00\\x16$lv_draw_task_type_t\\x00LV_DRAW_TASK_TYPE_NONE,LV_DRAW_TASK_TYPE_FILL,LV_DRAW_TASK_TYPE_BORDER,LV_DRAW_TASK_TYPE_BOX_SHADOW,LV_DRAW_TASK_TYPE_LETTER,LV_DRAW_TASK_TYPE_LABEL,LV_DRAW_TASK_TYPE_IMAGE,LV_DRAW_TASK_TYPE_LAYER,LV_DRAW_TASK_TYPE_LINE,LV_DRAW_TASK_TYPE_ARC,LV_DRAW_TASK_TYPE_TRIANGLE,LV_DRAW_TASK_TYPE_MASK_RECTANGLE,LV_DRAW_TASK_TYPE_MASK_BITMAP,LV_DRAW_TASK_TYPE_VECTOR',b'\\x00\\x00\\x08\\x70\\x00\\x00\\x00\\x16$lv_evdev_type_t\\x00LV_EVDEV_TYPE_REL,LV_EVDEV_TYPE_ABS,LV_EVDEV_TYPE_KEY',b'\\x00\\x00\\x00\\xF3\\x00\\x00\\x00\\x16$lv_event_code_t\\x00LV_EVENT_ALL,LV_EVENT_PRESSED,LV_EVENT_PRESSING,LV_EVENT_PRESS_LOST,LV_EVENT_SHORT_CLICKED,LV_EVENT_SINGLE_CLICKED,LV_EVENT_DOUBLE_CLICKED,LV_EVENT_TRIPLE_CLICKED,LV_EVENT_LONG_PRESSED,LV_EVENT_LONG_PRESSED_REPEAT,LV_EVENT_CLICKED,LV_EVENT_RELEASED,LV_EVENT_SCROLL_BEGIN,LV_EVENT_SCROLL_THROW_BEGIN,LV_EVENT_SCROLL_END,LV_EVENT_SCROLL,LV_EVENT_GESTURE,LV_EVENT_KEY,LV_EVENT_ROTARY,LV_EVENT_FOCUSED,LV_EVENT_DEFOCUSED,LV_EVENT_LEAVE,LV_EVENT_HIT_TEST,LV_EVENT_INDEV_RESET,LV_EVENT_HOVER_OVER,LV_EVENT_HOVER_LEAVE,LV_EVENT_COVER_CHECK,LV_EVENT_REFR_EXT_DRAW_SIZE,LV_EVENT_DRAW_MAIN_BEGIN,LV_EVENT_DRAW_MAIN,LV_EVENT_DRAW_MAIN_END,LV_EVENT_DRAW_POST_BEGIN,LV_EVENT_DRAW_POST,LV_EVENT_DRAW_POST_END,LV_EVENT_DRAW_TASK_ADDED,LV_EVENT_VALUE_CHANGED,LV_EVENT_INSERT,LV_EVENT_REFRESH,LV_EVENT_READY,LV_EVENT_CANCEL,LV_EVENT_CREATE,LV_EVENT_DELETE,LV_EVENT_CHILD_CHANGED,LV_EVENT_CHILD_CREATED,LV_EVENT_CHILD_DELETED,LV_EVENT_SCREEN_UNLOAD_START,LV_EVENT_SCREEN_LOAD_START,LV_EVENT_SCREEN_LOADED,LV_EVENT_SCREEN_UNLOADED,LV_EVENT_SIZE_CHANGED,LV_EVENT_STYLE_CHANGED,LV_EVENT_LAYOUT_CHANGED,LV_EVENT_GET_SELF_SIZE,LV_EVENT_INVALIDATE_AREA,LV_EVENT_RESOLUTION_CHANGED,LV_EVENT_COLOR_FORMAT_CHANGED,LV_EVENT_REFR_REQUEST,LV_EVENT_REFR_START,LV_EVENT_REFR_READY,LV_EVENT_RENDER_START,LV_EVENT_RENDER_READY,LV_EVENT_FLUSH_START,LV_EVENT_FLUSH_FINISH,LV_EVENT_FLUSH_WAIT_START,LV_EVENT_FLUSH_WAIT_FINISH,LV_EVENT_VSYNC,LV_EVENT_LAST,LV_EVENT_PREPROCESS,LV_EVENT_MARKED_DELETING',b'\\x00\\x00\\x0A\\x31\\x00\\x00\\x00\\x16$lv_flex_align_t\\x00LV_FLEX_ALIGN_START,LV_FLEX_ALIGN_END,LV_FLEX_ALIGN_CENTER,LV_FLEX_ALIGN_SPACE_EVENLY,LV_FLEX_ALIGN_SPACE_AROUND,LV_FLEX_ALIGN_SPACE_BETWEEN',b'\\x00\\x00\\x0A\\x3C\\x00\\x00\\x00\\x16$lv_flex_flow_t\\x00LV_FLEX_FLOW_ROW,LV_FLEX_FLOW_COLUMN,LV_FLEX_FLOW_ROW_WRAP,LV_FLEX_FLOW_ROW_REVERSE,LV_FLEX_FLOW_ROW_WRAP_REVERSE,LV_FLEX_FLOW_COLUMN_WRAP,LV_FLEX_FLOW_COLUMN_REVERSE,LV_FLEX_FLOW_COLUMN_WRAP_REVERSE',b'\\x00\\x00\\x0D\\xB2\\x00\\x00\\x00\\x16$lv_font_fmt_txt_bitmap_format_t\\x00LV_FONT_FMT_TXT_PLAIN,LV_FONT_FMT_TXT_COMPRESSED,LV_FONT_FMT_TXT_COMPRESSED_NO_PREFILTER,LV_FONT_FMT_PLAIN_ALIGNED',b'\\x00\\x00\\x0D\\xB5\\x00\\x00\\x00\\x16$lv_font_fmt_txt_cmap_type_t\\x00LV_FONT_FMT_TXT_CMAP_FORMAT0_FULL,LV_FONT_FMT_TXT_CMAP_SPARSE_FULL,LV_FONT_FMT_TXT_CMAP_FORMAT0_TINY,LV_FONT_FMT_TXT_CMAP_SPARSE_TINY',b'\\x00\\x00\\x0D\\xBC\\x00\\x00\\x00\\x16$lv_font_glyph_format_t\\x00LV_FONT_GLYPH_FORMAT_NONE,LV_FONT_GLYPH_FORMAT_A1,LV_FONT_GLYPH_FORMAT_A2,LV_FONT_GLYPH_FORMAT_A3,LV_FONT_GLYPH_FORMAT_A4,LV_FONT_GLYPH_FORMAT_A8,LV_FONT_GLYPH_FORMAT_A1_ALIGNED,LV_FONT_GLYPH_FORMAT_A2_ALIGNED,LV_FONT_GLYPH_FORMAT_A4_ALIGNED,LV_FONT_GLYPH_FORMAT_A8_ALIGNED,LV_FONT_GLYPH_FORMAT_IMAGE,LV_FONT_GLYPH_FORMAT_VECTOR,LV_FONT_GLYPH_FORMAT_SVG,LV_FONT_GLYPH_FORMAT_CUSTOM',b'\\x00\\x00\\x02\\xC6\\x00\\x00\\x00\\x16$lv_font_kerning_t\\x00LV_FONT_KERNING_NORMAL,LV_FONT_KERNING_NONE',b'\\x00\\x00\\x0D\\xBD\\x00\\x00\\x00\\x16$lv_font_subpx_t\\x00LV_FONT_SUBPX_NONE,LV_FONT_SUBPX_HOR,LV_FONT_SUBPX_VER,LV_FONT_SUBPX_BOTH',b'\\x00\\x00\\x03\\x12\\x00\\x00\\x00\\x16$lv_fs_mode_t\\x00LV_FS_MODE_WR,LV_FS_MODE_RD',b'\\x00\\x00\\x0D\\xD1\\x00\\x00\\x00\\x16$lv_fs_res_t\\x00LV_FS_RES_OK,LV_FS_RES_HW_ERR,LV_FS_RES_FS_ERR,LV_FS_RES_NOT_EX,LV_FS_RES_FULL,LV_FS_RES_LOCKED,LV_FS_RES_DENIED,LV_FS_RES_BUSY,LV_FS_RES_TOUT,LV_FS_RES_NOT_IMP,LV_FS_RES_OUT_OF_MEM,LV_FS_RES_INV_PARAM,LV_FS_RES_UNKNOWN',b'\\x00\\x00\\x02\\xFC\\x00\\x00\\x00\\x16$lv_fs_whence_t\\x00LV_FS_SEEK_SET,LV_FS_SEEK_CUR,LV_FS_SEEK_END',b'\\x00\\x00\\x0A\\x4A\\x00\\x00\\x00\\x16$lv_grad_dir_t\\x00LV_GRAD_DIR_NONE,LV_GRAD_DIR_VER,LV_GRAD_DIR_HOR,LV_GRAD_DIR_LINEAR,LV_GRAD_DIR_RADIAL,LV_GRAD_DIR_CONICAL',b'\\x00\\x00\\x08\\x1A\\x00\\x00\\x00\\x16$lv_grad_extend_t\\x00LV_GRAD_EXTEND_PAD,LV_GRAD_EXTEND_REPEAT,LV_GRAD_EXTEND_REFLECT',b'\\x00\\x00\\x0A\\x54\\x00\\x00\\x00\\x16$lv_grid_align_t\\x00LV_GRID_ALIGN_START,LV_GRID_ALIGN_CENTER,LV_GRID_ALIGN_END,LV_GRID_ALIGN_STRETCH,LV_GRID_ALIGN_SPACE_EVENLY,LV_GRID_ALIGN_SPACE_AROUND,LV_GRID_ALIGN_SPACE_BETWEEN',b'\\x00\\x00\\x08\\x2C\\x00\\x00\\x00\\x16$lv_group_refocus_policy_t\\x00LV_GROUP_REFOCUS_POLICY_NEXT,LV_GROUP_REFOCUS_POLICY_PREV',b'\\x00\\x00\\x0A\\x67\\x00\\x00\\x00\\x16$lv_image_align_t\\x00LV_IMAGE_ALIGN_DEFAULT,LV_IMAGE_ALIGN_TOP_LEFT,LV_IMAGE_ALIGN_TOP_MID,LV_IMAGE_ALIGN_TOP_RIGHT,LV_IMAGE_ALIGN_BOTTOM_LEFT,LV_IMAGE_ALIGN_BOTTOM_MID,LV_IMAGE_ALIGN_BOTTOM_RIGHT,LV_IMAGE_ALIGN_LEFT_MID,LV_IMAGE_ALIGN_RIGHT_MID,LV_IMAGE_ALIGN_CENTER,LV_IMAGE_ALIGN_AUTO_TRANSFORM,LV_IMAGE_ALIGN_STRETCH,LV_IMAGE_ALIGN_TILE',b'\\x00\\x00\\x0D\\xDD\\x00\\x00\\x00\\x16$lv_image_compress_t\\x00LV_IMAGE_COMPRESS_NONE,LV_IMAGE_COMPRESS_RLE,LV_IMAGE_COMPRESS_LZ4',b'\\x00\\x00\\x0D\\xE4\\x00\\x00\\x00\\x16$lv_image_src_t\\x00LV_IMAGE_SRC_VARIABLE,LV_IMAGE_SRC_FILE,LV_IMAGE_SRC_SYMBOL,LV_IMAGE_SRC_UNKNOWN',b'\\x00\\x00\\x06\\x90\\x00\\x00\\x00\\x16$lv_imagebutton_state_t\\x00LV_IMAGEBUTTON_STATE_RELEASED,LV_IMAGEBUTTON_STATE_PRESSED,LV_IMAGEBUTTON_STATE_DISABLED,LV_IMAGEBUTTON_STATE_CHECKED_RELEASED,LV_IMAGEBUTTON_STATE_CHECKED_PRESSED,LV_IMAGEBUTTON_STATE_CHECKED_DISABLED,LV_IMAGEBUTTON_STATE_NUM',b'\\x00\\x00\\x0D\\xEA\\x00\\x00\\x00\\x16$lv_indev_gesture_type_t\\x00LV_INDEV_GESTURE_NONE,LV_INDEV_GESTURE_PINCH,LV_INDEV_GESTURE_SWIPE,LV_INDEV_GESTURE_ROTATE,LV_INDEV_GESTURE_TWO_FINGERS_SWIPE,LV_INDEV_GESTURE_SCROLL,LV_INDEV_GESTURE_CNT',b'\\x00\\x00\\x08\\x7D\\x00\\x00\\x00\\x16$lv_indev_mode_t\\x00LV_INDEV_MODE_NONE,LV_INDEV_MODE_TIMER,LV_INDEV_MODE_EVENT',b'\\x00\\x00\\x0D\\xED\\x00\\x00\\x00\\x16$lv_indev_state_t\\x00LV_INDEV_STATE_RELEASED,LV_INDEV_STATE_PRESSED',b'\\x00\\x00\\x03\\x58\\x00\\x00\\x00\\x16$lv_indev_type_t\\x00LV_INDEV_TYPE_NONE,LV_INDEV_TYPE_POINTER,LV_INDEV_TYPE_KEYPAD,LV_INDEV_TYPE_BUTTON,LV_INDEV_TYPE_ENCODER',b'\\x00\\x00\\x0D\\xF0\\x00\\x00\\x00\\x16$lv_key_t\\x00LV_KEY_UP,LV_KEY_DOWN,LV_KEY_RIGHT,LV_KEY_LEFT,LV_KEY_ESC,LV_KEY_DEL,LV_KEY_BACKSPACE,LV_KEY_ENTER,LV_KEY_NEXT,LV_KEY_PREV,LV_KEY_HOME,LV_KEY_END',b'\\x00\\x00\\x0A\\x7A\\x00\\x00\\x00\\x16$lv_keyboard_mode_t\\x00LV_KEYBOARD_MODE_TEXT_LOWER,LV_KEYBOARD_MODE_TEXT_UPPER,LV_KEYBOARD_MODE_SPECIAL,LV_KEYBOARD_MODE_NUMBER,LV_KEYBOARD_MODE_USER_1,LV_KEYBOARD_MODE_USER_2,LV_KEYBOARD_MODE_USER_3,LV_KEYBOARD_MODE_USER_4',b'\\x00\\x00\\x0A\\x84\\x00\\x00\\x00\\x16$lv_label_long_mode_t\\x00LV_LABEL_LONG_MODE_WRAP,LV_LABEL_LONG_MODE_DOTS,LV_LABEL_LONG_MODE_SCROLL,LV_LABEL_LONG_MODE_SCROLL_CIRCULAR,LV_LABEL_LONG_MODE_CLIP',b'\\x00\\x00\\x0D\\xF4\\x00\\x00\\x00\\x16$lv_layer_type_t\\x00LV_LAYER_TYPE_NONE,LV_LAYER_TYPE_SIMPLE,LV_LAYER_TYPE_TRANSFORM',b'\\x00\\x00\\x0D\\xF5\\x00\\x00\\x00\\x16$lv_layout_t\\x00LV_LAYOUT_NONE,LV_LAYOUT_FLEX,LV_LAYOUT_GRID,LV_LAYOUT_LAST',b'\\x00\\x00\\x0A\\x90\\x00\\x00\\x00\\x16$lv_menu_mode_header_t\\x00LV_MENU_HEADER_TOP_FIXED,LV_MENU_HEADER_TOP_UNFIXED,LV_MENU_HEADER_BOTTOM_FIXED',b'\\x00\\x00\\x0A\\x94\\x00\\x00\\x00\\x16$lv_menu_mode_root_back_button_t\\x00LV_MENU_ROOT_BACK_BUTTON_DISABLED,LV_MENU_ROOT_BACK_BUTTON_ENABLED',b'\\x00\\x00\\x0E\\x03\\x00\\x00\\x00\\x16$lv_obj_class_editable_t\\x00LV_OBJ_CLASS_EDITABLE_INHERIT,LV_OBJ_CLASS_EDITABLE_TRUE,LV_OBJ_CLASS_EDITABLE_FALSE',b'\\x00\\x00\\x0E\\x04\\x00\\x00\\x00\\x16$lv_obj_class_group_def_t\\x00LV_OBJ_CLASS_GROUP_DEF_INHERIT,LV_OBJ_CLASS_GROUP_DEF_TRUE,LV_OBJ_CLASS_GROUP_DEF_FALSE',b'\\x00\\x00\\x0E\\x06\\x00\\x00\\x00\\x16$lv_obj_class_theme_inheritable_t\\x00LV_OBJ_CLASS_THEME_INHERITABLE_FALSE,LV_OBJ_CLASS_THEME_INHERITABLE_TRUE',b'\\x00\\x00\\x00\\x90\\x00\\x00\\x00\\x16$lv_obj_flag_t\\x00LV_OBJ_FLAG_HIDDEN,LV_OBJ_FLAG_CLICKABLE,LV_OBJ_FLAG_CLICK_FOCUSABLE,LV_OBJ_FLAG_CHECKABLE,LV_OBJ_FLAG_SCROLLABLE,LV_OBJ_FLAG_SCROLL_ELASTIC,LV_OBJ_FLAG_SCROLL_MOMENTUM,LV_OBJ_FLAG_SCROLL_ONE,LV_OBJ_FLAG_SCROLL_CHAIN_HOR,LV_OBJ_FLAG_SCROLL_CHAIN_VER,LV_OBJ_FLAG_SCROLL_CHAIN,LV_OBJ_FLAG_SCROLL_ON_FOCUS,LV_OBJ_FLAG_SCROLL_WITH_ARROW,LV_OBJ_FLAG_SNAPPABLE,LV_OBJ_FLAG_PRESS_LOCK,LV_OBJ_FLAG_EVENT_BUBBLE,LV_OBJ_FLAG_GESTURE_BUBBLE,LV_OBJ_FLAG_ADV_HITTEST,LV_OBJ_FLAG_IGNORE_LAYOUT,LV_OBJ_FLAG_FLOATING,LV_OBJ_FLAG_SEND_DRAW_TASK_EVENTS,LV_OBJ_FLAG_OVERFLOW_VISIBLE,LV_OBJ_FLAG_FLEX_IN_NEW_TRACK,LV_OBJ_FLAG_LAYOUT_1,LV_OBJ_FLAG_LAYOUT_2,LV_OBJ_FLAG_WIDGET_1,LV_OBJ_FLAG_WIDGET_2,LV_OBJ_FLAG_USER_1,LV_OBJ_FLAG_USER_2,LV_OBJ_FLAG_USER_3,LV_OBJ_FLAG_USER_4',b'\\x00\\x00\\x0B\\xE5\\x00\\x00\\x00\\x16$lv_obj_point_transform_flag_t\\x00LV_OBJ_POINT_TRANSFORM_FLAG_NONE,LV_OBJ_POINT_TRANSFORM_FLAG_RECURSIVE,LV_OBJ_POINT_TRANSFORM_FLAG_INVERSE,LV_OBJ_POINT_TRANSFORM_FLAG_INVERSE_RECURSIVE',b'\\x00\\x00\\x0E\\x0B\\x00\\x00\\x00\\x16$lv_obj_tree_walk_res_t\\x00LV_OBJ_TREE_WALK_NEXT,LV_OBJ_TREE_WALK_SKIP_CHILDREN,LV_OBJ_TREE_WALK_END',b'\\x00\\x00\\x02\\x17\\x00\\x00\\x00\\x16$lv_palette_t\\x00LV_PALETTE_RED,LV_PALETTE_PINK,LV_PALETTE_PURPLE,LV_PALETTE_DEEP_PURPLE,LV_PALETTE_INDIGO,LV_PALETTE_BLUE,LV_PALETTE_LIGHT_BLUE,LV_PALETTE_CYAN,LV_PALETTE_TEAL,LV_PALETTE_GREEN,LV_PALETTE_LIGHT_GREEN,LV_PALETTE_LIME,LV_PALETTE_YELLOW,LV_PALETTE_AMBER,LV_PALETTE_ORANGE,LV_PALETTE_DEEP_ORANGE,LV_PALETTE_BROWN,LV_PALETTE_BLUE_GREY,LV_PALETTE_GREY,LV_PALETTE_LAST,LV_PALETTE_NONE',b'\\x00\\x00\\x0E\\x13\\x00\\x00\\x00\\x16$lv_rb_color_t\\x00LV_RB_COLOR_RED,LV_RB_COLOR_BLACK',b'\\x00\\x00\\x0E\\x16\\x00\\x00\\x00\\x16$lv_result_t\\x00LV_RESULT_INVALID,LV_RESULT_OK',b'\\x00\\x00\\x09\\x3C\\x00\\x00\\x00\\x16$lv_roller_mode_t\\x00LV_ROLLER_MODE_NORMAL,LV_ROLLER_MODE_INFINITE',b'\\x00\\x00\\x0A\\xD9\\x00\\x00\\x00\\x16$lv_scale_mode_t\\x00LV_SCALE_MODE_HORIZONTAL_TOP,LV_SCALE_MODE_HORIZONTAL_BOTTOM,LV_SCALE_MODE_VERTICAL_LEFT,LV_SCALE_MODE_VERTICAL_RIGHT,LV_SCALE_MODE_ROUND_INNER,LV_SCALE_MODE_ROUND_OUTER,LV_SCALE_MODE_LAST',b'\\x00\\x00\\x0A\\xE8\\x00\\x00\\x00\\x16$lv_screen_load_anim_t\\x00LV_SCR_LOAD_ANIM_NONE,LV_SCR_LOAD_ANIM_OVER_LEFT,LV_SCR_LOAD_ANIM_OVER_RIGHT,LV_SCR_LOAD_ANIM_OVER_TOP,LV_SCR_LOAD_ANIM_OVER_BOTTOM,LV_SCR_LOAD_ANIM_MOVE_LEFT,LV_SCR_LOAD_ANIM_MOVE_RIGHT,LV_SCR_LOAD_ANIM_MOVE_TOP,LV_SCR_LOAD_ANIM_MOVE_BOTTOM,LV_SCR_LOAD_ANIM_FADE_IN,LV_SCR_LOAD_ANIM_FADE_ON,LV_SCR_LOAD_ANIM_FADE_OUT,LV_SCR_LOAD_ANIM_OUT_LEFT,LV_SCR_LOAD_ANIM_OUT_RIGHT,LV_SCR_LOAD_ANIM_OUT_TOP,LV_SCR_LOAD_ANIM_OUT_BOTTOM',b'\\x00\\x00\\x0A\\xEF\\x00\\x00\\x00\\x16$lv_scroll_snap_t\\x00LV_SCROLL_SNAP_NONE,LV_SCROLL_SNAP_START,LV_SCROLL_SNAP_END,LV_SCROLL_SNAP_CENTER',b'\\x00\\x00\\x0A\\xF3\\x00\\x00\\x00\\x16$lv_scrollbar_mode_t\\x00LV_SCROLLBAR_MODE_OFF,LV_SCROLLBAR_MODE_ON,LV_SCROLLBAR_MODE_ACTIVE,LV_SCROLLBAR_MODE_AUTO',b'\\x00\\x00\\x0A\\xF7\\x00\\x00\\x00\\x16$lv_slider_mode_t\\x00LV_SLIDER_MODE_NORMAL,LV_SLIDER_MODE_SYMMETRICAL,LV_SLIDER_MODE_RANGE',b'\\x00\\x00\\x0A\\xFB\\x00\\x00\\x00\\x16$lv_slider_orientation_t\\x00LV_SLIDER_ORIENTATION_AUTO,LV_SLIDER_ORIENTATION_HORIZONTAL,LV_SLIDER_ORIENTATION_VERTICAL',b'\\x00\\x00\\x0A\\xFF\\x00\\x00\\x00\\x16$lv_span_mode_t\\x00LV_SPAN_MODE_FIXED,LV_SPAN_MODE_EXPAND,LV_SPAN_MODE_BREAK,LV_SPAN_MODE_LAST',b'\\x00\\x00\\x0B\\x03\\x00\\x00\\x00\\x16$lv_span_overflow_t\\x00LV_SPAN_OVERFLOW_CLIP,LV_SPAN_OVERFLOW_ELLIPSIS,LV_SPAN_OVERFLOW_LAST',b'\\x00\\x00\\x0E\\x22\\x00\\x00\\x00\\x16$lv_style_res_t\\x00LV_STYLE_RES_NOT_FOUND,LV_STYLE_RES_FOUND',b'\\x00\\x00\\x0E\\x23\\x00\\x00\\x00\\x16$lv_style_state_cmp_t\\x00LV_STYLE_STATE_CMP_SAME,LV_STYLE_STATE_CMP_DIFF_REDRAW,LV_STYLE_STATE_CMP_DIFF_DRAW_PAD,LV_STYLE_STATE_CMP_DIFF_LAYOUT',b'\\x00\\x00\\x0E\\x27\\x00\\x00\\x00\\x16$lv_subject_type_t\\x00LV_SUBJECT_TYPE_INVALID,LV_SUBJECT_TYPE_NONE,LV_SUBJECT_TYPE_INT,LV_SUBJECT_TYPE_POINTER,LV_SUBJECT_TYPE_COLOR,LV_SUBJECT_TYPE_GROUP,LV_SUBJECT_TYPE_STRING',b'\\x00\\x00\\x0B\\x23\\x00\\x00\\x00\\x16$lv_switch_orientation_t\\x00LV_SWITCH_ORIENTATION_AUTO,LV_SWITCH_ORIENTATION_HORIZONTAL,LV_SWITCH_ORIENTATION_VERTICAL',b'\\x00\\x00\\x00\\x7C\\x00\\x00\\x00\\x16$lv_table_cell_ctrl_t\\x00LV_TABLE_CELL_CTRL_NONE,LV_TABLE_CELL_CTRL_MERGE_RIGHT,LV_TABLE_CELL_CTRL_TEXT_CROP,LV_TABLE_CELL_CTRL_CUSTOM_1,LV_TABLE_CELL_CTRL_CUSTOM_2,LV_TABLE_CELL_CTRL_CUSTOM_3,LV_TABLE_CELL_CTRL_CUSTOM_4',b'\\x00\\x00\\x0B\\x27\\x00\\x00\\x00\\x16$lv_text_align_t\\x00LV_TEXT_ALIGN_AUTO,LV_TEXT_ALIGN_LEFT,LV_TEXT_ALIGN_CENTER,LV_TEXT_ALIGN_RIGHT',b'\\x00\\x00\\x0E\\x2D\\x00\\x00\\x00\\x16$lv_text_cmd_state_t\\x00LV_TEXT_CMD_STATE_WAIT,LV_TEXT_CMD_STATE_PAR,LV_TEXT_CMD_STATE_IN',b'\\x00\\x00\\x0B\\x30\\x00\\x00\\x00\\x16$lv_text_decor_t\\x00LV_TEXT_DECOR_NONE,LV_TEXT_DECOR_UNDERLINE,LV_TEXT_DECOR_STRIKETHROUGH',b'\\x00\\x00\\x01\\x2F\\x00\\x00\\x00\\x16$lv_text_flag_t\\x00LV_TEXT_FLAG_NONE,LV_TEXT_FLAG_EXPAND,LV_TEXT_FLAG_FIT,LV_TEXT_FLAG_BREAK_ALL,LV_TEXT_FLAG_RECOLOR',b'\\x00\\x00\\x04\\xA5\\x00\\x00\\x00\\x16$lv_thread_prio_t\\x00LV_THREAD_PRIO_LOWEST,LV_THREAD_PRIO_LOW,LV_THREAD_PRIO_MID,LV_THREAD_PRIO_HIGH,LV_THREAD_PRIO_HIGHEST',b'\\x00\\x00\\x00\\x2C\\x00\\x00\\x00\\x16_lvimage_flags_t\\x00LV_IMAGE_FLAGS_PREMULTIPLIED,LV_IMAGE_FLAGS_COMPRESSED,LV_IMAGE_FLAGS_ALLOCATED,LV_IMAGE_FLAGS_MODIFIABLE,LV_IMAGE_FLAGS_CUSTOM_DRAW,LV_IMAGE_FLAGS_USER1,LV_IMAGE_FLAGS_USER2,LV_IMAGE_FLAGS_USER3,LV_IMAGE_FLAGS_USER4,LV_IMAGE_FLAGS_USER5,LV_IMAGE_FLAGS_USER6,LV_IMAGE_FLAGS_USER7,LV_IMAGE_FLAGS_USER8'),     _typenames = (b'\\x00\\x00\\x00\\xC0CONDITION_VARIABLE',b'\\x00\\x00\\x00\\xC0CRITICAL_SECTION',b'\\x00\\x00\\x00\\xC0HANDLE',b'\\x00\\x00\\x00\\xC0HWND',b'\\x00\\x00\\x0D\\x55MirBlob',b'\\x00\\x00\\x0D\\x56MirBufferStream',b'\\x00\\x00\\x0D\\x57MirConnection',b'\\x00\\x00\\x0D\\x58MirDisplayConfig',b'\\x00\\x00\\x00\\xC0MirEGLNativeDisplayType',b'\\x00\\x00\\x00\\xC0MirEGLNativeWindowType',b'\\x00\\x00\\x0D\\x59MirPersistentId',b'\\x00\\x00\\x0D\\x5AMirPromptSession',b'\\x00\\x00\\x0D\\x5BMirScreencast',b'\\x00\\x00\\x0D\\x5CMirSurface',b'\\x00\\x00\\x0D\\x5DMirSurfaceSpec',b'\\x00\\x00\\x00\\x55bool',b'\\x00\\x00\\x06\\xFClv_align_t',b'\\x00\\x00\\x0D\\x6Alv_anim_bezier3_para_t',b'\\x00\\x00\\x06\\xCBlv_anim_completed_cb_t',b'\\x00\\x00\\x00\\x08lv_anim_custom_exec_cb_t',b'\\x00\\x00\\x06\\xCBlv_anim_deleted_cb_t',b'\\x00\\x00\\x00\\x55lv_anim_enable_t',b'\\x00\\x00\\x00\\xCElv_anim_exec_xcb_t',b'\\x00\\x00\\x06\\xB2lv_anim_get_value_cb_t',b'\\x00\\x00\\x06\\xB6lv_anim_path_cb_t',b'\\x00\\x00\\x06\\xCBlv_anim_ready_cb_t',b'\\x00\\x00\\x06\\xCBlv_anim_start_cb_t',b'\\x00\\x00\\x0D\\x6Blv_anim_t',b'\\x00\\x00\\x0D\\x6Clv_anim_timeline_t',b'\\x00\\x00\\x0D\\x6Dlv_animimg_part_t',b'\\x00\\x00\\x0D\\x6Elv_animimg_t',b'\\x00\\x00\\x09\\x83lv_arc_mode_t',b'\\x00\\x00\\x0D\\x6Flv_arc_t',b'\\x00\\x00\\x0D\\x70lv_area_t',b'\\x00\\x00\\x0D\\x71lv_array_t',b'\\x00\\x00\\x04\\xA6lv_async_cb_t',b'\\x00\\x00\\x0D\\x72lv_bar_anim_t',b'\\x00\\x00\\x09\\x92lv_bar_mode_t',b'\\x00\\x00\\x09\\x96lv_bar_orientation_t',b'\\x00\\x00\\x0D\\x73lv_bar_t',b'\\x00\\x00\\x0D\\x74lv_barcode_t',b'\\x00\\x00\\x09\\x9Alv_base_dir_t',b'\\x00\\x00\\x09\\x9Flv_blend_mode_t',b'\\x00\\x00\\x09\\xA8lv_border_side_t',b'\\x00\\x00\\x00\\x76lv_btnmatrix_ctrl_t',b'\\x00\\x00\\x0D\\x75lv_button_t',b'\\x00\\x00\\x0D\\x60lv_buttonmatrix_button_draw_cb_t',b'\\x00\\x00\\x00\\x76lv_buttonmatrix_ctrl_t',b'\\x00\\x00\\x0D\\x76lv_buttonmatrix_t',b'\\x00\\x00\\x0D\\x78lv_cache_entry_t',b'\\x00\\x00\\x0D\\x79lv_cache_t',b'\\x00\\x00\\x0D\\x7Blv_calendar_date_t',b'\\x00\\x00\\x0D\\x7Clv_calendar_t',b'\\x00\\x00\\x0D\\x7Dlv_canvas_t',b'\\x00\\x00\\x01\\xC5lv_chart_axis_t',b'\\x00\\x00\\x0D\\x7Elv_chart_cursor_t',b'\\x00\\x00\\x0D\\x7Flv_chart_series_t',b'\\x00\\x00\\x0D\\x80lv_chart_t',b'\\x00\\x00\\x0A\\x0Elv_chart_type_t',b'\\x00\\x00\\x0A\\x12lv_chart_update_mode_t',b'\\x00\\x00\\x0D\\x81lv_checkbox_t',b'\\x00\\x00\\x05\\x70lv_circle_buf_fill_cb_t',b'\\x00\\x00\\x0D\\x82lv_circle_buf_t',b'\\x00\\x00\\x05\\xE4lv_color16_t',b'\\x00\\x00\\x0D\\x83lv_color16a_t',b'\\x00\\x00\\x00\\x15lv_color32_t',b'\\x00\\x00\\x07\\x1Elv_color_filter_cb_t',b'\\x00\\x00\\x0D\\x84lv_color_filter_dsc_t',b'\\x00\\x00\\x00\\x19lv_color_format_t',b'\\x00\\x00\\x0D\\x85lv_color_hsv_t',b'\\x00\\x00\\x00\\x1Clv_color_t',b'\\x00\\x00\\x00\\xC9lv_coord_t',b'\\x00\\x00\\x0D\\x86lv_cover_check_info_t',b'\\x00\\x00\\x07\\xEElv_cover_res_t',b'\\x00\\x00\\x0D\\x41lv_delay_cb_t',b'\\x00\\x00\\x01\\xC0lv_dir_t',b'\\x00\\x00\\x07\\x43lv_disp_render_t',b'\\x00\\x00\\x07\\x47lv_disp_rotation_t',b'\\x00\\x00\\x0D\\x87lv_disp_t',b'\\x00\\x00\\x07\\x6Flv_display_flush_cb_t',b'\\x00\\x00\\x07\\x6Blv_display_flush_wait_cb_t',b'\\x00\\x00\\x07\\x43lv_display_render_mode_t',b'\\x00\\x00\\x07\\x47lv_display_rotation_t',b'\\x00\\x00\\x0D\\x87lv_display_t',b'\\x00\\x00\\x0D\\x88lv_draw_arc_dsc_t',b'\\x00\\x00\\x0D\\x89lv_draw_border_dsc_t',b'\\x00\\x00\\x0D\\x8Alv_draw_box_shadow_dsc_t',b'\\x00\\x00\\x07\\x87lv_draw_buf_align_cb',b'\\x00\\x00\\x07\\x88lv_draw_buf_cache_operation_cb',b'\\x00\\x00\\x04\\xA6lv_draw_buf_free_cb',b'\\x00\\x00\\x0D\\x8Blv_draw_buf_handlers_t',b'\\x00\\x00\\x07\\x85lv_draw_buf_malloc_cb',b'\\x00\\x00\\x0D\\x8Clv_draw_buf_t',b'\\x00\\x00\\x07\\x8Alv_draw_buf_width_to_stride_cb',b'\\x00\\x00\\x0D\\x8Dlv_draw_dsc_base_t',b'\\x00\\x00\\x0D\\x8Elv_draw_fill_dsc_t',b'\\x00\\x00\\x07\\xCBlv_draw_glyph_cb_t',b'\\x00\\x00\\x0D\\x8Flv_draw_glyph_dsc_t',b'\\x00\\x00\\x0E\\x53lv_draw_image_core_cb',b'\\x00\\x00\\x0D\\x90lv_draw_image_dsc_t',b'\\x00\\x00\\x0D\\x91lv_draw_image_sup_t',b'\\x00\\x00\\x0D\\x92lv_draw_label_dsc_t',b'\\x00\\x00\\x0D\\x94lv_draw_label_hint_t',b'\\x00\\x00\\x0D\\x95lv_draw_letter_dsc_t',b'\\x00\\x00\\x0D\\x96lv_draw_line_dsc_t',b'\\x00\\x00\\x0D\\x97lv_draw_mask_rect_dsc_t',b'\\x00\\x00\\x0D\\x98lv_draw_mask_t',b'\\x00\\x00\\x0D\\x99lv_draw_rect_dsc_t',b'\\x00\\x00\\x0D\\x9Alv_draw_sw_blend_dsc_t',b'\\x00\\x00\\x0D\\x9Blv_draw_sw_blend_fill_dsc_t',b'\\x00\\x00\\x0D\\x9Clv_draw_sw_blend_image_dsc_t',b'\\x00\\x00\\x0D\\x9Dlv_draw_sw_mask_angle_param_t',b'\\x00\\x00\\x0D\\x9Elv_draw_sw_mask_common_dsc_t',b'\\x00\\x00\\x0D\\x9Flv_draw_sw_mask_fade_param_t',b'\\x00\\x00\\x0D\\xA0lv_draw_sw_mask_line_param_t',b'\\x00\\x00\\x0D\\xA1lv_draw_sw_mask_map_param_t',b'\\x00\\x00\\x0D\\xA2lv_draw_sw_mask_radius_param_t',b'\\x00\\x00\\x0D\\xA3lv_draw_sw_unit_t',b'\\x00\\x00\\x0D\\xA4lv_draw_task_state_t',b'\\x00\\x00\\x0D\\xA5lv_draw_task_t',b'\\x00\\x00\\x0D\\xA6lv_draw_task_type_t',b'\\x00\\x00\\x0D\\xA7lv_draw_triangle_dsc_t',b'\\x00\\x00\\x0D\\xA8lv_draw_unit_t',b'\\x00\\x00\\x0D\\xA9lv_draw_vector_task_dsc_t',b'\\x00\\x00\\x0D\\xAAlv_dropdown_list_t',b'\\x00\\x00\\x0D\\xABlv_dropdown_t',b'\\x00\\x00\\x04\\xB4lv_evdev_discovery_cb_t',b'\\x00\\x00\\x0D\\xAClv_evdev_discovery_t',b'\\x00\\x00\\x08\\x70lv_evdev_type_t',b'\\x00\\x00\\x02\\xAAlv_event_cb_t',b'\\x00\\x00\\x00\\xF3lv_event_code_t',b'\\x00\\x00\\x0D\\xADlv_event_dsc_t',b'\\x00\\x00\\x0D\\xAElv_event_list_t',b'\\x00\\x00\\x0D\\xAFlv_event_t',b'\\x00\\x00\\x0D\\xB0lv_ffmpeg_player_t',b'\\x00\\x00\\x0D\\xB1lv_file_explorer_t',b'\\x00\\x00\\x0A\\x31lv_flex_align_t',b'\\x00\\x00\\x0A\\x3Clv_flex_flow_t',b'\\x00\\x00\\x0D\\xB2lv_font_fmt_txt_bitmap_format_t',b'\\x00\\x00\\x0D\\xB4lv_font_fmt_txt_cmap_t',b'\\x00\\x00\\x0D\\xB5lv_font_fmt_txt_cmap_type_t',b'\\x00\\x00\\x0D\\xB6lv_font_fmt_txt_dsc_t',b'\\x00\\x00\\x0D\\xB8lv_font_fmt_txt_glyph_dsc_t',b'\\x00\\x00\\x0D\\xB9lv_font_fmt_txt_kern_classes_t',b'\\x00\\x00\\x0D\\xBAlv_font_fmt_txt_kern_pair_t',b'\\x00\\x00\\x0D\\xBBlv_font_glyph_dsc_t',b'\\x00\\x00\\x0D\\xBClv_font_glyph_format_t',b'\\x00\\x00\\x02\\xC6lv_font_kerning_t',b'\\x00\\x00\\x0D\\xBDlv_font_subpx_t',b'\\x00\\x00\\x0D\\xBElv_font_t',b'\\x00\\x00\\x0D\\xBFlv_fpoint_t',b'\\x00\\x00\\x0D\\xC0lv_fragment_class_t',b'\\x00\\x00\\x0D\\xC1lv_fragment_managed_states_t',b'\\x00\\x00\\x0D\\xC2lv_fragment_t',b'\\x00\\x00\\x0D\\xC3lv_freetype_outline_event_param_t',b'\\x00\\x00\\x0D\\xC4lv_freetype_outline_vector_t',b'\\x00\\x00\\x0D\\xC5lv_fs_dir_t',b'\\x00\\x00\\x0D\\xC6lv_fs_drv_t',b'\\x00\\x00\\x0D\\xC8lv_fs_file_cache_t',b'\\x00\\x00\\x0D\\xC9lv_fs_file_t',b'\\x00\\x00\\x03\\x12lv_fs_mode_t',b'\\x00\\x00\\x0D\\xCAlv_fs_path_ex_t',b'\\x00\\x00\\x0D\\xD1lv_fs_res_t',b'\\x00\\x00\\x02\\xFClv_fs_whence_t',b'\\x00\\x00\\x0D\\xD2lv_gif_t',b'\\x00\\x00\\x0D\\xD3lv_glfw_texture_t',b'\\x00\\x00\\x0D\\xD4lv_glfw_window_t',b'\\x00\\x00\\x0A\\x4Alv_grad_dir_t',b'\\x00\\x00\\x0D\\xD5lv_grad_dsc_t',b'\\x00\\x00\\x08\\x1Alv_grad_extend_t',b'\\x00\\x00\\x0D\\xD6lv_grad_stop_t',b'\\x00\\x00\\x0A\\x54lv_grid_align_t',b'\\x00\\x00\\x08\\x38lv_group_edge_cb_t',b'\\x00\\x00\\x08\\x34lv_group_focus_cb_t',b'\\x00\\x00\\x08\\x2Clv_group_refocus_policy_t',b'\\x00\\x00\\x0D\\xD9lv_group_t',b'\\x00\\x00\\x0D\\xDBlv_hit_test_info_t',b'\\x00\\x00\\x0A\\x67lv_image_align_t',b'\\x00\\x00\\x0D\\xDClv_image_cache_data_t',b'\\x00\\x00\\x0D\\xDDlv_image_compress_t',b'\\x00\\x00\\x0D\\xDElv_image_decoder_args_t',b'\\x00\\x00\\x08\\x52lv_image_decoder_close_f_t',b'\\x00\\x00\\x0E\\x55lv_image_decoder_custom_draw_t',b'\\x00\\x00\\x0D\\xDFlv_image_decoder_dsc_t',b'\\x00\\x00\\x08\\x4Alv_image_decoder_get_area_cb_t',b'\\x00\\x00\\x08\\x4Elv_image_decoder_info_f_t',b'\\x00\\x00\\x08\\x46lv_image_decoder_open_f_t',b'\\x00\\x00\\x0D\\xE0lv_image_decoder_t',b'\\x00\\x00\\x0D\\xE1lv_image_dsc_t',b'\\x00\\x00\\x00\\x2Clv_image_flags_t',b'\\x00\\x00\\x0D\\xE2lv_image_header_cache_data_t',b'\\x00\\x00\\x0D\\xE3lv_image_header_t',b'\\x00\\x00\\x0D\\xE4lv_image_src_t',b'\\x00\\x00\\x0D\\xE5lv_image_t',b'\\x00\\x00\\x0D\\xE6lv_imagebutton_src_info_t',b'\\x00\\x00\\x06\\x90lv_imagebutton_state_t',b'\\x00\\x00\\x0D\\xE7lv_imagebutton_t',b'\\x00\\x00\\x0D\\xE8lv_ime_pinyin_t',b'\\x00\\x00\\x0D\\xE1lv_img_dsc_t',b'\\x00\\x00\\x0D\\xE9lv_indev_data_t',b'\\x00\\x00\\x0D\\xEAlv_indev_gesture_type_t',b'\\x00\\x00\\x08\\x7Dlv_indev_mode_t',b'\\x00\\x00\\x08\\x9Flv_indev_read_cb_t',b'\\x00\\x00\\x0D\\xEDlv_indev_state_t',b'\\x00\\x00\\x0D\\xEElv_indev_t',b'\\x00\\x00\\x03\\x58lv_indev_type_t',b'\\x00\\x00\\x0D\\x69lv_intptr_t',b'\\x00\\x00\\x04\\xA6lv_iter_inspect_cb',b'\\x00\\x00\\x03\\x64lv_iter_next_cb',b'\\x00\\x00\\x0D\\xEFlv_iter_t',b'\\x00\\x00\\x0D\\xF0lv_key_t',b'\\x00\\x00\\x0A\\x7Alv_keyboard_mode_t',b'\\x00\\x00\\x0D\\xF1lv_keyboard_t',b'\\x00\\x00\\x0A\\x84lv_label_long_mode_t',b'\\x00\\x00\\x0D\\xF2lv_label_t',b'\\x00\\x00\\x0D\\xF3lv_layer_t',b'\\x00\\x00\\x0D\\xF4lv_layer_type_t',b'\\x00\\x00\\x0D\\xF5lv_layout_t',b'\\x00\\x00\\x05\\xDElv_layout_update_cb_t',b'\\x00\\x00\\x0D\\xF6lv_led_t',b'\\x00\\x00\\x0D\\xF7lv_libinput_event_t',b'\\x00\\x00\\x0D\\xF8lv_libinput_t',b'\\x00\\x00\\x0D\\xF9lv_line_t',b'\\x00\\x00\\x00\\x80lv_ll_node_t',b'\\x00\\x00\\x0D\\xFAlv_ll_t',b'\\x00\\x00\\x01\\x86lv_log_level_t',b'\\x00\\x00\\x0D\\xFBlv_matrix_t',b'\\x00\\x00\\x0D\\xFClv_mem_monitor_t',b'\\x00\\x00\\x00\\xC0lv_mem_pool_t',b'\\x00\\x00\\x0D\\xFDlv_menu_history_t',b'\\x00\\x00\\x0D\\xFElv_menu_load_page_event_data_t',b'\\x00\\x00\\x0A\\x90lv_menu_mode_header_t',b'\\x00\\x00\\x0A\\x94lv_menu_mode_root_back_button_t',b'\\x00\\x00\\x0D\\xFFlv_menu_page_t',b'\\x00\\x00\\x0E\\x00lv_menu_t',b'\\x00\\x00\\x0E\\x01lv_monkey_config_t',b'\\x00\\x00\\x0E\\x02lv_msgbox_t',b'\\x00\\x00\\x00\\xC0lv_mutex_t',b'\\x00\\x00\\x0E\\x03lv_obj_class_editable_t',b'\\x00\\x00\\x0E\\x56lv_obj_class_event_cb_t',b'\\x00\\x00\\x0E\\x04lv_obj_class_group_def_t',b'\\x00\\x00\\x0E\\x05lv_obj_class_t',b'\\x00\\x00\\x0E\\x06lv_obj_class_theme_inheritable_t',b'\\x00\\x00\\x00\\x90lv_obj_flag_t',b'\\x00\\x00\\x0B\\xE5lv_obj_point_transform_flag_t',b'\\x00\\x00\\x0E\\x07lv_obj_spec_attr_t',b'\\x00\\x00\\x0E\\x08lv_obj_style_t',b'\\x00\\x00\\x0E\\x09lv_obj_style_transition_dsc_t',b'\\x00\\x00\\x0E\\x0Alv_obj_t',b'\\x00\\x00\\x0A\\xC6lv_obj_tree_walk_cb_t',b'\\x00\\x00\\x0E\\x0Blv_obj_tree_walk_res_t',b'\\x00\\x00\\x03\\xDElv_observer_cb_t',b'\\x00\\x00\\x0E\\x0Clv_observer_t',b'\\x00\\x00\\x00\\x80lv_opa_t',b'\\x00\\x00\\x02\\x17lv_palette_t',b'\\x00\\x00\\x00\\x0Flv_part_t',b'\\x00\\x00\\x0E\\x0Dlv_point_precise_t',b'\\x00\\x00\\x0E\\x10lv_point_t',b'\\x00\\x00\\x0E\\x11lv_profiler_builtin_config_t',b'\\x00\\x00\\x00\\x0Flv_prop_id_t',b'\\x00\\x00\\x0E\\x12lv_qrcode_t',b'\\x00\\x00\\x0E\\x13lv_rb_color_t',b'\\x00\\x00\\x01\\x86lv_rb_compare_res_t',b'\\x00\\x00\\x00\\xA1lv_rb_compare_t',b'\\x00\\x00\\x0E\\x14lv_rb_node_t',b'\\x00\\x00\\x0E\\x15lv_rb_t',b'\\x00\\x00\\x0E\\x16lv_res_t',b'\\x00\\x00\\x0E\\x16lv_result_t',b'\\x00\\x00\\x0E\\x17lv_rlottie_t',b'\\x00\\x00\\x09\\x3Clv_roller_mode_t',b'\\x00\\x00\\x0E\\x18lv_roller_t',b'\\x00\\x00\\x0A\\xD9lv_scale_mode_t',b'\\x00\\x00\\x0E\\x19lv_scale_section_t',b'\\x00\\x00\\x0E\\x1Alv_scale_t',b'\\x00\\x00\\x0A\\xE8lv_scr_load_anim_t',b'\\x00\\x00\\x0A\\xE8lv_screen_load_anim_t',b'\\x00\\x00\\x0A\\xEFlv_scroll_snap_t',b'\\x00\\x00\\x0A\\xF3lv_scrollbar_mode_t',b'\\x00\\x00\\x0A\\xF7lv_slider_mode_t',b'\\x00\\x00\\x0A\\xFBlv_slider_orientation_t',b'\\x00\\x00\\x0E\\x1Blv_slider_t',b'\\x00\\x00\\x0E\\x1Clv_span_coords_t',b'\\x00\\x00\\x0A\\xFFlv_span_mode_t',b'\\x00\\x00\\x0B\\x03lv_span_overflow_t',b'\\x00\\x00\\x0E\\x1Dlv_span_t',b'\\x00\\x00\\x0E\\x1Elv_spangroup_t',b'\\x00\\x00\\x0E\\x1Flv_spinbox_t',b'\\x00\\x00\\x0E\\x20lv_sqrt_res_t',b'\\x00\\x00\\x00\\x98lv_state_t',b'\\x00\\x00\\x0E\\x21lv_style_const_prop_t',b'\\x00\\x00\\x00\\x80lv_style_prop_t',b'\\x00\\x00\\x0E\\x22lv_style_res_t',b'\\x00\\x00\\x00\\x0Flv_style_selector_t',b'\\x00\\x00\\x0E\\x23lv_style_state_cmp_t',b'\\x00\\x00\\x0E\\x24lv_style_t',b'\\x00\\x00\\x0E\\x25lv_style_transition_dsc_t',b'\\x00\\x00\\x04\\xF5lv_style_value_t',b'\\x00\\x00\\x0E\\x26lv_subject_t',b'\\x00\\x00\\x0E\\x27lv_subject_type_t',b'\\x00\\x00\\x0E\\x28lv_subject_value_t',b'\\x00\\x00\\x0B\\x23lv_switch_orientation_t',b'\\x00\\x00\\x0E\\x29lv_switch_t',b'\\x00\\x00\\x00\\x7Clv_table_cell_ctrl_t',b'\\x00\\x00\\x0E\\x2Alv_table_cell_t',b'\\x00\\x00\\x0E\\x2Blv_table_t',b'\\x00\\x00\\x0E\\x2Clv_tabview_t',b'\\x00\\x00\\x0B\\x27lv_text_align_t',b'\\x00\\x00\\x0E\\x2Dlv_text_cmd_state_t',b'\\x00\\x00\\x0B\\x30lv_text_decor_t',b'\\x00\\x00\\x01\\x2Flv_text_flag_t',b'\\x00\\x00\\x0E\\x2Elv_textarea_t',b'\\x00\\x00\\x0C\\xDDlv_theme_apply_cb_t',b'\\x00\\x00\\x0E\\x2Flv_theme_t',b'\\x00\\x00\\x04\\xA5lv_thread_prio_t',b'\\x00\\x00\\x0E\\x30lv_thread_sync_t',b'\\x00\\x00\\x00\\xC0lv_thread_t',b'\\x00\\x00\\x0D\\x02lv_tick_get_cb_t',b'\\x00\\x00\\x0E\\x31lv_tileview_t',b'\\x00\\x00\\x0E\\x32lv_tileview_tile_t',b'\\x00\\x00\\x05\\x2Clv_timer_cb_t',b'\\x00\\x00\\x04\\xA6lv_timer_handler_resume_cb_t',b'\\x00\\x00\\x0E\\x33lv_timer_t',b'\\x00\\x00\\x00\\xBFlv_tree_after_cb_t',b'\\x00\\x00\\x00\\xBDlv_tree_before_cb_t',b'\\x00\\x00\\x0E\\x34lv_tree_class_t',b'\\x00\\x00\\x0E\\x36lv_tree_node_t',b'\\x00\\x00\\x00\\xBDlv_tree_traverse_cb_t',b'\\x00\\x00\\x00\\x80lv_tree_walk_mode_t',b'\\x00\\x00\\x0E\\x4Alv_uintptr_t',b'\\x00\\x00\\x00\\xC9lv_value_precise_t',b'\\x00\\x00\\x0E\\x37lv_vector_draw_dsc_t',b'\\x00\\x00\\x0E\\x38lv_vector_dsc_t',b'\\x00\\x00\\x0E\\x39lv_vector_fill_dsc_t',b'\\x00\\x00\\x0E\\x3Alv_vector_gradient_t',b'\\x00\\x00\\x0E\\x3Blv_vector_path_t',b'\\x00\\x00\\x0E\\x3Clv_vector_stroke_dsc_t',b'\\x00\\x00\\x0E\\x3Dlv_win_t',b'\\x00\\x00\\x0E\\x3Elv_xkb_t',b'\\x00\\x00\\x0E\\x3Flv_xml_component_ctx_t',b'\\x00\\x00\\x0E\\x40lv_xml_parser_state_t',b'\\x00\\x00\\x0E\\x41lv_yuv_buf_t',b'\\x00\\x00\\x0E\\x42lv_yuv_plane_t',b'\\x00\\x00\\x0E\\x5Axcb_connection_t',b'\\x00\\x00\\x00\\x0Fxcb_visualid_t',b'\\x00\\x00\\x00\\x0Fxcb_window_t'), )")
    _lvgl = ffi.dlopen(_library_path)


################
# Enums

from enum import Enum

class OPA(Enum):
    TRANSP = 0
    _0 = 0
    _10 = 25
    _20 = 51
    _30 = 76
    _40 = 102
    _50 = 127
    _60 = 153
    _70 = 178
    _80 = 204
    _90 = 229
    _100 = 255
    COVER = 255

class TREE_WALK(Enum):
    PRE_ORDER = 0
    POST_ORDER = 1

class STR_SYMBOL(Enum):
    BULLET = 0
    AUDIO = 1
    VIDEO = 2
    LIST = 3
    OK = 4
    CLOSE = 5
    POWER = 6
    SETTINGS = 7
    HOME = 8
    DOWNLOAD = 9
    DRIVE = 10
    REFRESH = 11
    MUTE = 12
    VOLUME_MID = 13
    VOLUME_MAX = 14
    IMAGE = 15
    TINT = 16
    PREV = 17
    PLAY = 18
    PAUSE = 19
    STOP = 20
    NEXT = 21
    EJECT = 22
    LEFT = 23
    RIGHT = 24
    PLUS = 25
    MINUS = 26
    EYE_OPEN = 27
    EYE_CLOSE = 28
    WARNING = 29
    SHUFFLE = 30
    UP = 31
    DOWN = 32
    LOOP = 33
    DIRECTORY = 34
    UPLOAD = 35
    CALL = 36
    CUT = 37
    COPY = 38
    SAVE = 39
    BARS = 40
    ENVELOPE = 41
    CHARGE = 42
    PASTE = 43
    BELL = 44
    KEYBOARD = 45
    GPS = 46
    FILE = 47
    WIFI = 48
    BATTERY_FULL = 49
    BATTERY_3 = 50
    BATTERY_2 = 51
    BATTERY_1 = 52
    BATTERY_EMPTY = 53
    USB = 54
    BLUETOOTH = 55
    TRASH = 56
    EDIT = 57
    BACKSPACE = 58
    SD_CARD = 59
    NEW_LINE = 60
    DUMMY = 61

class STYLE(Enum):
    PROP_INV = 0
    WIDTH = 1
    HEIGHT = 2
    LENGTH = 3
    MIN_WIDTH = 4
    MAX_WIDTH = 5
    MIN_HEIGHT = 6
    MAX_HEIGHT = 7
    X = 8
    Y = 9
    ALIGN = 10
    RADIUS = 12
    RADIAL_OFFSET = 13
    PAD_RADIAL = 14
    PAD_TOP = 16
    PAD_BOTTOM = 17
    PAD_LEFT = 18
    PAD_RIGHT = 19
    PAD_ROW = 20
    PAD_COLUMN = 21
    LAYOUT = 22
    MARGIN_TOP = 24
    MARGIN_BOTTOM = 25
    MARGIN_LEFT = 26
    MARGIN_RIGHT = 27
    BG_COLOR = 28
    BG_OPA = 29
    BG_GRAD_DIR = 32
    BG_MAIN_STOP = 33
    BG_GRAD_STOP = 34
    BG_GRAD_COLOR = 35
    BG_MAIN_OPA = 36
    BG_GRAD_OPA = 37
    BG_GRAD = 38
    BASE_DIR = 39
    BG_IMAGE_SRC = 40
    BG_IMAGE_OPA = 41
    BG_IMAGE_RECOLOR = 42
    BG_IMAGE_RECOLOR_OPA = 43
    BG_IMAGE_TILED = 44
    CLIP_CORNER = 45
    BORDER_WIDTH = 48
    BORDER_COLOR = 49
    BORDER_OPA = 50
    BORDER_SIDE = 52
    BORDER_POST = 53
    OUTLINE_WIDTH = 56
    OUTLINE_COLOR = 57
    OUTLINE_OPA = 58
    OUTLINE_PAD = 59
    SHADOW_WIDTH = 60
    SHADOW_COLOR = 61
    SHADOW_OPA = 62
    SHADOW_OFFSET_X = 64
    SHADOW_OFFSET_Y = 65
    SHADOW_SPREAD = 66
    IMAGE_OPA = 68
    IMAGE_RECOLOR = 69
    IMAGE_RECOLOR_OPA = 70
    LINE_WIDTH = 72
    LINE_DASH_WIDTH = 73
    LINE_DASH_GAP = 74
    LINE_ROUNDED = 75
    LINE_COLOR = 76
    LINE_OPA = 77
    ARC_WIDTH = 80
    ARC_ROUNDED = 81
    ARC_COLOR = 82
    ARC_OPA = 83
    ARC_IMAGE_SRC = 84
    TEXT_COLOR = 88
    TEXT_OPA = 89
    TEXT_FONT = 90
    TEXT_LETTER_SPACE = 91
    TEXT_LINE_SPACE = 92
    TEXT_DECOR = 93
    TEXT_ALIGN = 94
    TEXT_OUTLINE_STROKE_WIDTH = 95
    TEXT_OUTLINE_STROKE_OPA = 96
    TEXT_OUTLINE_STROKE_COLOR = 97
    OPA = 98
    OPA_LAYERED = 99
    COLOR_FILTER_DSC = 100
    COLOR_FILTER_OPA = 101
    ANIM = 102
    ANIM_DURATION = 103
    TRANSITION = 104
    BLEND_MODE = 105
    TRANSFORM_WIDTH = 106
    TRANSFORM_HEIGHT = 107
    TRANSLATE_X = 108
    TRANSLATE_Y = 109
    TRANSFORM_SCALE_X = 110
    TRANSFORM_SCALE_Y = 111
    TRANSFORM_ROTATION = 112
    TRANSFORM_PIVOT_X = 113
    TRANSFORM_PIVOT_Y = 114
    TRANSFORM_SKEW_X = 115
    TRANSFORM_SKEW_Y = 116
    BITMAP_MASK_SRC = 117
    ROTARY_SENSITIVITY = 118
    TRANSLATE_RADIAL = 119
    RECOLOR = 120
    RECOLOR_OPA = 121
    FLEX_FLOW = 122
    FLEX_MAIN_PLACE = 123
    FLEX_CROSS_PLACE = 124
    FLEX_TRACK_PLACE = 125
    FLEX_GROW = 126
    GRID_COLUMN_ALIGN = 127
    GRID_ROW_ALIGN = 128
    GRID_ROW_DSC_ARRAY = 129
    GRID_COLUMN_DSC_ARRAY = 130
    GRID_CELL_COLUMN_POS = 131
    GRID_CELL_COLUMN_SPAN = 132
    GRID_CELL_X_ALIGN = 133
    GRID_CELL_ROW_POS = 134
    GRID_CELL_ROW_SPAN = 135
    GRID_CELL_Y_ALIGN = 136
    LAST_BUILT_IN_PROP = 137
    NUM_BUILT_IN_PROPS = 138
    PROP_ANY = 255
    PROP_CONST = 255

class STATE(Enum):
    DEFAULT = 0
    CHECKED = 1
    FOCUSED = 2
    FOCUS_KEY = 4
    EDITED = 8
    HOVERED = 16
    PRESSED = 32
    SCROLLED = 64
    DISABLED = 128
    USER_1 = 4096
    USER_2 = 8192
    USER_3 = 16384
    USER_4 = 32768
    ANY = 65535

class PART(Enum):
    MAIN = 0
    SCROLLBAR = 65536
    INDICATOR = 131072
    KNOB = 196608
    SELECTED = 262144
    ITEMS = 327680
    CURSOR = 393216
    CUSTOM_FIRST = 524288
    ANY = 983040

class PART(Enum):
    TEXTAREA_PLACEHOLDER = 524288

class RESULT(Enum):
    INVALID = 0
    OK = 1

class RB_COLOR(Enum):
    RED = 0
    BLACK = 1

class ALIGN(Enum):
    DEFAULT = 0
    TOP_LEFT = 1
    TOP_MID = 2
    TOP_RIGHT = 3
    BOTTOM_LEFT = 4
    BOTTOM_MID = 5
    BOTTOM_RIGHT = 6
    LEFT_MID = 7
    RIGHT_MID = 8
    CENTER = 9
    OUT_TOP_LEFT = 10
    OUT_TOP_MID = 11
    OUT_TOP_RIGHT = 12
    OUT_BOTTOM_LEFT = 13
    OUT_BOTTOM_MID = 14
    OUT_BOTTOM_RIGHT = 15
    OUT_LEFT_TOP = 16
    OUT_LEFT_MID = 17
    OUT_LEFT_BOTTOM = 18
    OUT_RIGHT_TOP = 19
    OUT_RIGHT_MID = 20
    OUT_RIGHT_BOTTOM = 21

class DIR(Enum):
    NONE = 0
    LEFT = 1
    RIGHT = 2
    TOP = 4
    BOTTOM = 8
    HOR = 3
    VER = 12
    ALL = 15

class COLOR_FORMAT(Enum):
    UNKNOWN = 0
    RAW = 1
    RAW_ALPHA = 2
    L8 = 6
    I1 = 7
    I2 = 8
    I4 = 9
    I8 = 10
    A8 = 14
    RGB565 = 18
    ARGB8565 = 19
    RGB565A8 = 20
    AL88 = 21
    RGB888 = 15
    ARGB8888 = 16
    XRGB8888 = 17
    A1 = 11
    A2 = 12
    A4 = 13
    ARGB1555 = 22
    ARGB4444 = 23
    ARGB2222 = 24
    YUV_START = 32
    I420 = 32
    I422 = 33
    I444 = 34
    I400 = 35
    NV21 = 36
    NV12 = 37
    YUY2 = 38
    UYVY = 39
    YUV_END = 39
    PROPRIETARY_START = 48
    NEMA_TSC_START = 48
    NEMA_TSC4 = 48
    NEMA_TSC6 = 49
    NEMA_TSC6A = 50
    NEMA_TSC6AP = 51
    NEMA_TSC12 = 52
    NEMA_TSC12A = 53
    NEMA_TSC_END = 53
    NATIVE = 18
    NATIVE_WITH_ALPHA = 20

class PALETTE(Enum):
    RED = 0
    PINK = 1
    PURPLE = 2
    DEEP_PURPLE = 3
    INDIGO = 4
    BLUE = 5
    LIGHT_BLUE = 6
    CYAN = 7
    TEAL = 8
    GREEN = 9
    LIGHT_GREEN = 10
    LIME = 11
    YELLOW = 12
    AMBER = 13
    ORANGE = 14
    DEEP_ORANGE = 15
    BROWN = 16
    BLUE_GREY = 17
    GREY = 18
    LAST = 19
    NONE = 255

class IMAGE_FLAGS(Enum):
    PREMULTIPLIED = 1
    COMPRESSED = 8
    ALLOCATED = 16
    MODIFIABLE = 32
    CUSTOM_DRAW = 64
    USER1 = 256
    USER2 = 512
    USER3 = 1024
    USER4 = 2048
    USER5 = 4096
    USER6 = 8192
    USER7 = 16384
    USER8 = 32768

class IMAGE_COMPRESS(Enum):
    NONE = 0
    RLE = 1
    LZ4 = 2

class FONT_GLYPH_FORMAT(Enum):
    NONE = 0
    A1 = 1
    A2 = 2
    A3 = 3
    A4 = 4
    A8 = 8
    A1_ALIGNED = 17
    A2_ALIGNED = 18
    A4_ALIGNED = 20
    A8_ALIGNED = 24
    IMAGE = 25
    VECTOR = 26
    SVG = 27
    CUSTOM = 255

class FONT_SUBPX(Enum):
    NONE = 0
    HOR = 1
    VER = 2
    BOTH = 3

class FONT_KERNING(Enum):
    NORMAL = 0
    NONE = 1

class TEXT_FLAG(Enum):
    NONE = 0
    EXPAND = 1
    FIT = 2
    BREAK_ALL = 4
    RECOLOR = 8

class TEXT_ALIGN(Enum):
    AUTO = 0
    LEFT = 1
    CENTER = 2
    RIGHT = 3

class TEXT_CMD_STATE(Enum):
    WAIT = 0
    PAR = 1
    IN = 2

class BASE_DIR(Enum):
    LTR = 0
    RTL = 1
    AUTO = 2
    NEUTRAL = 32
    WEAK = 33

class GRAD_DIR(Enum):
    NONE = 0
    VER = 1
    HOR = 2
    LINEAR = 3
    RADIAL = 4
    CONICAL = 5

class GRAD_EXTEND(Enum):
    PAD = 0
    REPEAT = 1
    REFLECT = 2

class LAYOUT(Enum):
    NONE = 0
    FLEX = 1
    GRID = 2
    LAST = 3

class FLEX_ALIGN(Enum):
    START = 0
    END = 1
    CENTER = 2
    SPACE_EVENLY = 3
    SPACE_AROUND = 4
    SPACE_BETWEEN = 5

class FLEX_FLOW(Enum):
    ROW = 0
    COLUMN = 1
    ROW_WRAP = 4
    ROW_REVERSE = 8
    ROW_WRAP_REVERSE = 12
    COLUMN_WRAP = 5
    COLUMN_REVERSE = 9
    COLUMN_WRAP_REVERSE = 13

class GRID_ALIGN(Enum):
    START = 0
    CENTER = 1
    END = 2
    STRETCH = 3
    SPACE_EVENLY = 4
    SPACE_AROUND = 5
    SPACE_BETWEEN = 6

class BLEND_MODE(Enum):
    NORMAL = 0
    ADDITIVE = 1
    SUBTRACTIVE = 2
    MULTIPLY = 3
    DIFFERENCE = 4

class TEXT_DECOR(Enum):
    NONE = 0
    UNDERLINE = 1
    STRIKETHROUGH = 2

class BORDER_SIDE(Enum):
    NONE = 0
    BOTTOM = 1
    TOP = 2
    LEFT = 4
    RIGHT = 8
    FULL = 15
    INTERNAL = 16

class STYLE_RES(Enum):
    NOT_FOUND = 0
    FOUND = 1

class EVENT_CODE(Enum):
    ALL = 0
    PRESSED = 1
    PRESSING = 2
    PRESS_LOST = 3
    SHORT_CLICKED = 4
    SINGLE_CLICKED = 5
    DOUBLE_CLICKED = 6
    TRIPLE_CLICKED = 7
    LONG_PRESSED = 8
    LONG_PRESSED_REPEAT = 9
    CLICKED = 10
    RELEASED = 11
    SCROLL_BEGIN = 12
    SCROLL_THROW_BEGIN = 13
    SCROLL_END = 14
    SCROLL = 15
    GESTURE = 16
    KEY = 17
    ROTARY = 18
    FOCUSED = 19
    DEFOCUSED = 20
    LEAVE = 21
    HIT_TEST = 22
    INDEV_RESET = 23
    HOVER_OVER = 24
    HOVER_LEAVE = 25
    COVER_CHECK = 26
    REFR_EXT_DRAW_SIZE = 27
    DRAW_MAIN_BEGIN = 28
    DRAW_MAIN = 29
    DRAW_MAIN_END = 30
    DRAW_POST_BEGIN = 31
    DRAW_POST = 32
    DRAW_POST_END = 33
    DRAW_TASK_ADDED = 34
    VALUE_CHANGED = 35
    INSERT = 36
    REFRESH = 37
    READY = 38
    CANCEL = 39
    CREATE = 40
    DELETE = 41
    CHILD_CHANGED = 42
    CHILD_CREATED = 43
    CHILD_DELETED = 44
    SCREEN_UNLOAD_START = 45
    SCREEN_LOAD_START = 46
    SCREEN_LOADED = 47
    SCREEN_UNLOADED = 48
    SIZE_CHANGED = 49
    STYLE_CHANGED = 50
    LAYOUT_CHANGED = 51
    GET_SELF_SIZE = 52
    INVALIDATE_AREA = 53
    RESOLUTION_CHANGED = 54
    COLOR_FORMAT_CHANGED = 55
    REFR_REQUEST = 56
    REFR_START = 57
    REFR_READY = 58
    RENDER_START = 59
    RENDER_READY = 60
    FLUSH_START = 61
    FLUSH_FINISH = 62
    FLUSH_WAIT_START = 63
    FLUSH_WAIT_FINISH = 64
    VSYNC = 65
    LAST = 66
    PREPROCESS = 32768
    MARKED_DELETING = 65536

class DISPLAY_ROTATION(Enum):
    _0 = 0
    _90 = 1
    _180 = 2
    _270 = 3

class DISPLAY_RENDER_MODE(Enum):
    PARTIAL = 0
    DIRECT = 1
    FULL = 2

class SCREEN_LOAD_ANIM(Enum):
    NONE = 0
    OVER_LEFT = 1
    OVER_RIGHT = 2
    OVER_TOP = 3
    OVER_BOTTOM = 4
    MOVE_LEFT = 5
    MOVE_RIGHT = 6
    MOVE_TOP = 7
    MOVE_BOTTOM = 8
    FADE_IN = 9
    FADE_ON = 9
    FADE_OUT = 10
    OUT_LEFT = 11
    OUT_RIGHT = 12
    OUT_TOP = 13
    OUT_BOTTOM = 14

class OBJ_TREE_WALK_RES(Enum):
    NEXT = 0
    SKIP_CHILDREN = 1
    END = 2

class OBJ_POINT_TRANSFORM_FLAG(Enum):
    NONE = 0
    RECURSIVE = 1
    INVERSE = 2
    INVERSE_RECURSIVE = 3

class SCROLLBAR_MODE(Enum):
    OFF = 0
    ON = 1
    ACTIVE = 2
    AUTO = 3

class SCROLL_SNAP(Enum):
    NONE = 0
    START = 1
    END = 2
    CENTER = 3

class STYLE_STATE_CMP(Enum):
    SAME = 0
    DIFF_REDRAW = 1
    DIFF_DRAW_PAD = 2
    DIFF_LAYOUT = 3

class FS_RES(Enum):
    OK = 0
    HW_ERR = 1
    FS_ERR = 2
    NOT_EX = 3
    FULL = 4
    LOCKED = 5
    DENIED = 6
    BUSY = 7
    TOUT = 8
    NOT_IMP = 9
    OUT_OF_MEM = 10
    INV_PARAM = 11
    UNKNOWN = 12

class FS_MODE(Enum):
    WR = 1
    RD = 2

class FS_WHENCE(Enum):
    SET = 0
    CUR = 1
    END = 2

class IMAGE_SRC(Enum):
    VARIABLE = 0
    FILE = 1
    SYMBOL = 2
    UNKNOWN = 3

class DRAW_TASK_TYPE(Enum):
    NONE = 0
    FILL = 1
    BORDER = 2
    BOX_SHADOW = 3
    LETTER = 4
    LABEL = 5
    IMAGE = 6
    LAYER = 7
    LINE = 8
    ARC = 9
    TRIANGLE = 10
    MASK_RECTANGLE = 11
    MASK_BITMAP = 12
    VECTOR = 13

class DRAW_TASK_STATE(Enum):
    WAITING = 0
    QUEUED = 1
    IN_PROGRESS = 2
    READY = 3

class LAYER_TYPE(Enum):
    NONE = 0
    SIMPLE = 1
    TRANSFORM = 2

class OBJ_CLASS_EDITABLE(Enum):
    INHERIT = 0
    TRUE = 1
    FALSE = 2

class OBJ_CLASS_GROUP_DEF(Enum):
    INHERIT = 0
    TRUE = 1
    FALSE = 2

class OBJ_CLASS_THEME_INHERITABLE(Enum):
    FALSE = 0
    TRUE = 1

class KEY(Enum):
    UP = 17
    DOWN = 18
    RIGHT = 19
    LEFT = 20
    ESC = 27
    DEL = 127
    BACKSPACE = 8
    ENTER = 10
    NEXT = 9
    PREV = 11
    HOME = 2
    END = 3

class GROUP_REFOCUS_POLICY(Enum):
    NEXT = 0
    PREV = 1

class INDEV_TYPE(Enum):
    NONE = 0
    POINTER = 1
    KEYPAD = 2
    BUTTON = 3
    ENCODER = 4

class INDEV_STATE(Enum):
    RELEASED = 0
    PRESSED = 1

class INDEV_MODE(Enum):
    NONE = 0
    TIMER = 1
    EVENT = 2

class INDEV_GESTURE_TYPE(Enum):
    NONE = 0
    PINCH = 1
    SWIPE = 2
    ROTATE = 3
    TWO_FINGERS_SWIPE = 4
    SCROLL = 5
    CNT = 6

class COVER_RES(Enum):
    COVER = 0
    NOT_COVER = 1
    MASKED = 2

class OBJ_FLAG(Enum):
    HIDDEN = 1
    CLICKABLE = 2
    CLICK_FOCUSABLE = 4
    CHECKABLE = 8
    SCROLLABLE = 16
    SCROLL_ELASTIC = 32
    SCROLL_MOMENTUM = 64
    SCROLL_ONE = 128
    SCROLL_CHAIN_HOR = 256
    SCROLL_CHAIN_VER = 512
    SCROLL_CHAIN = 768
    SCROLL_ON_FOCUS = 1024
    SCROLL_WITH_ARROW = 2048
    SNAPPABLE = 4096
    PRESS_LOCK = 8192
    EVENT_BUBBLE = 16384
    GESTURE_BUBBLE = 32768
    ADV_HITTEST = 65536
    IGNORE_LAYOUT = 131072
    FLOATING = 262144
    SEND_DRAW_TASK_EVENTS = 524288
    OVERFLOW_VISIBLE = 1048576
    FLEX_IN_NEW_TRACK = 2097152
    LAYOUT_1 = 8388608
    LAYOUT_2 = 16777216
    WIDGET_1 = 33554432
    WIDGET_2 = 67108864
    USER_1 = 134217728
    USER_2 = 268435456
    USER_3 = 536870912
    USER_4 = 1073741824

class FONT_FMT_TXT_CMAP_TYPE(Enum):
    FORMAT0_FULL = 0
    SPARSE_FULL = 1
    FORMAT0_TINY = 2
    SPARSE_TINY = 3

class FONT_FMT_TXT_BITMAP_FORMAT(Enum):
    TXT_PLAIN = 0
    TXT_COMPRESSED = 1
    TXT_COMPRESSED_NO_PREFILTER = 2
    PLAIN_ALIGNED = 3

class IMAGE_ALIGN(Enum):
    DEFAULT = 0
    TOP_LEFT = 1
    TOP_MID = 2
    TOP_RIGHT = 3
    BOTTOM_LEFT = 4
    BOTTOM_MID = 5
    BOTTOM_RIGHT = 6
    LEFT_MID = 7
    RIGHT_MID = 8
    CENTER = 9
    AUTO_TRANSFORM = 10
    STRETCH = 11
    TILE = 12

class ANIMIMG_PART(Enum):
    LV_ANIM_IMAGE_PART_MAIN = 0

class ARC_MODE(Enum):
    NORMAL = 0
    SYMMETRICAL = 1
    REVERSE = 2

class LABEL_LONG_MODE(Enum):
    WRAP = 0
    DOTS = 1
    SCROLL = 2
    SCROLL_CIRCULAR = 3
    CLIP = 4

class BAR_MODE(Enum):
    NORMAL = 0
    SYMMETRICAL = 1
    RANGE = 2

class BAR_ORIENTATION(Enum):
    AUTO = 0
    HORIZONTAL = 1
    VERTICAL = 2

class BUTTONMATRIX_CTRL(Enum):
    NONE = 0
    WIDTH_1 = 1
    WIDTH_2 = 2
    WIDTH_3 = 3
    WIDTH_4 = 4
    WIDTH_5 = 5
    WIDTH_6 = 6
    WIDTH_7 = 7
    WIDTH_8 = 8
    WIDTH_9 = 9
    WIDTH_10 = 10
    WIDTH_11 = 11
    WIDTH_12 = 12
    WIDTH_13 = 13
    WIDTH_14 = 14
    WIDTH_15 = 15
    HIDDEN = 16
    NO_REPEAT = 32
    DISABLED = 64
    CHECKABLE = 128
    CHECKED = 256
    CLICK_TRIG = 512
    POPOVER = 1024
    RECOLOR = 2048
    RESERVED_1 = 4096
    RESERVED_2 = 8192
    CUSTOM_1 = 16384
    CUSTOM_2 = 32768

class CHART_TYPE(Enum):
    NONE = 0
    LINE = 1
    BAR = 2
    SCATTER = 3

class CHART_UPDATE_MODE(Enum):
    SHIFT = 0
    CIRCULAR = 1

class CHART_AXIS(Enum):
    PRIMARY_Y = 0
    SECONDARY_Y = 1
    PRIMARY_X = 2
    SECONDARY_X = 4
    LAST = 5

class IMAGEBUTTON_STATE(Enum):
    RELEASED = 0
    PRESSED = 1
    DISABLED = 2
    CHECKED_RELEASED = 3
    CHECKED_PRESSED = 4
    CHECKED_DISABLED = 5
    NUM = 6

class KEYBOARD_MODE(Enum):
    TEXT_LOWER = 0
    TEXT_UPPER = 1
    SPECIAL = 2
    NUMBER = 3
    USER_1 = 4
    USER_2 = 5
    USER_3 = 6
    USER_4 = 7

class MENU_MODE_HEADER(Enum):
    TOP_FIXED = 0
    TOP_UNFIXED = 1
    BOTTOM_FIXED = 2

class MENU_MODE_ROOT_BACK_BUTTON(Enum):
    DISABLED = 0
    ENABLED = 1

class ROLLER_MODE(Enum):
    NORMAL = 0
    INFINITE = 1

class SCALE_MODE(Enum):
    HORIZONTAL_TOP = 0
    HORIZONTAL_BOTTOM = 1
    VERTICAL_LEFT = 2
    VERTICAL_RIGHT = 4
    ROUND_INNER = 8
    ROUND_OUTER = 16
    LAST = 17

class SLIDER_MODE(Enum):
    NORMAL = 0
    SYMMETRICAL = 1
    RANGE = 2

class SLIDER_ORIENTATION(Enum):
    AUTO = 0
    HORIZONTAL = 1
    VERTICAL = 2

class SPAN_OVERFLOW(Enum):
    CLIP = 0
    ELLIPSIS = 1
    LAST = 2

class SPAN_MODE(Enum):
    FIXED = 0
    EXPAND = 1
    BREAK = 2
    LAST = 3

class SWITCH_ORIENTATION(Enum):
    AUTO = 0
    HORIZONTAL = 1
    VERTICAL = 2

class TABLE_CELL_CTRL(Enum):
    NONE = 0
    MERGE_RIGHT = 1
    TEXT_CROP = 2
    CUSTOM_1 = 16
    CUSTOM_2 = 32
    CUSTOM_3 = 64
    CUSTOM_4 = 128

class SUBJECT_TYPE(Enum):
    INVALID = 0
    NONE = 1
    INT = 2
    POINTER = 3
    COLOR = 4
    GROUP = 5
    STRING = 6

class EVDEV_TYPE(Enum):
    REL = 0
    ABS = 1
    KEY = 2

class THREAD_PRIO(Enum):
    LOWEST = 0
    LOW = 1
    MID = 2
    HIGH = 3
    HIGHEST = 4

SIZE_CONTENT = 1073741823


################
# Structures

_objects = {}
class obj:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def move_foreground(self):
        parent = self.get_parent()
        self.move_to_index(parent.get_child_count() - 1)
    def move_background(self):
        self.move_to_index(0)
    def set_style_size(self, width, height, selector):
        self.set_style_width(width, selector)
        self.set_style_height(height, selector)
    def set_style_pad_all(self, value, selector):
        self.set_style_pad_left(value, selector)
        self.set_style_pad_right(value, selector)
        self.set_style_pad_top(value, selector)
        self.set_style_pad_bottom(value, selector)
    def set_style_pad_hor(self, value, selector):
        self.set_style_pad_left(value, selector)
        self.set_style_pad_right(value, selector)
    def set_style_pad_ver(self, value, selector):
        self.set_style_pad_top(value, selector)
        self.set_style_pad_bottom(value, selector)
    def set_style_pad_gap(self, value, selector):
        self.set_style_pad_row(value, selector)
        self.set_style_pad_column(value, selector)
    def set_style_margin_hor(self, value, selector):
        self.set_style_margin_left(value, selector)
        self.set_style_margin_right(value, selector)
    def set_style_margin_ver(self, value, selector):
        self.set_style_margin_top(value, selector)
        self.set_style_margin_bottom(value, selector)
    def set_style_margin_all(self, value, selector):
        self.set_style_margin_left(value, selector)
        self.set_style_margin_right(value, selector)
        self.set_style_margin_top(value, selector)
        self.set_style_margin_bottom(value, selector)
    def set_style_transform_scale(self, value, selector):
        self.set_style_transform_scale_x(value, selector)
        self.set_style_transform_scale_y(value, selector)
    def __init__(self, parent):
        self._pointer = _lvgl.lv_obj_create(parent._pointer if parent else ffi.NULL)
    def set_flex_flow(self, flow: 'FLEX_FLOW') -> 'None':
        return _lvgl.lv_obj_set_flex_flow(self._pointer, flow.value if flow and isinstance(flow, Enum) else (flow or 0))
    def set_flex_align(self, main_place: 'FLEX_ALIGN', cross_place: 'FLEX_ALIGN', track_cross_place: 'FLEX_ALIGN') -> 'None':
        return _lvgl.lv_obj_set_flex_align(self._pointer, main_place.value if main_place and isinstance(main_place, Enum) else (main_place or 0), cross_place.value if cross_place and isinstance(cross_place, Enum) else (cross_place or 0), track_cross_place.value if track_cross_place and isinstance(track_cross_place, Enum) else (track_cross_place or 0))
    def set_flex_grow(self, grow: 'int') -> 'None':
        return _lvgl.lv_obj_set_flex_grow(self._pointer, grow)
    def set_grid_dsc_array(self, col_dsc: 'int', row_dsc: 'int') -> 'None':
        return _lvgl.lv_obj_set_grid_dsc_array(self._pointer, ffi.NULL if col_dsc is None else col_dsc, ffi.NULL if row_dsc is None else row_dsc)
    def set_grid_align(self, column_align: 'GRID_ALIGN', row_align: 'GRID_ALIGN') -> 'None':
        return _lvgl.lv_obj_set_grid_align(self._pointer, column_align.value if column_align and isinstance(column_align, Enum) else (column_align or 0), row_align.value if row_align and isinstance(row_align, Enum) else (row_align or 0))
    def set_grid_cell(self, column_align: 'GRID_ALIGN', col_pos: 'int', col_span: 'int', row_align: 'GRID_ALIGN', row_pos: 'int', row_span: 'int') -> 'None':
        return _lvgl.lv_obj_set_grid_cell(self._pointer, column_align.value if column_align and isinstance(column_align, Enum) else (column_align or 0), col_pos, col_span, row_align.value if row_align and isinstance(row_align, Enum) else (row_align or 0), row_pos, row_span)
    def delete(self) -> 'None':
        return _lvgl.lv_obj_delete(self._pointer)
    def clean(self) -> 'None':
        return _lvgl.lv_obj_clean(self._pointer)
    def delete_delayed(self, delay_ms: 'int') -> 'None':
        return _lvgl.lv_obj_delete_delayed(self._pointer, delay_ms)
    def delete_anim_completed_cb(self) -> 'None':
        return _lvgl.lv_obj_delete_anim_completed_cb(self._pointer)
    def delete_async(self) -> 'None':
        return _lvgl.lv_obj_delete_async(self._pointer)
    def set_parent(self, parent: 'obj') -> 'None':
        return _lvgl.lv_obj_set_parent(self._pointer, parent._pointer if parent else ffi.NULL)
    def swap(self, obj2: 'obj') -> 'None':
        return _lvgl.lv_obj_swap(self._pointer, obj2._pointer if obj2 else ffi.NULL)
    def move_to_index(self, index: 'int') -> 'None':
        return _lvgl.lv_obj_move_to_index(self._pointer, index)
    def get_screen(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_screen(self._pointer)
        return result if result._pointer else None
    def get_display(self) -> 'display':
        result = display.__new__(display)
        result._pointer = _lvgl.lv_obj_get_display(self._pointer)
        return result if result._pointer else None
    def get_parent(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_parent(self._pointer)
        return result if result._pointer else None
    def get_child(self, idx: 'int') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_child(self._pointer, idx)
        return result if result._pointer else None
    def get_child_by_type(self, idx: 'int', class_p: 'obj_class') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_child_by_type(self._pointer, idx, class_p._pointer if class_p else ffi.NULL)
        return result if result._pointer else None
    def get_sibling(self, idx: 'int') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_sibling(self._pointer, idx)
        return result if result._pointer else None
    def get_sibling_by_type(self, idx: 'int', class_p: 'obj_class') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_get_sibling_by_type(self._pointer, idx, class_p._pointer if class_p else ffi.NULL)
        return result if result._pointer else None
    def get_child_count(self) -> 'int':
        return _lvgl.lv_obj_get_child_count(self._pointer)
    def get_child_count_by_type(self, class_p: 'obj_class') -> 'int':
        return _lvgl.lv_obj_get_child_count_by_type(self._pointer, class_p._pointer if class_p else ffi.NULL)
    def get_index(self) -> 'int':
        return _lvgl.lv_obj_get_index(self._pointer)
    def get_index_by_type(self, class_p: 'obj_class') -> 'int':
        return _lvgl.lv_obj_get_index_by_type(self._pointer, class_p._pointer if class_p else ffi.NULL)
    def tree_walk(self, cb: 'lv_obj_tree_walk_cb_t', user_data: 'str') -> 'None':
        def wrap_cb(original_cb):
            def cb(_o0, _N0):
                o0 = obj.__new__(obj)
                o0._pointer = _o0
                N0 = _N0
                return original_cb(o0, N0)
            return ffi.callback('lv_obj_tree_walk_res_t (*)(lv_obj_t*, void*)', cb)
        if isinstance(cb, ffi.CData):
            cb_wrapper = cb
        else:
            cb_wrapper = self._callbacks.get(cb)
        if not cb_wrapper:
            cb_wrapper = wrap_cb(cb)
            self._callbacks[cb] = cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_obj_tree_walk(self._pointer, cb_wrapper, ffi.NULL if user_data is None else user_data)
    def dump_tree(self) -> 'None':
        return _lvgl.lv_obj_dump_tree(self._pointer)
    def set_pos(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_obj_set_pos(self._pointer, x, y)
    def set_x(self, x: 'int') -> 'None':
        return _lvgl.lv_obj_set_x(self._pointer, x)
    def set_y(self, y: 'int') -> 'None':
        return _lvgl.lv_obj_set_y(self._pointer, y)
    def set_size(self, w: 'int', h: 'int') -> 'None':
        return _lvgl.lv_obj_set_size(self._pointer, w, h)
    def refr_size(self) -> 'bool':
        return _lvgl.lv_obj_refr_size(self._pointer)
    def set_width(self, w: 'int') -> 'None':
        return _lvgl.lv_obj_set_width(self._pointer, w)
    def set_height(self, h: 'int') -> 'None':
        return _lvgl.lv_obj_set_height(self._pointer, h)
    def set_content_width(self, w: 'int') -> 'None':
        return _lvgl.lv_obj_set_content_width(self._pointer, w)
    def set_content_height(self, h: 'int') -> 'None':
        return _lvgl.lv_obj_set_content_height(self._pointer, h)
    def set_layout(self, layout: 'int') -> 'None':
        return _lvgl.lv_obj_set_layout(self._pointer, layout)
    def is_layout_positioned(self) -> 'bool':
        return _lvgl.lv_obj_is_layout_positioned(self._pointer)
    def mark_layout_as_dirty(self) -> 'None':
        return _lvgl.lv_obj_mark_layout_as_dirty(self._pointer)
    def update_layout(self) -> 'None':
        return _lvgl.lv_obj_update_layout(self._pointer)
    def set_align(self, align: 'ALIGN') -> 'None':
        return _lvgl.lv_obj_set_align(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def align(self, align: 'ALIGN', x_ofs: 'int', y_ofs: 'int') -> 'None':
        return _lvgl.lv_obj_align(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0), x_ofs, y_ofs)
    def align_to(self, base: 'obj', align: 'ALIGN', x_ofs: 'int', y_ofs: 'int') -> 'None':
        return _lvgl.lv_obj_align_to(self._pointer, base._pointer if base else ffi.NULL, align.value if align and isinstance(align, Enum) else (align or 0), x_ofs, y_ofs)
    def center(self) -> 'None':
        return _lvgl.lv_obj_center(self._pointer)
    def set_transform(self, matrix: 'matrix') -> 'None':
        return _lvgl.lv_obj_set_transform(self._pointer, matrix._pointer if matrix else ffi.NULL)
    def reset_transform(self) -> 'None':
        return _lvgl.lv_obj_reset_transform(self._pointer)
    def get_coords(self, coords: 'area') -> 'None':
        return _lvgl.lv_obj_get_coords(self._pointer, coords._pointer if coords else ffi.NULL)
    def get_x(self) -> 'int':
        return _lvgl.lv_obj_get_x(self._pointer)
    def get_x2(self) -> 'int':
        return _lvgl.lv_obj_get_x2(self._pointer)
    def get_y(self) -> 'int':
        return _lvgl.lv_obj_get_y(self._pointer)
    def get_y2(self) -> 'int':
        return _lvgl.lv_obj_get_y2(self._pointer)
    def get_x_aligned(self) -> 'int':
        return _lvgl.lv_obj_get_x_aligned(self._pointer)
    def get_y_aligned(self) -> 'int':
        return _lvgl.lv_obj_get_y_aligned(self._pointer)
    def get_width(self) -> 'int':
        return _lvgl.lv_obj_get_width(self._pointer)
    def get_height(self) -> 'int':
        return _lvgl.lv_obj_get_height(self._pointer)
    def get_content_width(self) -> 'int':
        return _lvgl.lv_obj_get_content_width(self._pointer)
    def get_content_height(self) -> 'int':
        return _lvgl.lv_obj_get_content_height(self._pointer)
    def get_content_coords(self, area: 'area') -> 'None':
        return _lvgl.lv_obj_get_content_coords(self._pointer, area._pointer if area else ffi.NULL)
    def get_self_width(self) -> 'int':
        return _lvgl.lv_obj_get_self_width(self._pointer)
    def get_self_height(self) -> 'int':
        return _lvgl.lv_obj_get_self_height(self._pointer)
    def refresh_self_size(self) -> 'bool':
        return _lvgl.lv_obj_refresh_self_size(self._pointer)
    def refr_pos(self) -> 'None':
        return _lvgl.lv_obj_refr_pos(self._pointer)
    def move_to(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_obj_move_to(self._pointer, x, y)
    def move_children_by(self, x_diff: 'int', y_diff: 'int', ignore_floating: 'bool') -> 'None':
        return _lvgl.lv_obj_move_children_by(self._pointer, x_diff, y_diff, ignore_floating)
    def get_transform(self) -> 'matrix':
        result = matrix.__new__(matrix)
        result._pointer = _lvgl.lv_obj_get_transform(self._pointer)
        return result if result._pointer else None
    def transform_point(self, p: 'point', flags: 'OBJ_POINT_TRANSFORM_FLAG') -> 'None':
        return _lvgl.lv_obj_transform_point(self._pointer, p._pointer if p else ffi.NULL, flags.value if flags and isinstance(flags, Enum) else (flags or 0))
    def transform_point_array(self, points: 'lv_point_t', count: 'size_t', flags: 'OBJ_POINT_TRANSFORM_FLAG') -> 'None':
        return _lvgl.lv_obj_transform_point_array(self._pointer, ffi.NULL if points is None else points, count, flags.value if flags and isinstance(flags, Enum) else (flags or 0))
    def get_transformed_area(self, area: 'area', flags: 'OBJ_POINT_TRANSFORM_FLAG') -> 'None':
        return _lvgl.lv_obj_get_transformed_area(self._pointer, area._pointer if area else ffi.NULL, flags.value if flags and isinstance(flags, Enum) else (flags or 0))
    def invalidate_area(self, area: 'area') -> 'None':
        return _lvgl.lv_obj_invalidate_area(self._pointer, area._pointer if area else ffi.NULL)
    def invalidate(self) -> 'None':
        return _lvgl.lv_obj_invalidate(self._pointer)
    def area_is_visible(self, area: 'area') -> 'bool':
        return _lvgl.lv_obj_area_is_visible(self._pointer, area._pointer if area else ffi.NULL)
    def is_visible(self) -> 'bool':
        return _lvgl.lv_obj_is_visible(self._pointer)
    def set_ext_click_area(self, size: 'int') -> 'None':
        return _lvgl.lv_obj_set_ext_click_area(self._pointer, size)
    def get_click_area(self, area: 'area') -> 'None':
        return _lvgl.lv_obj_get_click_area(self._pointer, area._pointer if area else ffi.NULL)
    def hit_test(self, point: 'point') -> 'bool':
        return _lvgl.lv_obj_hit_test(self._pointer, point._pointer if point else ffi.NULL)
    def set_scrollbar_mode(self, mode: 'SCROLLBAR_MODE') -> 'None':
        return _lvgl.lv_obj_set_scrollbar_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_scroll_dir(self, dir: 'DIR') -> 'None':
        return _lvgl.lv_obj_set_scroll_dir(self._pointer, dir.value if dir and isinstance(dir, Enum) else (dir or 0))
    def set_scroll_snap_x(self, align: 'SCROLL_SNAP') -> 'None':
        return _lvgl.lv_obj_set_scroll_snap_x(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def set_scroll_snap_y(self, align: 'SCROLL_SNAP') -> 'None':
        return _lvgl.lv_obj_set_scroll_snap_y(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def get_scrollbar_mode(self) -> 'lv_scrollbar_mode_t':
        return _lvgl.lv_obj_get_scrollbar_mode(self._pointer)
    def get_scroll_dir(self) -> 'lv_dir_t':
        return _lvgl.lv_obj_get_scroll_dir(self._pointer)
    def get_scroll_snap_x(self) -> 'lv_scroll_snap_t':
        return _lvgl.lv_obj_get_scroll_snap_x(self._pointer)
    def get_scroll_snap_y(self) -> 'lv_scroll_snap_t':
        return _lvgl.lv_obj_get_scroll_snap_y(self._pointer)
    def get_scroll_x(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_x(self._pointer)
    def get_scroll_y(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_y(self._pointer)
    def get_scroll_top(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_top(self._pointer)
    def get_scroll_bottom(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_bottom(self._pointer)
    def get_scroll_left(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_left(self._pointer)
    def get_scroll_right(self) -> 'int':
        return _lvgl.lv_obj_get_scroll_right(self._pointer)
    def get_scroll_end(self, end: 'point') -> 'None':
        return _lvgl.lv_obj_get_scroll_end(self._pointer, end._pointer if end else ffi.NULL)
    def scroll_by(self, dx: 'int', dy: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_by(self._pointer, dx, dy, anim_en)
    def scroll_by_bounded(self, dx: 'int', dy: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_by_bounded(self._pointer, dx, dy, anim_en)
    def scroll_to(self, x: 'int', y: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_to(self._pointer, x, y, anim_en)
    def scroll_to_x(self, x: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_to_x(self._pointer, x, anim_en)
    def scroll_to_y(self, y: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_to_y(self._pointer, y, anim_en)
    def scroll_to_view(self, anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_to_view(self._pointer, anim_en)
    def scroll_to_view_recursive(self, anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_scroll_to_view_recursive(self._pointer, anim_en)
    def is_scrolling(self) -> 'bool':
        return _lvgl.lv_obj_is_scrolling(self._pointer)
    def stop_scroll_anim(self) -> 'None':
        return _lvgl.lv_obj_stop_scroll_anim(self._pointer)
    def update_snap(self, anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_update_snap(self._pointer, anim_en)
    def get_scrollbar_area(self, hor: 'area', ver: 'area') -> 'None':
        return _lvgl.lv_obj_get_scrollbar_area(self._pointer, hor._pointer if hor else ffi.NULL, ver._pointer if ver else ffi.NULL)
    def scrollbar_invalidate(self) -> 'None':
        return _lvgl.lv_obj_scrollbar_invalidate(self._pointer)
    def readjust_scroll(self, anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_obj_readjust_scroll(self._pointer, anim_en)
    def add_style(self, style: 'style', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_add_style(self._pointer, style._pointer if style else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def replace_style(self, old_style: 'style', new_style: 'style', selector: 'STATE') -> 'bool':
        return _lvgl.lv_obj_replace_style(self._pointer, old_style._pointer if old_style else ffi.NULL, new_style._pointer if new_style else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def remove_style(self, style: 'style', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_remove_style(self._pointer, style._pointer if style else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def remove_style_all(self) -> 'None':
        return _lvgl.lv_obj_remove_style_all(self._pointer)
    def report_style_change(self) -> 'None':
        return _lvgl.lv_obj_report_style_change(self._pointer)
    def refresh_style(self, part: 'PART', prop: 'lv_style_prop_t') -> 'None':
        return _lvgl.lv_obj_refresh_style(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), prop)
    def get_style_prop(self, part: 'PART', prop: 'lv_style_prop_t') -> 'lv_style_value_t':
        return _lvgl.lv_obj_get_style_prop(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), prop)
    def has_style_prop(self, selector: 'STATE', prop: 'lv_style_prop_t') -> 'bool':
        return _lvgl.lv_obj_has_style_prop(self._pointer, selector.value if selector and isinstance(selector, Enum) else (selector or 0), prop)
    def set_local_style_prop(self, prop: 'lv_style_prop_t', value: 'lv_style_value_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_local_style_prop(self._pointer, prop, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def get_local_style_prop(self, prop: 'lv_style_prop_t', value: 'lv_style_value_t', selector: 'STATE') -> 'lv_style_res_t':
        return _lvgl.lv_obj_get_local_style_prop(self._pointer, prop, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def remove_local_style_prop(self, prop: 'lv_style_prop_t', selector: 'STATE') -> 'bool':
        return _lvgl.lv_obj_remove_local_style_prop(self._pointer, prop, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def style_apply_color_filter(self, part: 'PART', v: 'lv_style_value_t') -> 'lv_style_value_t':
        return _lvgl.lv_obj_style_apply_color_filter(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), v)
    def fade_in(self, time: 'int', delay: 'int') -> 'None':
        return _lvgl.lv_obj_fade_in(self._pointer, time, delay)
    def fade_out(self, time: 'int', delay: 'int') -> 'None':
        return _lvgl.lv_obj_fade_out(self._pointer, time, delay)
    def set_style_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_min_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_min_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_max_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_max_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_height(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_height(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_min_height(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_min_height(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_max_height(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_max_height(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_length(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_length(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_align(self, value: 'ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_height(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_height(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_translate_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_translate_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_translate_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_translate_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_translate_radial(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_translate_radial(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_scale_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_scale_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_scale_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_scale_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_rotation(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_rotation(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_pivot_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_pivot_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_pivot_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_pivot_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_skew_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_skew_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transform_skew_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transform_skew_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_top(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_top(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_bottom(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_bottom(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_left(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_left(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_right(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_right(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_row(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_row(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_column(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_column(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_pad_radial(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_pad_radial(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_margin_top(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_margin_top(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_margin_bottom(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_margin_bottom(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_margin_left(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_margin_left(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_margin_right(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_margin_right(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_grad_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_grad_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_grad_dir(self, value: 'GRAD_DIR', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_grad_dir(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_main_stop(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_main_stop(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_grad_stop(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_grad_stop(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_main_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_main_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_grad_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_grad_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_grad(self, value: 'grad_dsc', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_grad(self._pointer, value._pointer if value else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_image_src(self, value: 'None', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_image_src(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_image_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_image_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_image_recolor(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_image_recolor(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_image_recolor_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_image_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bg_image_tiled(self, value: 'bool', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bg_image_tiled(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_border_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_border_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_border_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_border_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_border_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_border_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_border_side(self, value: 'BORDER_SIDE', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_border_side(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_border_post(self, value: 'bool', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_border_post(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_outline_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_outline_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_outline_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_outline_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_outline_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_outline_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_outline_pad(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_outline_pad(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_offset_x(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_offset_x(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_offset_y(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_offset_y(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_spread(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_spread(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_shadow_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_shadow_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_image_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_image_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_image_recolor(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_image_recolor(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_image_recolor_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_image_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_dash_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_dash_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_dash_gap(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_dash_gap(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_rounded(self, value: 'bool', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_rounded(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_line_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_line_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_arc_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_arc_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_arc_rounded(self, value: 'bool', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_arc_rounded(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_arc_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_arc_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_arc_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_arc_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_arc_image_src(self, value: 'None', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_arc_image_src(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_font(self, value: 'font', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_font(self._pointer, value._pointer if value else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_letter_space(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_letter_space(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_line_space(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_line_space(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_decor(self, value: 'TEXT_DECOR', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_decor(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_align(self, value: 'TEXT_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_outline_stroke_color(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_outline_stroke_color(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_outline_stroke_width(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_outline_stroke_width(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_text_outline_stroke_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_text_outline_stroke_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_radius(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_radius(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_radial_offset(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_radial_offset(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_clip_corner(self, value: 'bool', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_clip_corner(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_opa_layered(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_opa_layered(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_color_filter_dsc(self, value: 'lv_color_filter_dsc_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_color_filter_dsc(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_color_filter_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_color_filter_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_recolor(self, value: 'lv_color_t', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_recolor(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_recolor_opa(self, value: 'OPA', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_anim(self, value: 'anim', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_anim(self._pointer, value._pointer if value else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_anim_duration(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_anim_duration(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_transition(self, value: 'style_transition_dsc', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_transition(self._pointer, value._pointer if value else ffi.NULL, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_blend_mode(self, value: 'BLEND_MODE', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_blend_mode(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_layout(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_layout(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_base_dir(self, value: 'BASE_DIR', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_base_dir(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_bitmap_mask_src(self, value: 'None', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_bitmap_mask_src(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_rotary_sensitivity(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_rotary_sensitivity(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_flex_flow(self, value: 'FLEX_FLOW', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_flex_flow(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_flex_main_place(self, value: 'FLEX_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_flex_main_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_flex_cross_place(self, value: 'FLEX_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_flex_cross_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_flex_track_place(self, value: 'FLEX_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_flex_track_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_flex_grow(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_flex_grow(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_column_dsc_array(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_column_dsc_array(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_column_align(self, value: 'GRID_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_column_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_row_dsc_array(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_row_dsc_array(self._pointer, ffi.NULL if value is None else value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_row_align(self, value: 'GRID_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_row_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_column_pos(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_column_pos(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_x_align(self, value: 'GRID_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_x_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_column_span(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_column_span(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_row_pos(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_row_pos(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_y_align(self, value: 'GRID_ALIGN', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_y_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0), selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def set_style_grid_cell_row_span(self, value: 'int', selector: 'STATE') -> 'None':
        return _lvgl.lv_obj_set_style_grid_cell_row_span(self._pointer, value, selector.value if selector and isinstance(selector, Enum) else (selector or 0))
    def calculate_style_text_align(self, part: 'PART', txt: 'str') -> 'lv_text_align_t':
        return _lvgl.lv_obj_calculate_style_text_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), txt.encode('utf-8'))
    def get_style_opa_recursive(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_opa_recursive(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def style_apply_recolor(self, part: 'PART', color: 'lv_color32_t') -> 'lv_color32_t':
        return _lvgl.lv_obj_style_apply_recolor(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), color)
    def get_style_recolor_recursive(self, part: 'PART') -> 'lv_color32_t':
        return _lvgl.lv_obj_get_style_recolor_recursive(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def init_draw_rect_dsc(self, part: 'PART', draw_dsc: 'draw_rect_dsc') -> 'None':
        return _lvgl.lv_obj_init_draw_rect_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), draw_dsc._pointer if draw_dsc else ffi.NULL)
    def init_draw_label_dsc(self, part: 'PART', draw_dsc: 'draw_label_dsc') -> 'None':
        return _lvgl.lv_obj_init_draw_label_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), draw_dsc._pointer if draw_dsc else ffi.NULL)
    def init_draw_image_dsc(self, part: 'PART', draw_dsc: 'draw_image_dsc') -> 'None':
        return _lvgl.lv_obj_init_draw_image_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), draw_dsc._pointer if draw_dsc else ffi.NULL)
    def init_draw_line_dsc(self, part: 'PART', draw_dsc: 'draw_line_dsc') -> 'None':
        return _lvgl.lv_obj_init_draw_line_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), draw_dsc._pointer if draw_dsc else ffi.NULL)
    def init_draw_arc_dsc(self, part: 'PART', draw_dsc: 'draw_arc_dsc') -> 'None':
        return _lvgl.lv_obj_init_draw_arc_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), draw_dsc._pointer if draw_dsc else ffi.NULL)
    def calculate_ext_draw_size(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_calculate_ext_draw_size(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def refresh_ext_draw_size(self) -> 'None':
        return _lvgl.lv_obj_refresh_ext_draw_size(self._pointer)
    def class_create_obj(self, parent: 'obj') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_obj_class_create_obj(self._pointer, parent._pointer if parent else ffi.NULL)
        return result if result._pointer else None
    def class_init_obj(self) -> 'None':
        return _lvgl.lv_obj_class_init_obj(self._pointer)
    def is_editable(self) -> 'bool':
        return _lvgl.lv_obj_is_editable(self._pointer)
    def is_group_def(self) -> 'bool':
        return _lvgl.lv_obj_is_group_def(self._pointer)
    def send_event(self, event_code: 'EVENT_CODE', param: 'None') -> 'lv_result_t':
        return _lvgl.lv_obj_send_event(self._pointer, event_code.value if event_code and isinstance(event_code, Enum) else (event_code or 0), ffi.NULL if param is None else param)
    def event_base(self, e: 'event') -> 'lv_result_t':
        return _lvgl.lv_obj_event_base(self._pointer, e._pointer if e else ffi.NULL)
    def add_event_cb(self, event_cb: 'lv_event_cb_t', filter: 'EVENT_CODE', user_data: 'str') -> 'event_dsc':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_obj_add_event_cb(self._pointer, event_cb_wrapper, filter.value if filter and isinstance(filter, Enum) else (filter or 0), ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def get_event_count(self) -> 'int':
        return _lvgl.lv_obj_get_event_count(self._pointer)
    def get_event_dsc(self, index: 'int') -> 'event_dsc':
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_obj_get_event_dsc(self._pointer, index)
        return result if result._pointer else None
    def remove_event(self, index: 'int') -> 'bool':
        return _lvgl.lv_obj_remove_event(self._pointer, index)
    def remove_event_dsc(self, dsc: 'event_dsc') -> 'bool':
        return _lvgl.lv_obj_remove_event_dsc(self._pointer, dsc._pointer if dsc else ffi.NULL)
    def remove_event_cb(self, event_cb: 'lv_event_cb_t') -> 'int':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        return _lvgl.lv_obj_remove_event_cb(self._pointer, event_cb_wrapper)
    def remove_event_cb_with_user_data(self, event_cb: 'lv_event_cb_t', user_data: 'str') -> 'int':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_obj_remove_event_cb_with_user_data(self._pointer, event_cb_wrapper, ffi.NULL if user_data is None else user_data)
    def add_flag(self, f: 'OBJ_FLAG') -> 'None':
        return _lvgl.lv_obj_add_flag(self._pointer, f.value if f and isinstance(f, Enum) else (f or 0))
    def remove_flag(self, f: 'OBJ_FLAG') -> 'None':
        return _lvgl.lv_obj_remove_flag(self._pointer, f.value if f and isinstance(f, Enum) else (f or 0))
    def update_flag(self, f: 'OBJ_FLAG', v: 'bool') -> 'None':
        return _lvgl.lv_obj_update_flag(self._pointer, f.value if f and isinstance(f, Enum) else (f or 0), v)
    def add_state(self, state: 'STATE') -> 'None':
        return _lvgl.lv_obj_add_state(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def remove_state(self, state: 'STATE') -> 'None':
        return _lvgl.lv_obj_remove_state(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def set_state(self, state: 'STATE', v: 'bool') -> 'None':
        return _lvgl.lv_obj_set_state(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0), v)
    def set_user_data(self, user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_obj_set_user_data(self._pointer, ffi.NULL if user_data is None else user_data)
    def has_flag(self, f: 'OBJ_FLAG') -> 'bool':
        return _lvgl.lv_obj_has_flag(self._pointer, f.value if f and isinstance(f, Enum) else (f or 0))
    def has_flag_any(self, f: 'OBJ_FLAG') -> 'bool':
        return _lvgl.lv_obj_has_flag_any(self._pointer, f.value if f and isinstance(f, Enum) else (f or 0))
    def get_state(self) -> 'lv_state_t':
        return _lvgl.lv_obj_get_state(self._pointer)
    def has_state(self, state: 'STATE') -> 'bool':
        return _lvgl.lv_obj_has_state(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def get_group(self) -> 'group':
        result = group.__new__(group)
        result._pointer = _lvgl.lv_obj_get_group(self._pointer)
        return result if result._pointer else None
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_obj_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def check_type(self, class_p: 'obj_class') -> 'bool':
        return _lvgl.lv_obj_check_type(self._pointer, class_p._pointer if class_p else ffi.NULL)
    def has_class(self, class_p: 'obj_class') -> 'bool':
        return _lvgl.lv_obj_has_class(self._pointer, class_p._pointer if class_p else ffi.NULL)
    def get_class(self) -> 'obj_class':
        result = obj_class.__new__(obj_class)
        result._pointer = _lvgl.lv_obj_get_class(self._pointer)
        return result if result._pointer else None
    def is_valid(self) -> 'bool':
        return _lvgl.lv_obj_is_valid(self._pointer)
    def null_on_delete(self) -> 'None':
        return _lvgl.lv_obj_null_on_delete(self._pointer)
    def redraw(self, obj: 'obj') -> 'None':
        return _lvgl.lv_obj_redraw(self._pointer, obj._pointer if obj else ffi.NULL)
    def remove_from_subject(self, subject: 'subject') -> 'None':
        return _lvgl.lv_obj_remove_from_subject(self._pointer, subject._pointer if subject else ffi.NULL)
    def bind_flag_if_eq(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_eq(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_flag_if_not_eq(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_not_eq(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_flag_if_gt(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_gt(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_flag_if_ge(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_ge(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_flag_if_lt(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_lt(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_flag_if_le(self, subject: 'subject', flag: 'OBJ_FLAG', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_flag_if_le(self._pointer, subject._pointer if subject else ffi.NULL, flag.value if flag and isinstance(flag, Enum) else (flag or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_eq(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_eq(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_not_eq(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_not_eq(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_gt(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_gt(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_ge(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_ge(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_lt(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_lt(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_state_if_le(self, subject: 'subject', state: 'STATE', ref_value: 'int') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_state_if_le(self._pointer, subject._pointer if subject else ffi.NULL, state.value if state and isinstance(state, Enum) else (state or 0), ref_value)
        return result if result._pointer else None
    def bind_checked(self, subject: 'subject') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_obj_bind_checked(self._pointer, subject._pointer if subject else ffi.NULL)
        return result if result._pointer else None
    def get_style_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_min_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_min_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_max_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_max_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_height(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_height(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_min_height(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_min_height(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_max_height(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_max_height(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_length(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_length(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_align(self, part: 'PART') -> 'lv_align_t':
        return _lvgl.lv_obj_get_style_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_height(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_height(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_translate_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_translate_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_translate_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_translate_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_translate_radial(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_translate_radial(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_scale_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_scale_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_scale_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_scale_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_rotation(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_rotation(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_pivot_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_pivot_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_pivot_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_pivot_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_skew_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_skew_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_skew_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_skew_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_top(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_top(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_bottom(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_bottom(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_left(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_left(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_right(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_right(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_row(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_row(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_column(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_column(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_pad_radial(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_pad_radial(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_margin_top(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_margin_top(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_margin_bottom(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_margin_bottom(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_margin_left(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_margin_left(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_margin_right(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_margin_right(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_bg_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_grad_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_grad_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad_dir(self, part: 'PART') -> 'lv_grad_dir_t':
        return _lvgl.lv_obj_get_style_bg_grad_dir(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_main_stop(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_bg_main_stop(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad_stop(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_bg_grad_stop(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_main_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_bg_main_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_bg_grad_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_grad(self, part: 'PART') -> 'grad_dsc':
        result = grad_dsc.__new__(grad_dsc)
        result._pointer = _lvgl.lv_obj_get_style_bg_grad(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
        return result if result._pointer else None
    def get_style_bg_image_src(self, part: 'PART') -> 'None':
        return _lvgl.lv_obj_get_style_bg_image_src(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_image_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_bg_image_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_image_recolor(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_image_recolor(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_image_recolor_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_bg_image_recolor_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_image_recolor_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_bg_image_recolor_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bg_image_tiled(self, part: 'PART') -> 'bool':
        return _lvgl.lv_obj_get_style_bg_image_tiled(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_border_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_border_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_border_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_border_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_side(self, part: 'PART') -> 'lv_border_side_t':
        return _lvgl.lv_obj_get_style_border_side(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_border_post(self, part: 'PART') -> 'bool':
        return _lvgl.lv_obj_get_style_border_post(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_outline_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_outline_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_outline_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_outline_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_outline_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_outline_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_outline_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_outline_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_outline_pad(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_outline_pad(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_shadow_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_offset_x(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_shadow_offset_x(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_offset_y(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_shadow_offset_y(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_spread(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_shadow_spread(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_shadow_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_shadow_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_shadow_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_shadow_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_image_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_image_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_image_recolor(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_image_recolor(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_image_recolor_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_image_recolor_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_image_recolor_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_image_recolor_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_line_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_dash_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_line_dash_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_dash_gap(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_line_dash_gap(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_rounded(self, part: 'PART') -> 'bool':
        return _lvgl.lv_obj_get_style_line_rounded(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_line_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_line_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_line_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_line_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_arc_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_rounded(self, part: 'PART') -> 'bool':
        return _lvgl.lv_obj_get_style_arc_rounded(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_arc_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_arc_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_arc_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_arc_image_src(self, part: 'PART') -> 'None':
        return _lvgl.lv_obj_get_style_arc_image_src(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_text_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_text_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_text_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_font(self, part: 'PART') -> 'font':
        result = font.__new__(font)
        result._pointer = _lvgl.lv_obj_get_style_text_font(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
        return result if result._pointer else None
    def get_style_text_letter_space(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_text_letter_space(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_line_space(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_text_line_space(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_decor(self, part: 'PART') -> 'lv_text_decor_t':
        return _lvgl.lv_obj_get_style_text_decor(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_align(self, part: 'PART') -> 'lv_text_align_t':
        return _lvgl.lv_obj_get_style_text_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_outline_stroke_color(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_text_outline_stroke_color(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_outline_stroke_color_filtered(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_text_outline_stroke_color_filtered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_outline_stroke_width(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_text_outline_stroke_width(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_text_outline_stroke_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_text_outline_stroke_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_radius(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_radius(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_radial_offset(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_radial_offset(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_clip_corner(self, part: 'PART') -> 'bool':
        return _lvgl.lv_obj_get_style_clip_corner(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_opa_layered(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_opa_layered(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_color_filter_dsc(self, part: 'PART') -> 'lv_color_filter_dsc_t':
        return _lvgl.lv_obj_get_style_color_filter_dsc(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_color_filter_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_color_filter_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_recolor(self, part: 'PART') -> 'lv_color_t':
        return _lvgl.lv_obj_get_style_recolor(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_recolor_opa(self, part: 'PART') -> 'lv_opa_t':
        return _lvgl.lv_obj_get_style_recolor_opa(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_anim(self, part: 'PART') -> 'anim':
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_obj_get_style_anim(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
        return result if result._pointer else None
    def get_style_anim_duration(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_anim_duration(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transition(self, part: 'PART') -> 'style_transition_dsc':
        result = style_transition_dsc.__new__(style_transition_dsc)
        result._pointer = _lvgl.lv_obj_get_style_transition(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
        return result if result._pointer else None
    def get_style_blend_mode(self, part: 'PART') -> 'lv_blend_mode_t':
        return _lvgl.lv_obj_get_style_blend_mode(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_layout(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_layout(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_base_dir(self, part: 'PART') -> 'lv_base_dir_t':
        return _lvgl.lv_obj_get_style_base_dir(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_bitmap_mask_src(self, part: 'PART') -> 'None':
        return _lvgl.lv_obj_get_style_bitmap_mask_src(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_rotary_sensitivity(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_rotary_sensitivity(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_flex_flow(self, part: 'PART') -> 'lv_flex_flow_t':
        return _lvgl.lv_obj_get_style_flex_flow(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_flex_main_place(self, part: 'PART') -> 'lv_flex_align_t':
        return _lvgl.lv_obj_get_style_flex_main_place(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_flex_cross_place(self, part: 'PART') -> 'lv_flex_align_t':
        return _lvgl.lv_obj_get_style_flex_cross_place(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_flex_track_place(self, part: 'PART') -> 'lv_flex_align_t':
        return _lvgl.lv_obj_get_style_flex_track_place(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_flex_grow(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_flex_grow(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_column_dsc_array(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_column_dsc_array(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_column_align(self, part: 'PART') -> 'lv_grid_align_t':
        return _lvgl.lv_obj_get_style_grid_column_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_row_dsc_array(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_row_dsc_array(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_row_align(self, part: 'PART') -> 'lv_grid_align_t':
        return _lvgl.lv_obj_get_style_grid_row_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_column_pos(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_cell_column_pos(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_x_align(self, part: 'PART') -> 'lv_grid_align_t':
        return _lvgl.lv_obj_get_style_grid_cell_x_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_column_span(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_cell_column_span(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_row_pos(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_cell_row_pos(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_y_align(self, part: 'PART') -> 'lv_grid_align_t':
        return _lvgl.lv_obj_get_style_grid_cell_y_align(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_grid_cell_row_span(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_grid_cell_row_span(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_space_left(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_space_left(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_space_right(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_space_right(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_space_top(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_space_top(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_space_bottom(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_space_bottom(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_scale_x_safe(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_scale_x_safe(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))
    def get_style_transform_scale_y_safe(self, part: 'PART') -> 'int':
        return _lvgl.lv_obj_get_style_transform_scale_y_safe(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0))

class yuv_plane:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_yuv_plane_t[2]')
        _objects[self] = self._pointer

class xml_parser_state:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_xml_parser_state_t[2]')
        _objects[self] = self._pointer

class xml_component_ctx:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_xml_component_ctx_t[2]')
        _objects[self] = self._pointer

class xkb:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_xkb_t[2]')
        _objects[self] = self._pointer

class win(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_win_create(parent._pointer if parent else ffi.NULL)
    def add_title(self, txt: 'str') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_win_add_title(self._pointer, txt.encode('utf-8'))
        return result if result._pointer else None
    def add_button(self, icon: 'None', btn_w: 'int') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_win_add_button(self._pointer, ffi.NULL if icon is None else icon, btn_w)
        return result if result._pointer else None
    def get_header(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_win_get_header(self._pointer)
        return result if result._pointer else None
    def get_content(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_win_get_content(self._pointer)
        return result if result._pointer else None

class vector_stroke_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_stroke_dsc_t[2]')
        _objects[self] = self._pointer

class vector_path:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_path_t[2]')
        _objects[self] = self._pointer

class vector_gradient:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_gradient_t[2]')
        _objects[self] = self._pointer

class vector_fill_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_fill_dsc_t[2]')
        _objects[self] = self._pointer

class vector_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_dsc_t[2]')
        _objects[self] = self._pointer

class vector_draw_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_vector_draw_dsc_t[2]')
        _objects[self] = self._pointer

class tree_node:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, class_p, parent):
        self._pointer = _lvgl.lv_tree_node_create(class_p._pointer if class_p else ffi.NULL, parent._pointer if parent else ffi.NULL)
    def delete(self) -> 'None':
        return _lvgl.lv_tree_node_delete(self._pointer)

class tree_class:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_tree_class_t[2]')
        _objects[self] = self._pointer

class timer:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_timer_t[2]')
        _objects[self] = self._pointer
    def delete(self) -> 'None':
        return _lvgl.lv_timer_delete(self._pointer)
    def pause(self) -> 'None':
        return _lvgl.lv_timer_pause(self._pointer)
    def resume(self) -> 'None':
        return _lvgl.lv_timer_resume(self._pointer)
    def set_cb(self, timer_cb: 'lv_timer_cb_t') -> 'None':
        def wrap_timer_cb(original_timer_cb):
            def timer_cb(_t0):
                t0 = timer.__new__(timer)
                t0._pointer = _t0
                original_timer_cb(t0)
            return ffi.callback('void (*)(lv_timer_t*)', timer_cb)
        if isinstance(timer_cb, ffi.CData):
            timer_cb_wrapper = timer_cb
        else:
            timer_cb_wrapper = self._callbacks.get(timer_cb)
        if not timer_cb_wrapper:
            timer_cb_wrapper = wrap_timer_cb(timer_cb)
            self._callbacks[timer_cb] = timer_cb_wrapper
        return _lvgl.lv_timer_set_cb(self._pointer, timer_cb_wrapper)
    def set_period(self, period: 'int') -> 'None':
        return _lvgl.lv_timer_set_period(self._pointer, period)
    def ready(self) -> 'None':
        return _lvgl.lv_timer_ready(self._pointer)
    def set_repeat_count(self, repeat_count: 'int') -> 'None':
        return _lvgl.lv_timer_set_repeat_count(self._pointer, repeat_count)
    def set_auto_delete(self, auto_delete: 'bool') -> 'None':
        return _lvgl.lv_timer_set_auto_delete(self._pointer, auto_delete)
    def set_user_data(self, user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_timer_set_user_data(self._pointer, ffi.NULL if user_data is None else user_data)
    def reset(self) -> 'None':
        return _lvgl.lv_timer_reset(self._pointer)
    def get_next(self) -> 'timer':
        result = timer.__new__(timer)
        result._pointer = _lvgl.lv_timer_get_next(self._pointer)
        return result if result._pointer else None
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_timer_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_paused(self) -> 'bool':
        return _lvgl.lv_timer_get_paused(self._pointer)

class tileview_tile:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_tileview_tile_t[2]')
        _objects[self] = self._pointer

class tileview(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_tileview_create(parent._pointer if parent else ffi.NULL)
    def add_tile(self, col_id: 'int', row_id: 'int', dir: 'DIR') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_tileview_add_tile(self._pointer, col_id, row_id, dir.value if dir and isinstance(dir, Enum) else (dir or 0))
        return result if result._pointer else None
    def set_tile(self, tile_obj: 'obj', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_tileview_set_tile(self._pointer, tile_obj._pointer if tile_obj else ffi.NULL, anim_en)
    def set_tile_by_index(self, col_id: 'int', row_id: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_tileview_set_tile_by_index(self._pointer, col_id, row_id, anim_en)
    def get_tile_active(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_tileview_get_tile_active(self._pointer)
        return result if result._pointer else None

class thread_sync:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_thread_sync_t[2]')
        _objects[self] = self._pointer

class theme:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_theme_t[2]')
        _objects[self] = self._pointer
    def apply(self) -> 'None':
        return _lvgl.lv_theme_apply(self._pointer)
    def set_parent(self, parent: 'theme') -> 'None':
        return _lvgl.lv_theme_set_parent(self._pointer, parent._pointer if parent else ffi.NULL)
    def set_apply_cb(self, apply_cb: 'lv_theme_apply_cb_t') -> 'None':
        def wrap_apply_cb(original_apply_cb):
            def apply_cb(_t0, _o0):
                t0 = theme.__new__(theme)
                t0._pointer = _t0
                o0 = obj.__new__(obj)
                o0._pointer = _o0
                original_apply_cb(t0, o0)
            return ffi.callback('void (*)(lv_theme_t*, lv_obj_t*)', apply_cb)
        if isinstance(apply_cb, ffi.CData):
            apply_cb_wrapper = apply_cb
        else:
            apply_cb_wrapper = self._callbacks.get(apply_cb)
        if not apply_cb_wrapper:
            apply_cb_wrapper = wrap_apply_cb(apply_cb)
            self._callbacks[apply_cb] = apply_cb_wrapper
        return _lvgl.lv_theme_set_apply_cb(self._pointer, apply_cb_wrapper)
    def get_font_small(self) -> 'font':
        result = font.__new__(font)
        result._pointer = _lvgl.lv_theme_get_font_small(self._pointer)
        return result if result._pointer else None
    def get_font_normal(self) -> 'font':
        result = font.__new__(font)
        result._pointer = _lvgl.lv_theme_get_font_normal(self._pointer)
        return result if result._pointer else None
    def get_font_large(self) -> 'font':
        result = font.__new__(font)
        result._pointer = _lvgl.lv_theme_get_font_large(self._pointer)
        return result if result._pointer else None
    def get_color_primary(self) -> 'lv_color_t':
        return _lvgl.lv_theme_get_color_primary(self._pointer)
    def get_color_secondary(self) -> 'lv_color_t':
        return _lvgl.lv_theme_get_color_secondary(self._pointer)

class textarea(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_textarea_create(parent._pointer if parent else ffi.NULL)
    def add_char(self, c: 'int') -> 'None':
        return _lvgl.lv_textarea_add_char(self._pointer, c)
    def add_text(self, txt: 'str') -> 'None':
        return _lvgl.lv_textarea_add_text(self._pointer, txt.encode('utf-8'))
    def delete_char(self) -> 'None':
        return _lvgl.lv_textarea_delete_char(self._pointer)
    def delete_char_forward(self) -> 'None':
        return _lvgl.lv_textarea_delete_char_forward(self._pointer)
    def set_text(self, txt: 'str') -> 'None':
        return _lvgl.lv_textarea_set_text(self._pointer, txt.encode('utf-8'))
    def set_placeholder_text(self, txt: 'str') -> 'None':
        return _lvgl.lv_textarea_set_placeholder_text(self._pointer, txt.encode('utf-8'))
    def set_cursor_pos(self, pos: 'int') -> 'None':
        return _lvgl.lv_textarea_set_cursor_pos(self._pointer, pos)
    def set_cursor_click_pos(self, en: 'bool') -> 'None':
        return _lvgl.lv_textarea_set_cursor_click_pos(self._pointer, en)
    def set_password_mode(self, en: 'bool') -> 'None':
        return _lvgl.lv_textarea_set_password_mode(self._pointer, en)
    def set_password_bullet(self, bullet: 'str') -> 'None':
        return _lvgl.lv_textarea_set_password_bullet(self._pointer, bullet.encode('utf-8'))
    def set_one_line(self, en: 'bool') -> 'None':
        return _lvgl.lv_textarea_set_one_line(self._pointer, en)
    def set_accepted_chars(self, list: 'str') -> 'None':
        return _lvgl.lv_textarea_set_accepted_chars(self._pointer, list.encode('utf-8'))
    def set_max_length(self, num: 'int') -> 'None':
        return _lvgl.lv_textarea_set_max_length(self._pointer, num)
    def set_insert_replace(self, txt: 'str') -> 'None':
        return _lvgl.lv_textarea_set_insert_replace(self._pointer, txt.encode('utf-8'))
    def set_text_selection(self, en: 'bool') -> 'None':
        return _lvgl.lv_textarea_set_text_selection(self._pointer, en)
    def set_password_show_time(self, time: 'int') -> 'None':
        return _lvgl.lv_textarea_set_password_show_time(self._pointer, time)
    def set_align(self, align: 'TEXT_ALIGN') -> 'None':
        return _lvgl.lv_textarea_set_align(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def get_text(self) -> 'str':
        result = _lvgl.lv_textarea_get_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_placeholder_text(self) -> 'str':
        result = _lvgl.lv_textarea_get_placeholder_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_label(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_textarea_get_label(self._pointer)
        return result if result._pointer else None
    def get_cursor_pos(self) -> 'int':
        return _lvgl.lv_textarea_get_cursor_pos(self._pointer)
    def get_cursor_click_pos(self) -> 'bool':
        return _lvgl.lv_textarea_get_cursor_click_pos(self._pointer)
    def get_password_mode(self) -> 'bool':
        return _lvgl.lv_textarea_get_password_mode(self._pointer)
    def get_password_bullet(self) -> 'str':
        result = _lvgl.lv_textarea_get_password_bullet(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_one_line(self) -> 'bool':
        return _lvgl.lv_textarea_get_one_line(self._pointer)
    def get_accepted_chars(self) -> 'str':
        result = _lvgl.lv_textarea_get_accepted_chars(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_max_length(self) -> 'int':
        return _lvgl.lv_textarea_get_max_length(self._pointer)
    def text_is_selected(self) -> 'bool':
        return _lvgl.lv_textarea_text_is_selected(self._pointer)
    def get_text_selection(self) -> 'bool':
        return _lvgl.lv_textarea_get_text_selection(self._pointer)
    def get_password_show_time(self) -> 'int':
        return _lvgl.lv_textarea_get_password_show_time(self._pointer)
    def get_current_char(self) -> 'int':
        return _lvgl.lv_textarea_get_current_char(self._pointer)
    def clear_selection(self) -> 'None':
        return _lvgl.lv_textarea_clear_selection(self._pointer)
    def cursor_right(self) -> 'None':
        return _lvgl.lv_textarea_cursor_right(self._pointer)
    def cursor_left(self) -> 'None':
        return _lvgl.lv_textarea_cursor_left(self._pointer)
    def cursor_down(self) -> 'None':
        return _lvgl.lv_textarea_cursor_down(self._pointer)
    def cursor_up(self) -> 'None':
        return _lvgl.lv_textarea_cursor_up(self._pointer)

class tabview(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_tabview_create(parent._pointer if parent else ffi.NULL)
    def add_tab(self, name: 'str') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_tabview_add_tab(self._pointer, name.encode('utf-8'))
        return result if result._pointer else None
    def rename_tab(self, idx: 'int', new_name: 'str') -> 'None':
        return _lvgl.lv_tabview_rename_tab(self._pointer, idx, new_name.encode('utf-8'))
    def set_active(self, idx: 'int', anim_en: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_tabview_set_active(self._pointer, idx, anim_en)
    def set_tab_bar_position(self, dir: 'DIR') -> 'None':
        return _lvgl.lv_tabview_set_tab_bar_position(self._pointer, dir.value if dir and isinstance(dir, Enum) else (dir or 0))
    def set_tab_bar_size(self, size: 'int') -> 'None':
        return _lvgl.lv_tabview_set_tab_bar_size(self._pointer, size)
    def get_tab_count(self) -> 'int':
        return _lvgl.lv_tabview_get_tab_count(self._pointer)
    def get_tab_active(self) -> 'int':
        return _lvgl.lv_tabview_get_tab_active(self._pointer)
    def get_content(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_tabview_get_content(self._pointer)
        return result if result._pointer else None
    def get_tab_bar(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_tabview_get_tab_bar(self._pointer)
        return result if result._pointer else None

class table_cell:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_table_cell_t[2]')
        _objects[self] = self._pointer

class table(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_table_create(parent._pointer if parent else ffi.NULL)
    def set_cell_value(self, row: 'int', col: 'int', txt: 'str') -> 'None':
        return _lvgl.lv_table_set_cell_value(self._pointer, row, col, txt.encode('utf-8'))
    def set_row_count(self, row_cnt: 'int') -> 'None':
        return _lvgl.lv_table_set_row_count(self._pointer, row_cnt)
    def set_column_count(self, col_cnt: 'int') -> 'None':
        return _lvgl.lv_table_set_column_count(self._pointer, col_cnt)
    def set_column_width(self, col_id: 'int', w: 'int') -> 'None':
        return _lvgl.lv_table_set_column_width(self._pointer, col_id, w)
    def set_cell_ctrl(self, row: 'int', col: 'int', ctrl: 'TABLE_CELL_CTRL') -> 'None':
        return _lvgl.lv_table_set_cell_ctrl(self._pointer, row, col, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def clear_cell_ctrl(self, row: 'int', col: 'int', ctrl: 'TABLE_CELL_CTRL') -> 'None':
        return _lvgl.lv_table_clear_cell_ctrl(self._pointer, row, col, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def set_cell_user_data(self, row: 'int', col: 'int', user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_table_set_cell_user_data(self._pointer, row, col, ffi.NULL if user_data is None else user_data)
    def set_selected_cell(self, row: 'int', col: 'int') -> 'None':
        return _lvgl.lv_table_set_selected_cell(self._pointer, row, col)
    def get_cell_value(self, row: 'int', col: 'int') -> 'str':
        result = _lvgl.lv_table_get_cell_value(self._pointer, row, col)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_row_count(self) -> 'int':
        return _lvgl.lv_table_get_row_count(self._pointer)
    def get_column_count(self) -> 'int':
        return _lvgl.lv_table_get_column_count(self._pointer)
    def get_column_width(self, col: 'int') -> 'int':
        return _lvgl.lv_table_get_column_width(self._pointer, col)
    def has_cell_ctrl(self, row: 'int', col: 'int', ctrl: 'TABLE_CELL_CTRL') -> 'bool':
        return _lvgl.lv_table_has_cell_ctrl(self._pointer, row, col, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def get_selected_cell(self, row: 'int', col: 'int') -> 'None':
        return _lvgl.lv_table_get_selected_cell(self._pointer, ffi.NULL if row is None else row, ffi.NULL if col is None else col)
    def get_cell_user_data(self, row: 'int', col: 'int') -> 'str':
        result = _lvgl.lv_table_get_cell_user_data(self._pointer, row, col)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')

class switch(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_switch_create(parent._pointer if parent else ffi.NULL)
    def set_orientation(self, orientation: 'SWITCH_ORIENTATION') -> 'None':
        return _lvgl.lv_switch_set_orientation(self._pointer, orientation.value if orientation and isinstance(orientation, Enum) else (orientation or 0))
    def get_orientation(self) -> 'lv_switch_orientation_t':
        return _lvgl.lv_switch_get_orientation(self._pointer)

class subject:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_subject_t[2]')
        _objects[self] = self._pointer
    def init_int(self, value: 'int') -> 'None':
        return _lvgl.lv_subject_init_int(self._pointer, value)
    def set_int(self, value: 'int') -> 'None':
        return _lvgl.lv_subject_set_int(self._pointer, value)
    def get_int(self) -> 'int':
        return _lvgl.lv_subject_get_int(self._pointer)
    def get_previous_int(self) -> 'int':
        return _lvgl.lv_subject_get_previous_int(self._pointer)
    def init_string(self, buf: 'str', prev_buf: 'str', size: 'size_t', value: 'str') -> 'None':
        return _lvgl.lv_subject_init_string(self._pointer, buf.encode('utf-8'), prev_buf.encode('utf-8'), size, value.encode('utf-8'))
    def copy_string(self, buf: 'str') -> 'None':
        return _lvgl.lv_subject_copy_string(self._pointer, buf.encode('utf-8'))
    def get_string(self) -> 'str':
        result = _lvgl.lv_subject_get_string(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_previous_string(self) -> 'str':
        result = _lvgl.lv_subject_get_previous_string(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def init_pointer(self, value: 'None') -> 'None':
        return _lvgl.lv_subject_init_pointer(self._pointer, ffi.NULL if value is None else value)
    def set_pointer(self, ptr: 'None') -> 'None':
        return _lvgl.lv_subject_set_pointer(self._pointer, ffi.NULL if ptr is None else ptr)
    def get_pointer(self) -> 'None':
        return _lvgl.lv_subject_get_pointer(self._pointer)
    def get_previous_pointer(self) -> 'None':
        return _lvgl.lv_subject_get_previous_pointer(self._pointer)
    def init_color(self, color: 'lv_color_t') -> 'None':
        return _lvgl.lv_subject_init_color(self._pointer, color)
    def set_color(self, color: 'lv_color_t') -> 'None':
        return _lvgl.lv_subject_set_color(self._pointer, color)
    def get_color(self) -> 'lv_color_t':
        return _lvgl.lv_subject_get_color(self._pointer)
    def get_previous_color(self) -> 'lv_color_t':
        return _lvgl.lv_subject_get_previous_color(self._pointer)
    def init_group(self, list: 'lv_subject_t', list_len: 'int') -> 'None':
        return _lvgl.lv_subject_init_group(self._pointer, ffi.NULL if list is None else list, list_len)
    def deinit(self) -> 'None':
        return _lvgl.lv_subject_deinit(self._pointer)
    def get_group_element(self, index: 'int') -> 'subject':
        result = subject.__new__(subject)
        result._pointer = _lvgl.lv_subject_get_group_element(self._pointer, index)
        return result if result._pointer else None
    def add_observer(self, observer_cb: 'lv_observer_cb_t', user_data: 'str') -> 'observer':
        def wrap_observer_cb(original_observer_cb):
            def observer_cb(_observer, _subject):
                observer = observer.__new__(observer)
                observer._pointer = _observer
                subject = subject.__new__(subject)
                subject._pointer = _subject
                original_observer_cb(observer, subject)
            return ffi.callback('void (*)(lv_observer_t*, lv_subject_t*)', observer_cb)
        if isinstance(observer_cb, ffi.CData):
            observer_cb_wrapper = observer_cb
        else:
            observer_cb_wrapper = self._callbacks.get(observer_cb)
        if not observer_cb_wrapper:
            observer_cb_wrapper = wrap_observer_cb(observer_cb)
            self._callbacks[observer_cb] = observer_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_subject_add_observer(self._pointer, observer_cb_wrapper, ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def add_observer_obj(self, observer_cb: 'lv_observer_cb_t', obj: 'obj', user_data: 'str') -> 'observer':
        def wrap_observer_cb(original_observer_cb):
            def observer_cb(_observer, _subject):
                observer = observer.__new__(observer)
                observer._pointer = _observer
                subject = subject.__new__(subject)
                subject._pointer = _subject
                original_observer_cb(observer, subject)
            return ffi.callback('void (*)(lv_observer_t*, lv_subject_t*)', observer_cb)
        if isinstance(observer_cb, ffi.CData):
            observer_cb_wrapper = observer_cb
        else:
            observer_cb_wrapper = self._callbacks.get(observer_cb)
        if not observer_cb_wrapper:
            observer_cb_wrapper = wrap_observer_cb(observer_cb)
            self._callbacks[observer_cb] = observer_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_subject_add_observer_obj(self._pointer, observer_cb_wrapper, obj._pointer if obj else ffi.NULL, ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def add_observer_with_target(self, observer_cb: 'lv_observer_cb_t', target: 'None', user_data: 'str') -> 'observer':
        def wrap_observer_cb(original_observer_cb):
            def observer_cb(_observer, _subject):
                observer = observer.__new__(observer)
                observer._pointer = _observer
                subject = subject.__new__(subject)
                subject._pointer = _subject
                original_observer_cb(observer, subject)
            return ffi.callback('void (*)(lv_observer_t*, lv_subject_t*)', observer_cb)
        if isinstance(observer_cb, ffi.CData):
            observer_cb_wrapper = observer_cb
        else:
            observer_cb_wrapper = self._callbacks.get(observer_cb)
        if not observer_cb_wrapper:
            observer_cb_wrapper = wrap_observer_cb(observer_cb)
            self._callbacks[observer_cb] = observer_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_subject_add_observer_with_target(self._pointer, observer_cb_wrapper, ffi.NULL if target is None else target, ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def notify(self) -> 'None':
        return _lvgl.lv_subject_notify(self._pointer)

class style_transition_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_style_transition_dsc_t[2]')
        _lvgl.lv_style_transition_dsc_init(self._pointer)
        _objects[self] = self._pointer

class style_const_prop:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_style_const_prop_t[2]')
        _objects[self] = self._pointer

class style:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def set_size(self, width, height):
        self.set_width(width)
        self.set_height(height)
    def set_pad_all(self, value):
        self.set_pad_left(value)
        self.set_pad_right(value)
        self.set_pad_top(value)
        self.set_pad_bottom(value)
    def set_pad_hor(self, value):
        self.set_pad_left(value)
        self.set_pad_right(value)
    def set_pad_ver(self, value):
        self.set_pad_top(value)
        self.set_pad_bottom(value)
    def set_pad_gap(self, value):
        self.set_pad_row(value)
        self.set_pad_column(value)
    def set_margin_hor(self, value):
        self.set_margin_left(value)
        self.set_margin_right(value)
    def set_margin_ver(self, value):
        self.set_margin_top(value)
        self.set_margin_bottom(value)
    def set_margin_all(self, value):
        self.set_margin_left(value)
        self.set_margin_right(value)
        self.set_margin_top(value)
        self.set_margin_bottom(value)
    def set_transform_scale(self, value):
        self.set_transform_scale_x(value)
        self.set_transform_scale_y(value)
    def __init__(self):
        self._pointer = ffi.new('lv_style_t[2]')
        _lvgl.lv_style_init(self._pointer)
        _objects[self] = self._pointer
    def reset(self) -> 'None':
        return _lvgl.lv_style_reset(self._pointer)
    def copy(self, src: 'style') -> 'None':
        return _lvgl.lv_style_copy(self._pointer, src._pointer if src else ffi.NULL)
    def remove_prop(self, prop: 'lv_style_prop_t') -> 'bool':
        return _lvgl.lv_style_remove_prop(self._pointer, prop)
    def set_prop(self, prop: 'lv_style_prop_t', value: 'lv_style_value_t') -> 'None':
        return _lvgl.lv_style_set_prop(self._pointer, prop, value)
    def get_prop(self, prop: 'lv_style_prop_t', value: 'lv_style_value_t') -> 'lv_style_res_t':
        return _lvgl.lv_style_get_prop(self._pointer, prop, ffi.NULL if value is None else value)
    def is_empty(self) -> 'bool':
        return _lvgl.lv_style_is_empty(self._pointer)
    def set_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_width(self._pointer, value)
    def set_min_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_min_width(self._pointer, value)
    def set_max_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_max_width(self._pointer, value)
    def set_height(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_height(self._pointer, value)
    def set_min_height(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_min_height(self._pointer, value)
    def set_max_height(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_max_height(self._pointer, value)
    def set_length(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_length(self._pointer, value)
    def set_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_x(self._pointer, value)
    def set_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_y(self._pointer, value)
    def set_align(self, value: 'ALIGN') -> 'None':
        return _lvgl.lv_style_set_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_transform_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_width(self._pointer, value)
    def set_transform_height(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_height(self._pointer, value)
    def set_translate_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_translate_x(self._pointer, value)
    def set_translate_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_translate_y(self._pointer, value)
    def set_translate_radial(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_translate_radial(self._pointer, value)
    def set_transform_scale_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_scale_x(self._pointer, value)
    def set_transform_scale_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_scale_y(self._pointer, value)
    def set_transform_rotation(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_rotation(self._pointer, value)
    def set_transform_pivot_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_pivot_x(self._pointer, value)
    def set_transform_pivot_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_pivot_y(self._pointer, value)
    def set_transform_skew_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_skew_x(self._pointer, value)
    def set_transform_skew_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_transform_skew_y(self._pointer, value)
    def set_pad_top(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_top(self._pointer, value)
    def set_pad_bottom(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_bottom(self._pointer, value)
    def set_pad_left(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_left(self._pointer, value)
    def set_pad_right(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_right(self._pointer, value)
    def set_pad_row(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_row(self._pointer, value)
    def set_pad_column(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_column(self._pointer, value)
    def set_pad_radial(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_pad_radial(self._pointer, value)
    def set_margin_top(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_margin_top(self._pointer, value)
    def set_margin_bottom(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_margin_bottom(self._pointer, value)
    def set_margin_left(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_margin_left(self._pointer, value)
    def set_margin_right(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_margin_right(self._pointer, value)
    def set_bg_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_bg_color(self._pointer, value)
    def set_bg_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_bg_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_grad_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_bg_grad_color(self._pointer, value)
    def set_bg_grad_dir(self, value: 'GRAD_DIR') -> 'None':
        return _lvgl.lv_style_set_bg_grad_dir(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_main_stop(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_bg_main_stop(self._pointer, value)
    def set_bg_grad_stop(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_bg_grad_stop(self._pointer, value)
    def set_bg_main_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_bg_main_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_grad_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_bg_grad_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_grad(self, value: 'grad_dsc') -> 'None':
        return _lvgl.lv_style_set_bg_grad(self._pointer, value._pointer if value else ffi.NULL)
    def set_bg_image_src(self, value: 'None') -> 'None':
        return _lvgl.lv_style_set_bg_image_src(self._pointer, ffi.NULL if value is None else value)
    def set_bg_image_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_bg_image_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_image_recolor(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_bg_image_recolor(self._pointer, value)
    def set_bg_image_recolor_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_bg_image_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bg_image_tiled(self, value: 'bool') -> 'None':
        return _lvgl.lv_style_set_bg_image_tiled(self._pointer, value)
    def set_border_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_border_color(self._pointer, value)
    def set_border_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_border_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_border_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_border_width(self._pointer, value)
    def set_border_side(self, value: 'BORDER_SIDE') -> 'None':
        return _lvgl.lv_style_set_border_side(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_border_post(self, value: 'bool') -> 'None':
        return _lvgl.lv_style_set_border_post(self._pointer, value)
    def set_outline_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_outline_width(self._pointer, value)
    def set_outline_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_outline_color(self._pointer, value)
    def set_outline_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_outline_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_outline_pad(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_outline_pad(self._pointer, value)
    def set_shadow_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_shadow_width(self._pointer, value)
    def set_shadow_offset_x(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_shadow_offset_x(self._pointer, value)
    def set_shadow_offset_y(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_shadow_offset_y(self._pointer, value)
    def set_shadow_spread(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_shadow_spread(self._pointer, value)
    def set_shadow_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_shadow_color(self._pointer, value)
    def set_shadow_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_shadow_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_image_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_image_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_image_recolor(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_image_recolor(self._pointer, value)
    def set_image_recolor_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_image_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_line_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_line_width(self._pointer, value)
    def set_line_dash_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_line_dash_width(self._pointer, value)
    def set_line_dash_gap(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_line_dash_gap(self._pointer, value)
    def set_line_rounded(self, value: 'bool') -> 'None':
        return _lvgl.lv_style_set_line_rounded(self._pointer, value)
    def set_line_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_line_color(self._pointer, value)
    def set_line_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_line_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_arc_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_arc_width(self._pointer, value)
    def set_arc_rounded(self, value: 'bool') -> 'None':
        return _lvgl.lv_style_set_arc_rounded(self._pointer, value)
    def set_arc_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_arc_color(self._pointer, value)
    def set_arc_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_arc_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_arc_image_src(self, value: 'None') -> 'None':
        return _lvgl.lv_style_set_arc_image_src(self._pointer, ffi.NULL if value is None else value)
    def set_text_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_text_color(self._pointer, value)
    def set_text_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_text_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_text_font(self, value: 'font') -> 'None':
        return _lvgl.lv_style_set_text_font(self._pointer, value._pointer if value else ffi.NULL)
    def set_text_letter_space(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_text_letter_space(self._pointer, value)
    def set_text_line_space(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_text_line_space(self._pointer, value)
    def set_text_decor(self, value: 'TEXT_DECOR') -> 'None':
        return _lvgl.lv_style_set_text_decor(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_text_align(self, value: 'TEXT_ALIGN') -> 'None':
        return _lvgl.lv_style_set_text_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_text_outline_stroke_color(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_text_outline_stroke_color(self._pointer, value)
    def set_text_outline_stroke_width(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_text_outline_stroke_width(self._pointer, value)
    def set_text_outline_stroke_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_text_outline_stroke_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_radius(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_radius(self._pointer, value)
    def set_radial_offset(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_radial_offset(self._pointer, value)
    def set_clip_corner(self, value: 'bool') -> 'None':
        return _lvgl.lv_style_set_clip_corner(self._pointer, value)
    def set_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_opa_layered(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_opa_layered(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_color_filter_dsc(self, value: 'lv_color_filter_dsc_t') -> 'None':
        return _lvgl.lv_style_set_color_filter_dsc(self._pointer, ffi.NULL if value is None else value)
    def set_color_filter_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_color_filter_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_recolor(self, value: 'lv_color_t') -> 'None':
        return _lvgl.lv_style_set_recolor(self._pointer, value)
    def set_recolor_opa(self, value: 'OPA') -> 'None':
        return _lvgl.lv_style_set_recolor_opa(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_anim(self, value: 'anim') -> 'None':
        return _lvgl.lv_style_set_anim(self._pointer, value._pointer if value else ffi.NULL)
    def set_anim_duration(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_anim_duration(self._pointer, value)
    def set_transition(self, value: 'style_transition_dsc') -> 'None':
        return _lvgl.lv_style_set_transition(self._pointer, value._pointer if value else ffi.NULL)
    def set_blend_mode(self, value: 'BLEND_MODE') -> 'None':
        return _lvgl.lv_style_set_blend_mode(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_layout(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_layout(self._pointer, value)
    def set_base_dir(self, value: 'BASE_DIR') -> 'None':
        return _lvgl.lv_style_set_base_dir(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_bitmap_mask_src(self, value: 'None') -> 'None':
        return _lvgl.lv_style_set_bitmap_mask_src(self._pointer, ffi.NULL if value is None else value)
    def set_rotary_sensitivity(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_rotary_sensitivity(self._pointer, value)
    def set_flex_flow(self, value: 'FLEX_FLOW') -> 'None':
        return _lvgl.lv_style_set_flex_flow(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_flex_main_place(self, value: 'FLEX_ALIGN') -> 'None':
        return _lvgl.lv_style_set_flex_main_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_flex_cross_place(self, value: 'FLEX_ALIGN') -> 'None':
        return _lvgl.lv_style_set_flex_cross_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_flex_track_place(self, value: 'FLEX_ALIGN') -> 'None':
        return _lvgl.lv_style_set_flex_track_place(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_flex_grow(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_flex_grow(self._pointer, value)
    def set_grid_column_dsc_array(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_column_dsc_array(self._pointer, ffi.NULL if value is None else value)
    def set_grid_column_align(self, value: 'GRID_ALIGN') -> 'None':
        return _lvgl.lv_style_set_grid_column_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_grid_row_dsc_array(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_row_dsc_array(self._pointer, ffi.NULL if value is None else value)
    def set_grid_row_align(self, value: 'GRID_ALIGN') -> 'None':
        return _lvgl.lv_style_set_grid_row_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_grid_cell_column_pos(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_cell_column_pos(self._pointer, value)
    def set_grid_cell_x_align(self, value: 'GRID_ALIGN') -> 'None':
        return _lvgl.lv_style_set_grid_cell_x_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_grid_cell_column_span(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_cell_column_span(self._pointer, value)
    def set_grid_cell_row_pos(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_cell_row_pos(self._pointer, value)
    def set_grid_cell_y_align(self, value: 'GRID_ALIGN') -> 'None':
        return _lvgl.lv_style_set_grid_cell_y_align(self._pointer, value.value if value and isinstance(value, Enum) else (value or 0))
    def set_grid_cell_row_span(self, value: 'int') -> 'None':
        return _lvgl.lv_style_set_grid_cell_row_span(self._pointer, value)
    def is_const(self) -> 'bool':
        return _lvgl.lv_style_is_const(self._pointer)
    def get_prop_inlined(self, prop: 'lv_style_prop_t', value: 'lv_style_value_t') -> 'lv_style_res_t':
        return _lvgl.lv_style_get_prop_inlined(self._pointer, prop, ffi.NULL if value is None else value)

class sqrt_res:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_sqrt_res_t[2]')
        _objects[self] = self._pointer

class spinbox(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_spinbox_create(parent._pointer if parent else ffi.NULL)
    def set_value(self, v: 'int') -> 'None':
        return _lvgl.lv_spinbox_set_value(self._pointer, v)
    def set_rollover(self, rollover: 'bool') -> 'None':
        return _lvgl.lv_spinbox_set_rollover(self._pointer, rollover)
    def set_digit_format(self, digit_count: 'int', sep_pos: 'int') -> 'None':
        return _lvgl.lv_spinbox_set_digit_format(self._pointer, digit_count, sep_pos)
    def set_step(self, step: 'int') -> 'None':
        return _lvgl.lv_spinbox_set_step(self._pointer, step)
    def set_range(self, range_min: 'int', range_max: 'int') -> 'None':
        return _lvgl.lv_spinbox_set_range(self._pointer, range_min, range_max)
    def set_cursor_pos(self, pos: 'int') -> 'None':
        return _lvgl.lv_spinbox_set_cursor_pos(self._pointer, pos)
    def set_digit_step_direction(self, direction: 'DIR') -> 'None':
        return _lvgl.lv_spinbox_set_digit_step_direction(self._pointer, direction.value if direction and isinstance(direction, Enum) else (direction or 0))
    def get_rollover(self) -> 'bool':
        return _lvgl.lv_spinbox_get_rollover(self._pointer)
    def get_value(self) -> 'int':
        return _lvgl.lv_spinbox_get_value(self._pointer)
    def get_step(self) -> 'int':
        return _lvgl.lv_spinbox_get_step(self._pointer)
    def step_next(self) -> 'None':
        return _lvgl.lv_spinbox_step_next(self._pointer)
    def step_prev(self) -> 'None':
        return _lvgl.lv_spinbox_step_prev(self._pointer)
    def increment(self) -> 'None':
        return _lvgl.lv_spinbox_increment(self._pointer)
    def decrement(self) -> 'None':
        return _lvgl.lv_spinbox_decrement(self._pointer)

class spangroup(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_spangroup_create(parent._pointer if parent else ffi.NULL)
    def add_span(self) -> 'span':
        result = span.__new__(span)
        result._pointer = _lvgl.lv_spangroup_add_span(self._pointer)
        return result if result._pointer else None
    def delete_span(self, span: 'span') -> 'None':
        return _lvgl.lv_spangroup_delete_span(self._pointer, span._pointer if span else ffi.NULL)
    def set_span_text(self, span: 'span', text: 'str') -> 'None':
        return _lvgl.lv_spangroup_set_span_text(self._pointer, span._pointer if span else ffi.NULL, text.encode('utf-8'))
    def set_span_text_static(self, span: 'span', text: 'str') -> 'None':
        return _lvgl.lv_spangroup_set_span_text_static(self._pointer, span._pointer if span else ffi.NULL, text.encode('utf-8'))
    def set_span_style(self, span: 'span', style: 'style') -> 'None':
        return _lvgl.lv_spangroup_set_span_style(self._pointer, span._pointer if span else ffi.NULL, style._pointer if style else ffi.NULL)
    def set_align(self, align: 'TEXT_ALIGN') -> 'None':
        return _lvgl.lv_spangroup_set_align(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def set_overflow(self, overflow: 'SPAN_OVERFLOW') -> 'None':
        return _lvgl.lv_spangroup_set_overflow(self._pointer, overflow.value if overflow and isinstance(overflow, Enum) else (overflow or 0))
    def set_indent(self, indent: 'int') -> 'None':
        return _lvgl.lv_spangroup_set_indent(self._pointer, indent)
    def set_mode(self, mode: 'SPAN_MODE') -> 'None':
        return _lvgl.lv_spangroup_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_max_lines(self, lines: 'int') -> 'None':
        return _lvgl.lv_spangroup_set_max_lines(self._pointer, lines)
    def get_child(self, id: 'int') -> 'span':
        result = span.__new__(span)
        result._pointer = _lvgl.lv_spangroup_get_child(self._pointer, id)
        return result if result._pointer else None
    def get_span_count(self) -> 'int':
        return _lvgl.lv_spangroup_get_span_count(self._pointer)
    def get_align(self) -> 'lv_text_align_t':
        return _lvgl.lv_spangroup_get_align(self._pointer)
    def get_overflow(self) -> 'lv_span_overflow_t':
        return _lvgl.lv_spangroup_get_overflow(self._pointer)
    def get_indent(self) -> 'int':
        return _lvgl.lv_spangroup_get_indent(self._pointer)
    def get_mode(self) -> 'lv_span_mode_t':
        return _lvgl.lv_spangroup_get_mode(self._pointer)
    def get_max_lines(self) -> 'int':
        return _lvgl.lv_spangroup_get_max_lines(self._pointer)
    def get_max_line_height(self) -> 'int':
        return _lvgl.lv_spangroup_get_max_line_height(self._pointer)
    def get_expand_width(self, max_width: 'int') -> 'int':
        return _lvgl.lv_spangroup_get_expand_width(self._pointer, max_width)
    def get_expand_height(self, width: 'int') -> 'int':
        return _lvgl.lv_spangroup_get_expand_height(self._pointer, width)
    def get_span_coords(self, span: 'span') -> 'span_coords':
        result = span_coords.__new__(span_coords)
        result._pointer = _lvgl.lv_spangroup_get_span_coords(self._pointer, span._pointer if span else ffi.NULL)
        return result if result._pointer else None
    def get_span_by_point(self, point: 'point') -> 'span':
        result = span.__new__(span)
        result._pointer = _lvgl.lv_spangroup_get_span_by_point(self._pointer, point._pointer if point else ffi.NULL)
        return result if result._pointer else None
    def refresh(self) -> 'None':
        return _lvgl.lv_spangroup_refresh(self._pointer)

class span_coords:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_span_coords_t[2]')
        _objects[self] = self._pointer

class span:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_span_t[2]')
        _objects[self] = self._pointer
    def set_text(self, text: 'str') -> 'None':
        return _lvgl.lv_span_set_text(self._pointer, text.encode('utf-8'))
    def set_text_static(self, text: 'str') -> 'None':
        return _lvgl.lv_span_set_text_static(self._pointer, text.encode('utf-8'))
    def get_style(self) -> 'style':
        result = style.__new__(style)
        result._pointer = _lvgl.lv_span_get_style(self._pointer)
        return result if result._pointer else None
    def get_text(self) -> 'str':
        result = _lvgl.lv_span_get_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')

class slider(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_slider_create(parent._pointer if parent else ffi.NULL)
    def set_value(self, value: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_slider_set_value(self._pointer, value, anim)
    def set_start_value(self, value: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_slider_set_start_value(self._pointer, value, anim)
    def set_range(self, min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_slider_set_range(self._pointer, min, max)
    def set_mode(self, mode: 'SLIDER_MODE') -> 'None':
        return _lvgl.lv_slider_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_orientation(self, orientation: 'SLIDER_ORIENTATION') -> 'None':
        return _lvgl.lv_slider_set_orientation(self._pointer, orientation.value if orientation and isinstance(orientation, Enum) else (orientation or 0))
    def get_value(self) -> 'int':
        return _lvgl.lv_slider_get_value(self._pointer)
    def get_left_value(self) -> 'int':
        return _lvgl.lv_slider_get_left_value(self._pointer)
    def get_min_value(self) -> 'int':
        return _lvgl.lv_slider_get_min_value(self._pointer)
    def get_max_value(self) -> 'int':
        return _lvgl.lv_slider_get_max_value(self._pointer)
    def is_dragged(self) -> 'bool':
        return _lvgl.lv_slider_is_dragged(self._pointer)
    def get_mode(self) -> 'lv_slider_mode_t':
        return _lvgl.lv_slider_get_mode(self._pointer)
    def get_orientation(self) -> 'lv_slider_orientation_t':
        return _lvgl.lv_slider_get_orientation(self._pointer)
    def is_symmetrical(self) -> 'bool':
        return _lvgl.lv_slider_is_symmetrical(self._pointer)
    def bind_value(self, subject: 'subject') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_slider_bind_value(self._pointer, subject._pointer if subject else ffi.NULL)
        return result if result._pointer else None

class scale_section:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_scale_section_t[2]')
        _objects[self] = self._pointer
    def set_range(self, min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_scale_section_set_range(self._pointer, min, max)
    def set_style(self, part: 'PART', section_part_style: 'style') -> 'None':
        return _lvgl.lv_scale_section_set_style(self._pointer, part.value if part and isinstance(part, Enum) else (part or 0), section_part_style._pointer if section_part_style else ffi.NULL)

class scale(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_scale_create(parent._pointer if parent else ffi.NULL)
    def set_mode(self, mode: 'SCALE_MODE') -> 'None':
        return _lvgl.lv_scale_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_total_tick_count(self, total_tick_count: 'int') -> 'None':
        return _lvgl.lv_scale_set_total_tick_count(self._pointer, total_tick_count)
    def set_major_tick_every(self, major_tick_every: 'int') -> 'None':
        return _lvgl.lv_scale_set_major_tick_every(self._pointer, major_tick_every)
    def set_label_show(self, show_label: 'bool') -> 'None':
        return _lvgl.lv_scale_set_label_show(self._pointer, show_label)
    def set_range(self, min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_scale_set_range(self._pointer, min, max)
    def set_angle_range(self, angle_range: 'int') -> 'None':
        return _lvgl.lv_scale_set_angle_range(self._pointer, angle_range)
    def set_rotation(self, rotation: 'int') -> 'None':
        return _lvgl.lv_scale_set_rotation(self._pointer, rotation)
    def set_line_needle_value(self, needle_line: 'obj', needle_length: 'int', value: 'int') -> 'None':
        return _lvgl.lv_scale_set_line_needle_value(self._pointer, needle_line._pointer if needle_line else ffi.NULL, needle_length, value)
    def set_image_needle_value(self, needle_img: 'obj', value: 'int') -> 'None':
        return _lvgl.lv_scale_set_image_needle_value(self._pointer, needle_img._pointer if needle_img else ffi.NULL, value)
    def set_text_src(self, txt_src: 'str') -> 'None':
        return _lvgl.lv_scale_set_text_src(self._pointer, ffi.NULL if txt_src is None else txt_src)
    def set_post_draw(self, en: 'bool') -> 'None':
        return _lvgl.lv_scale_set_post_draw(self._pointer, en)
    def set_draw_ticks_on_top(self, en: 'bool') -> 'None':
        return _lvgl.lv_scale_set_draw_ticks_on_top(self._pointer, en)
    def add_section(self) -> 'scale_section':
        result = scale_section.__new__(scale_section)
        result._pointer = _lvgl.lv_scale_add_section(self._pointer)
        return result if result._pointer else None
    def set_section_range(self, section: 'scale_section', min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_scale_set_section_range(self._pointer, section._pointer if section else ffi.NULL, min, max)
    def set_section_style_main(self, section: 'scale_section', style: 'style') -> 'None':
        return _lvgl.lv_scale_set_section_style_main(self._pointer, section._pointer if section else ffi.NULL, style._pointer if style else ffi.NULL)
    def set_section_style_indicator(self, section: 'scale_section', style: 'style') -> 'None':
        return _lvgl.lv_scale_set_section_style_indicator(self._pointer, section._pointer if section else ffi.NULL, style._pointer if style else ffi.NULL)
    def set_section_style_items(self, section: 'scale_section', style: 'style') -> 'None':
        return _lvgl.lv_scale_set_section_style_items(self._pointer, section._pointer if section else ffi.NULL, style._pointer if style else ffi.NULL)
    def get_mode(self) -> 'lv_scale_mode_t':
        return _lvgl.lv_scale_get_mode(self._pointer)
    def get_total_tick_count(self) -> 'int':
        return _lvgl.lv_scale_get_total_tick_count(self._pointer)
    def get_major_tick_every(self) -> 'int':
        return _lvgl.lv_scale_get_major_tick_every(self._pointer)
    def get_rotation(self) -> 'int':
        return _lvgl.lv_scale_get_rotation(self._pointer)
    def get_label_show(self) -> 'bool':
        return _lvgl.lv_scale_get_label_show(self._pointer)
    def get_angle_range(self) -> 'int':
        return _lvgl.lv_scale_get_angle_range(self._pointer)
    def get_range_min_value(self) -> 'int':
        return _lvgl.lv_scale_get_range_min_value(self._pointer)
    def get_range_max_value(self) -> 'int':
        return _lvgl.lv_scale_get_range_max_value(self._pointer)

class roller(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_roller_create(parent._pointer if parent else ffi.NULL)
    def set_options(self, options: 'str', mode: 'ROLLER_MODE') -> 'None':
        return _lvgl.lv_roller_set_options(self._pointer, options.encode('utf-8'), mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_selected(self, sel_opt: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_roller_set_selected(self._pointer, sel_opt, anim)
    def set_selected_str(self, sel_opt: 'str', anim: 'lv_anim_enable_t') -> 'bool':
        return _lvgl.lv_roller_set_selected_str(self._pointer, sel_opt.encode('utf-8'), anim)
    def set_visible_row_count(self, row_cnt: 'int') -> 'None':
        return _lvgl.lv_roller_set_visible_row_count(self._pointer, row_cnt)
    def get_selected(self) -> 'int':
        return _lvgl.lv_roller_get_selected(self._pointer)
    def get_selected_str(self, buf: 'str', buf_size: 'int') -> 'None':
        return _lvgl.lv_roller_get_selected_str(self._pointer, buf.encode('utf-8'), buf_size)
    def get_options(self) -> 'str':
        result = _lvgl.lv_roller_get_options(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_option_count(self) -> 'int':
        return _lvgl.lv_roller_get_option_count(self._pointer)
    def bind_value(self, subject: 'subject') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_roller_bind_value(self._pointer, subject._pointer if subject else ffi.NULL)
        return result if result._pointer else None

class rlottie:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_rlottie_t[2]')
        _objects[self] = self._pointer

class rb_node:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_rb_node_t[2]')
        _objects[self] = self._pointer

class rb:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_rb_t[2]')
        _lvgl.lv_rb_init(self._pointer)
        _objects[self] = self._pointer
    def insert(self, key: 'None') -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_insert(self._pointer, ffi.NULL if key is None else key)
        return result if result._pointer else None
    def find(self, key: 'None') -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_find(self._pointer, ffi.NULL if key is None else key)
        return result if result._pointer else None
    def remove_node(self, node: 'rb_node') -> 'None':
        return _lvgl.lv_rb_remove_node(self._pointer, node._pointer if node else ffi.NULL)
    def remove(self, key: 'None') -> 'None':
        return _lvgl.lv_rb_remove(self._pointer, ffi.NULL if key is None else key)
    def drop_node(self, node: 'rb_node') -> 'bool':
        return _lvgl.lv_rb_drop_node(self._pointer, node._pointer if node else ffi.NULL)
    def drop(self, key: 'None') -> 'bool':
        return _lvgl.lv_rb_drop(self._pointer, ffi.NULL if key is None else key)
    def minimum(self) -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_minimum(self._pointer)
        return result if result._pointer else None
    def maximum(self) -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_maximum(self._pointer)
        return result if result._pointer else None
    def minimum_from(self) -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_minimum_from(self._pointer)
        return result if result._pointer else None
    def maximum_from(self) -> 'rb_node':
        result = rb_node.__new__(rb_node)
        result._pointer = _lvgl.lv_rb_maximum_from(self._pointer)
        return result if result._pointer else None
    def destroy(self) -> 'None':
        return _lvgl.lv_rb_destroy(self._pointer)

class qrcode(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_qrcode_create(parent._pointer if parent else ffi.NULL)
    def set_size(self, size: 'int') -> 'None':
        return _lvgl.lv_qrcode_set_size(self._pointer, size)
    def set_dark_color(self, color: 'lv_color_t') -> 'None':
        return _lvgl.lv_qrcode_set_dark_color(self._pointer, color)
    def set_light_color(self, color: 'lv_color_t') -> 'None':
        return _lvgl.lv_qrcode_set_light_color(self._pointer, color)
    def update(self, data: 'str'):
        return _lvgl.lv_qrcode_update(self._pointer, data.encode('utf-8'), len(data))

class profiler_builtin_config:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_profiler_builtin_config_t[2]')
        _objects[self] = self._pointer

class point_precise:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_point_precise_t[2]')
        _objects[self] = self._pointer
    def set(self, x: 'lv_value_precise_t', y: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_point_precise_set(self._pointer, x, y)
    def swap(self, p2: 'point_precise') -> 'None':
        return _lvgl.lv_point_precise_swap(self._pointer, p2._pointer if p2 else ffi.NULL)

class point:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_point_t[2]')
        _objects[self] = self._pointer
    def transform(self, angle: 'int', scale_x: 'int', scale_y: 'int', pivot: 'point', zoom_first: 'bool') -> 'None':
        return _lvgl.lv_point_transform(self._pointer, angle, scale_x, scale_y, pivot._pointer if pivot else ffi.NULL, zoom_first)
    def array_transform(self, count: 'size_t', angle: 'int', scale_x: 'int', scale_y: 'int', pivot: 'point', zoom_first: 'bool') -> 'None':
        return _lvgl.lv_point_array_transform(self._pointer, count, angle, scale_x, scale_y, pivot._pointer if pivot else ffi.NULL, zoom_first)
    def from_precise(self) -> 'point':
        result = point.__new__(point)
        result._pointer = _lvgl.lv_point_from_precise(self._pointer)
        return result if result._pointer else None
    def to_precise(self) -> 'point_precise':
        result = point_precise.__new__(point_precise)
        result._pointer = _lvgl.lv_point_to_precise(self._pointer)
        return result if result._pointer else None
    def set(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_point_set(self._pointer, x, y)
    def swap(self, p2: 'point') -> 'None':
        return _lvgl.lv_point_swap(self._pointer, p2._pointer if p2 else ffi.NULL)

class observer:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_observer_t[2]')
        _objects[self] = self._pointer
    def remove(self) -> 'None':
        return _lvgl.lv_observer_remove(self._pointer)
    def get_target(self) -> 'None':
        return _lvgl.lv_observer_get_target(self._pointer)
    def get_target_obj(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_observer_get_target_obj(self._pointer)
        return result if result._pointer else None
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_observer_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')

class obj_style_transition_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_obj_style_transition_dsc_t[2]')
        _objects[self] = self._pointer

class obj_style:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_obj_style_t[2]')
        _objects[self] = self._pointer

class obj_spec_attr:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_obj_spec_attr_t[2]')
        _objects[self] = self._pointer

class obj_class:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_obj_class_t[2]')
        _objects[self] = self._pointer

class msgbox(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_msgbox_create(parent._pointer if parent else ffi.NULL)
    def add_title(self, title: 'str') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_add_title(self._pointer, title.encode('utf-8'))
        return result if result._pointer else None
    def add_header_button(self, icon: 'None') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_add_header_button(self._pointer, ffi.NULL if icon is None else icon)
        return result if result._pointer else None
    def add_text(self, text: 'str') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_add_text(self._pointer, text.encode('utf-8'))
        return result if result._pointer else None
    def add_footer_button(self, text: 'str') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_add_footer_button(self._pointer, text.encode('utf-8'))
        return result if result._pointer else None
    def add_close_button(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_add_close_button(self._pointer)
        return result if result._pointer else None
    def get_header(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_get_header(self._pointer)
        return result if result._pointer else None
    def get_footer(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_get_footer(self._pointer)
        return result if result._pointer else None
    def get_content(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_get_content(self._pointer)
        return result if result._pointer else None
    def get_title(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_msgbox_get_title(self._pointer)
        return result if result._pointer else None
    def close(self) -> 'None':
        return _lvgl.lv_msgbox_close(self._pointer)
    def close_async(self) -> 'None':
        return _lvgl.lv_msgbox_close_async(self._pointer)

class monkey_config:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_monkey_config_t[2]')
        _objects[self] = self._pointer

class menu_page(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, menu, title):
        self._pointer = _lvgl.lv_menu_page_create(menu._pointer if menu else ffi.NULL, title.encode('utf-8'))

class menu_load_page_event_data:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_menu_load_page_event_data_t[2]')
        _objects[self] = self._pointer

class menu_history:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_menu_history_t[2]')
        _objects[self] = self._pointer

class menu(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_menu_create(parent._pointer if parent else ffi.NULL)
    def cont_create(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_cont_create(self._pointer)
        return result if result._pointer else None
    def section_create(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_section_create(self._pointer)
        return result if result._pointer else None
    def separator_create(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_separator_create(self._pointer)
        return result if result._pointer else None
    def set_page(self, page: 'obj') -> 'None':
        return _lvgl.lv_menu_set_page(self._pointer, page._pointer if page else ffi.NULL)
    def set_page_title(self, title: 'str') -> 'None':
        return _lvgl.lv_menu_set_page_title(self._pointer, title.encode('utf-8'))
    def set_page_title_static(self, title: 'str') -> 'None':
        return _lvgl.lv_menu_set_page_title_static(self._pointer, title.encode('utf-8'))
    def set_sidebar_page(self, page: 'obj') -> 'None':
        return _lvgl.lv_menu_set_sidebar_page(self._pointer, page._pointer if page else ffi.NULL)
    def set_mode_header(self, mode: 'MENU_MODE_HEADER') -> 'None':
        return _lvgl.lv_menu_set_mode_header(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_mode_root_back_button(self, mode: 'MENU_MODE_ROOT_BACK_BUTTON') -> 'None':
        return _lvgl.lv_menu_set_mode_root_back_button(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_load_page_event(self, obj: 'obj', page: 'obj') -> 'None':
        return _lvgl.lv_menu_set_load_page_event(self._pointer, obj._pointer if obj else ffi.NULL, page._pointer if page else ffi.NULL)
    def get_cur_main_page(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_cur_main_page(self._pointer)
        return result if result._pointer else None
    def get_cur_sidebar_page(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_cur_sidebar_page(self._pointer)
        return result if result._pointer else None
    def get_main_header(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_main_header(self._pointer)
        return result if result._pointer else None
    def get_main_header_back_button(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_main_header_back_button(self._pointer)
        return result if result._pointer else None
    def get_sidebar_header(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_sidebar_header(self._pointer)
        return result if result._pointer else None
    def get_sidebar_header_back_button(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_menu_get_sidebar_header_back_button(self._pointer)
        return result if result._pointer else None
    def back_button_is_root(self, obj: 'obj') -> 'bool':
        return _lvgl.lv_menu_back_button_is_root(self._pointer, obj._pointer if obj else ffi.NULL)
    def clear_history(self) -> 'None':
        return _lvgl.lv_menu_clear_history(self._pointer)

class mem_monitor:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_mem_monitor_t[2]')
        _objects[self] = self._pointer

class matrix:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_matrix_t[2]')
        _objects[self] = self._pointer

class ll:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_ll_t[2]')
        _objects[self] = self._pointer

class line(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_line_create(parent._pointer if parent else ffi.NULL)
    def set_points(self, points: 'lv_point_precise_t', point_num: 'int') -> 'None':
        return _lvgl.lv_line_set_points(self._pointer, ffi.NULL if points is None else points, point_num)
    def set_points_mutable(self, points: 'lv_point_precise_t', point_num: 'int') -> 'None':
        return _lvgl.lv_line_set_points_mutable(self._pointer, ffi.NULL if points is None else points, point_num)
    def set_y_invert(self, en: 'bool') -> 'None':
        return _lvgl.lv_line_set_y_invert(self._pointer, en)
    def get_points(self) -> 'point_precise':
        result = point_precise.__new__(point_precise)
        result._pointer = _lvgl.lv_line_get_points(self._pointer)
        return result if result._pointer else None
    def get_point_count(self) -> 'int':
        return _lvgl.lv_line_get_point_count(self._pointer)
    def is_point_array_mutable(self) -> 'bool':
        return _lvgl.lv_line_is_point_array_mutable(self._pointer)
    def get_points_mutable(self) -> 'point_precise':
        result = point_precise.__new__(point_precise)
        result._pointer = _lvgl.lv_line_get_points_mutable(self._pointer)
        return result if result._pointer else None
    def get_y_invert(self) -> 'bool':
        return _lvgl.lv_line_get_y_invert(self._pointer)

class libinput_event:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_libinput_event_t[2]')
        _objects[self] = self._pointer

class libinput:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_libinput_t[2]')
        _objects[self] = self._pointer

class led(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_led_create(parent._pointer if parent else ffi.NULL)
    def set_color(self, color: 'lv_color_t') -> 'None':
        return _lvgl.lv_led_set_color(self._pointer, color)
    def set_brightness(self, bright: 'int') -> 'None':
        return _lvgl.lv_led_set_brightness(self._pointer, bright)
    def on(self) -> 'None':
        return _lvgl.lv_led_on(self._pointer)
    def off(self) -> 'None':
        return _lvgl.lv_led_off(self._pointer)
    def toggle(self) -> 'None':
        return _lvgl.lv_led_toggle(self._pointer)
    def get_brightness(self) -> 'int':
        return _lvgl.lv_led_get_brightness(self._pointer)

class layer:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_layer_t[2]')
        _lvgl.lv_layer_init(self._pointer)
        _objects[self] = self._pointer
    def reset(self) -> 'None':
        return _lvgl.lv_layer_reset(self._pointer)

class label(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_label_create(parent._pointer if parent else ffi.NULL)
    def set_text(self, text: 'str') -> 'None':
        return _lvgl.lv_label_set_text(self._pointer, text.encode('utf-8'))
    def set_text_static(self, text: 'str') -> 'None':
        return _lvgl.lv_label_set_text_static(self._pointer, text.encode('utf-8'))
    def set_long_mode(self, long_mode: 'LABEL_LONG_MODE') -> 'None':
        return _lvgl.lv_label_set_long_mode(self._pointer, long_mode.value if long_mode and isinstance(long_mode, Enum) else (long_mode or 0))
    def set_text_selection_start(self, index: 'int') -> 'None':
        return _lvgl.lv_label_set_text_selection_start(self._pointer, index)
    def set_text_selection_end(self, index: 'int') -> 'None':
        return _lvgl.lv_label_set_text_selection_end(self._pointer, index)
    def set_recolor(self, en: 'bool') -> 'None':
        return _lvgl.lv_label_set_recolor(self._pointer, en)
    def get_text(self) -> 'str':
        result = _lvgl.lv_label_get_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_long_mode(self) -> 'lv_label_long_mode_t':
        return _lvgl.lv_label_get_long_mode(self._pointer)
    def get_letter_pos(self, char_id: 'int', pos: 'point') -> 'None':
        return _lvgl.lv_label_get_letter_pos(self._pointer, char_id, pos._pointer if pos else ffi.NULL)
    def get_letter_on(self, pos_in: 'point', bidi: 'bool') -> 'int':
        return _lvgl.lv_label_get_letter_on(self._pointer, pos_in._pointer if pos_in else ffi.NULL, bidi)
    def is_char_under_pos(self, pos: 'point') -> 'bool':
        return _lvgl.lv_label_is_char_under_pos(self._pointer, pos._pointer if pos else ffi.NULL)
    def get_text_selection_start(self) -> 'int':
        return _lvgl.lv_label_get_text_selection_start(self._pointer)
    def get_text_selection_end(self) -> 'int':
        return _lvgl.lv_label_get_text_selection_end(self._pointer)
    def get_recolor(self) -> 'bool':
        return _lvgl.lv_label_get_recolor(self._pointer)
    def ins_text(self, pos: 'int', txt: 'str') -> 'None':
        return _lvgl.lv_label_ins_text(self._pointer, pos, txt.encode('utf-8'))
    def cut_text(self, pos: 'int', cnt: 'int') -> 'None':
        return _lvgl.lv_label_cut_text(self._pointer, pos, cnt)
    def bind_text(self, subject: 'subject', fmt: 'str') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_label_bind_text(self._pointer, subject._pointer if subject else ffi.NULL, fmt.encode('utf-8'))
        return result if result._pointer else None

class keyboard(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_keyboard_create(parent._pointer if parent else ffi.NULL)
    def set_textarea(self, ta: 'obj') -> 'None':
        return _lvgl.lv_keyboard_set_textarea(self._pointer, ta._pointer if ta else ffi.NULL)
    def set_mode(self, mode: 'KEYBOARD_MODE') -> 'None':
        return _lvgl.lv_keyboard_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_popovers(self, en: 'bool') -> 'None':
        return _lvgl.lv_keyboard_set_popovers(self._pointer, en)
    def set_map(self, mode: 'KEYBOARD_MODE', map: 'str', ctrl_map: 'lv_buttonmatrix_ctrl_t') -> 'None':
        return _lvgl.lv_keyboard_set_map(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0), ffi.NULL if map is None else map, ffi.NULL if ctrl_map is None else ctrl_map)
    def get_textarea(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_keyboard_get_textarea(self._pointer)
        return result if result._pointer else None
    def get_mode(self) -> 'lv_keyboard_mode_t':
        return _lvgl.lv_keyboard_get_mode(self._pointer)
    def get_popovers(self) -> 'bool':
        return _lvgl.lv_keyboard_get_popovers(self._pointer)
    def get_map_array(self) -> 'str':
        result = _lvgl.lv_keyboard_get_map_array(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_selected_button(self) -> 'int':
        return _lvgl.lv_keyboard_get_selected_button(self._pointer)
    def get_button_text(self, btn_id: 'int') -> 'str':
        result = _lvgl.lv_keyboard_get_button_text(self._pointer, btn_id)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def def_event_cb(self) -> 'None':
        return _lvgl.lv_keyboard_def_event_cb(self._pointer)

class iter:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, instance, elem_size, context_size, next_cb):
        def wrap_next_cb(original_next_cb):
            def next_cb(_instance, _context, _elem):
                instance = _instance
                context = _context
                elem = _elem
                return original_next_cb(instance, context, elem)
            return ffi.callback('lv_result_t (*)(void*, void*, void*)', next_cb)
        if isinstance(next_cb, ffi.CData):
            next_cb_wrapper = next_cb
        else:
            next_cb_wrapper = self._callbacks.get(next_cb)
        if not next_cb_wrapper:
            next_cb_wrapper = wrap_next_cb(next_cb)
            self._callbacks[next_cb] = next_cb_wrapper
        self._pointer = _lvgl.lv_iter_create(ffi.NULL if instance is None else instance, elem_size, context_size, next_cb_wrapper)
    def get_context(self) -> 'None':
        return _lvgl.lv_iter_get_context(self._pointer)
    def destroy(self) -> 'None':
        return _lvgl.lv_iter_destroy(self._pointer)
    def next(self, elem: 'None') -> 'lv_result_t':
        return _lvgl.lv_iter_next(self._pointer, ffi.NULL if elem is None else elem)
    def make_peekable(self, capacity: 'int') -> 'None':
        return _lvgl.lv_iter_make_peekable(self._pointer, capacity)
    def peek(self, elem: 'None') -> 'lv_result_t':
        return _lvgl.lv_iter_peek(self._pointer, ffi.NULL if elem is None else elem)
    def peek_advance(self) -> 'lv_result_t':
        return _lvgl.lv_iter_peek_advance(self._pointer)
    def peek_reset(self) -> 'lv_result_t':
        return _lvgl.lv_iter_peek_reset(self._pointer)
    def inspect(self, inspect_cb: 'lv_iter_inspect_cb') -> 'None':
        def wrap_inspect_cb(original_inspect_cb):
            def inspect_cb(_elem):
                elem = _elem
                original_inspect_cb(elem)
            return ffi.callback('void (*)(void*)', inspect_cb)
        if isinstance(inspect_cb, ffi.CData):
            inspect_cb_wrapper = inspect_cb
        else:
            inspect_cb_wrapper = self._callbacks.get(inspect_cb)
        if not inspect_cb_wrapper:
            inspect_cb_wrapper = wrap_inspect_cb(inspect_cb)
            self._callbacks[inspect_cb] = inspect_cb_wrapper
        return _lvgl.lv_iter_inspect(self._pointer, inspect_cb_wrapper)

class indev_data:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_indev_data_t[2]')
        _objects[self] = self._pointer

class indev:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_indev_t[2]')
        _objects[self] = self._pointer
    def delete(self) -> 'None':
        return _lvgl.lv_indev_delete(self._pointer)
    def get_next(self) -> 'indev':
        result = indev.__new__(indev)
        result._pointer = _lvgl.lv_indev_get_next(self._pointer)
        return result if result._pointer else None
    def read(self) -> 'None':
        return _lvgl.lv_indev_read(self._pointer)
    def read_timer_cb(self) -> 'None':
        return _lvgl.lv_indev_read_timer_cb(self._pointer)
    def enable(self, enable: 'bool') -> 'None':
        return _lvgl.lv_indev_enable(self._pointer, enable)
    def set_type(self, indev_type: 'INDEV_TYPE') -> 'None':
        return _lvgl.lv_indev_set_type(self._pointer, indev_type.value if indev_type and isinstance(indev_type, Enum) else (indev_type or 0))
    def set_read_cb(self, read_cb: 'lv_indev_read_cb_t') -> 'None':
        def wrap_read_cb(original_read_cb):
            def read_cb(_indev, _data):
                indev = indev.__new__(indev)
                indev._pointer = _indev
                data = indev_data.__new__(indev_data)
                data._pointer = _data
                original_read_cb(indev, data)
            return ffi.callback('void (*)(lv_indev_t*, lv_indev_data_t*)', read_cb)
        if isinstance(read_cb, ffi.CData):
            read_cb_wrapper = read_cb
        else:
            read_cb_wrapper = self._callbacks.get(read_cb)
        if not read_cb_wrapper:
            read_cb_wrapper = wrap_read_cb(read_cb)
            self._callbacks[read_cb] = read_cb_wrapper
        return _lvgl.lv_indev_set_read_cb(self._pointer, read_cb_wrapper)
    def set_user_data(self, user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_indev_set_user_data(self._pointer, ffi.NULL if user_data is None else user_data)
    def set_driver_data(self, driver_data: 'None') -> 'None':
        return _lvgl.lv_indev_set_driver_data(self._pointer, ffi.NULL if driver_data is None else driver_data)
    def set_display(self, disp: 'display') -> 'None':
        return _lvgl.lv_indev_set_display(self._pointer, disp._pointer if disp else ffi.NULL)
    def set_long_press_time(self, long_press_time: 'int') -> 'None':
        return _lvgl.lv_indev_set_long_press_time(self._pointer, long_press_time)
    def set_long_press_repeat_time(self, long_press_repeat_time: 'int') -> 'None':
        return _lvgl.lv_indev_set_long_press_repeat_time(self._pointer, long_press_repeat_time)
    def set_scroll_limit(self, scroll_limit: 'int') -> 'None':
        return _lvgl.lv_indev_set_scroll_limit(self._pointer, scroll_limit)
    def set_scroll_throw(self, scroll_throw: 'int') -> 'None':
        return _lvgl.lv_indev_set_scroll_throw(self._pointer, scroll_throw)
    def get_type(self) -> 'lv_indev_type_t':
        return _lvgl.lv_indev_get_type(self._pointer)
    def get_read_cb(self) -> 'lv_indev_read_cb_t':
        return _lvgl.lv_indev_get_read_cb(self._pointer)
    def get_state(self) -> 'lv_indev_state_t':
        return _lvgl.lv_indev_get_state(self._pointer)
    def get_group(self) -> 'group':
        result = group.__new__(group)
        result._pointer = _lvgl.lv_indev_get_group(self._pointer)
        return result if result._pointer else None
    def get_display(self) -> 'display':
        result = display.__new__(display)
        result._pointer = _lvgl.lv_indev_get_display(self._pointer)
        return result if result._pointer else None
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_indev_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_driver_data(self) -> 'None':
        return _lvgl.lv_indev_get_driver_data(self._pointer)
    def get_press_moved(self) -> 'bool':
        return _lvgl.lv_indev_get_press_moved(self._pointer)
    def reset(self, obj: 'obj') -> 'None':
        return _lvgl.lv_indev_reset(self._pointer, obj._pointer if obj else ffi.NULL)
    def stop_processing(self) -> 'None':
        return _lvgl.lv_indev_stop_processing(self._pointer)
    def reset_long_press(self) -> 'None':
        return _lvgl.lv_indev_reset_long_press(self._pointer)
    def set_cursor(self, cur_obj: 'obj') -> 'None':
        return _lvgl.lv_indev_set_cursor(self._pointer, cur_obj._pointer if cur_obj else ffi.NULL)
    def set_group(self, group: 'group') -> 'None':
        return _lvgl.lv_indev_set_group(self._pointer, group._pointer if group else ffi.NULL)
    def set_button_points(self, points: 'lv_point_t') -> 'None':
        return _lvgl.lv_indev_set_button_points(self._pointer, ffi.NULL if points is None else points)
    def get_point(self, point: 'point') -> 'None':
        return _lvgl.lv_indev_get_point(self._pointer, point._pointer if point else ffi.NULL)
    def get_gesture_dir(self) -> 'lv_dir_t':
        return _lvgl.lv_indev_get_gesture_dir(self._pointer)
    def get_key(self) -> 'int':
        return _lvgl.lv_indev_get_key(self._pointer)
    def get_short_click_streak(self) -> 'int':
        return _lvgl.lv_indev_get_short_click_streak(self._pointer)
    def get_scroll_dir(self) -> 'lv_dir_t':
        return _lvgl.lv_indev_get_scroll_dir(self._pointer)
    def get_scroll_obj(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_indev_get_scroll_obj(self._pointer)
        return result if result._pointer else None
    def get_vect(self, point: 'point') -> 'None':
        return _lvgl.lv_indev_get_vect(self._pointer, point._pointer if point else ffi.NULL)
    def get_cursor(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_indev_get_cursor(self._pointer)
        return result if result._pointer else None
    def wait_release(self) -> 'None':
        return _lvgl.lv_indev_wait_release(self._pointer)
    def get_read_timer(self) -> 'timer':
        result = timer.__new__(timer)
        result._pointer = _lvgl.lv_indev_get_read_timer(self._pointer)
        return result if result._pointer else None
    def set_mode(self, mode: 'INDEV_MODE') -> 'None':
        return _lvgl.lv_indev_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def get_mode(self) -> 'lv_indev_mode_t':
        return _lvgl.lv_indev_get_mode(self._pointer)
    def search_obj(self, point: 'point') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_indev_search_obj(self._pointer, point._pointer if point else ffi.NULL)
        return result if result._pointer else None
    def add_event_cb(self, event_cb: 'lv_event_cb_t', filter: 'EVENT_CODE', user_data: 'str') -> 'None':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_indev_add_event_cb(self._pointer, event_cb_wrapper, filter.value if filter and isinstance(filter, Enum) else (filter or 0), ffi.NULL if user_data is None else user_data)
    def get_event_count(self) -> 'int':
        return _lvgl.lv_indev_get_event_count(self._pointer)
    def get_event_dsc(self, index: 'int') -> 'event_dsc':
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_indev_get_event_dsc(self._pointer, index)
        return result if result._pointer else None
    def remove_event(self, index: 'int') -> 'bool':
        return _lvgl.lv_indev_remove_event(self._pointer, index)
    def remove_event_cb_with_user_data(self, event_cb: 'lv_event_cb_t', user_data: 'str') -> 'int':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_indev_remove_event_cb_with_user_data(self._pointer, event_cb_wrapper, ffi.NULL if user_data is None else user_data)
    def send_event(self, code: 'EVENT_CODE', param: 'None') -> 'lv_result_t':
        return _lvgl.lv_indev_send_event(self._pointer, code.value if code and isinstance(code, Enum) else (code or 0), ffi.NULL if param is None else param)

class ime_pinyin:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_ime_pinyin_t[2]')
        _objects[self] = self._pointer

class imagebutton_src_info:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_imagebutton_src_info_t[2]')
        _objects[self] = self._pointer

class imagebutton(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_imagebutton_create(parent._pointer if parent else ffi.NULL)
    def set_src(self, state: 'IMAGEBUTTON_STATE', src_left: 'None', src_mid: 'None', src_right: 'None') -> 'None':
        return _lvgl.lv_imagebutton_set_src(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0), ffi.NULL if src_left is None else src_left, ffi.NULL if src_mid is None else src_mid, ffi.NULL if src_right is None else src_right)
    def set_state(self, state: 'IMAGEBUTTON_STATE') -> 'None':
        return _lvgl.lv_imagebutton_set_state(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def get_src_left(self, state: 'IMAGEBUTTON_STATE') -> 'None':
        return _lvgl.lv_imagebutton_get_src_left(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def get_src_middle(self, state: 'IMAGEBUTTON_STATE') -> 'None':
        return _lvgl.lv_imagebutton_get_src_middle(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))
    def get_src_right(self, state: 'IMAGEBUTTON_STATE') -> 'None':
        return _lvgl.lv_imagebutton_get_src_right(self._pointer, state.value if state and isinstance(state, Enum) else (state or 0))

class image_header_cache_data:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_header_cache_data_t[2]')
        _objects[self] = self._pointer

class image_header:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_header_t[2]')
        _objects[self] = self._pointer

class image_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_dsc_t[2]')
        _objects[self] = self._pointer

class image_decoder_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_decoder_dsc_t[2]')
        _objects[self] = self._pointer

class image_decoder_args:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_decoder_args_t[2]')
        _objects[self] = self._pointer

class image_decoder:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_decoder_t[2]')
        _objects[self] = self._pointer
    def get_info(self, header: 'image_header') -> 'lv_result_t':
        return _lvgl.lv_image_decoder_get_info(self._pointer, header._pointer if header else ffi.NULL)
    def open(self, src: 'None', args: 'image_decoder_args') -> 'lv_result_t':
        return _lvgl.lv_image_decoder_open(self._pointer, ffi.NULL if src is None else src, args._pointer if args else ffi.NULL)
    def get_area(self, full_area: 'area', decoded_area: 'area') -> 'lv_result_t':
        return _lvgl.lv_image_decoder_get_area(self._pointer, full_area._pointer if full_area else ffi.NULL, decoded_area._pointer if decoded_area else ffi.NULL)
    def close(self) -> 'None':
        return _lvgl.lv_image_decoder_close(self._pointer)
    def delete(self) -> 'None':
        return _lvgl.lv_image_decoder_delete(self._pointer)
    def get_next(self) -> 'image_decoder':
        result = image_decoder.__new__(image_decoder)
        result._pointer = _lvgl.lv_image_decoder_get_next(self._pointer)
        return result if result._pointer else None
    def set_info_cb(self, info_cb: 'lv_image_decoder_info_f_t') -> 'None':
        def wrap_info_cb(original_info_cb):
            def info_cb(_decoder, _dsc, _header):
                decoder = image_decoder.__new__(image_decoder)
                decoder._pointer = _decoder
                dsc = image_decoder_dsc.__new__(image_decoder_dsc)
                dsc._pointer = _dsc
                header = image_header.__new__(image_header)
                header._pointer = _header
                return original_info_cb(decoder, dsc, header)
            return ffi.callback('lv_result_t (*)(lv_image_decoder_t*, lv_image_decoder_dsc_t*, lv_image_header_t*)', info_cb)
        if isinstance(info_cb, ffi.CData):
            info_cb_wrapper = info_cb
        else:
            info_cb_wrapper = self._callbacks.get(info_cb)
        if not info_cb_wrapper:
            info_cb_wrapper = wrap_info_cb(info_cb)
            self._callbacks[info_cb] = info_cb_wrapper
        return _lvgl.lv_image_decoder_set_info_cb(self._pointer, info_cb_wrapper)
    def set_open_cb(self, open_cb: 'lv_image_decoder_open_f_t') -> 'None':
        def wrap_open_cb(original_open_cb):
            def open_cb(_decoder, _dsc):
                decoder = image_decoder.__new__(image_decoder)
                decoder._pointer = _decoder
                dsc = image_decoder_dsc.__new__(image_decoder_dsc)
                dsc._pointer = _dsc
                return original_open_cb(decoder, dsc)
            return ffi.callback('lv_result_t (*)(lv_image_decoder_t*, lv_image_decoder_dsc_t*)', open_cb)
        if isinstance(open_cb, ffi.CData):
            open_cb_wrapper = open_cb
        else:
            open_cb_wrapper = self._callbacks.get(open_cb)
        if not open_cb_wrapper:
            open_cb_wrapper = wrap_open_cb(open_cb)
            self._callbacks[open_cb] = open_cb_wrapper
        return _lvgl.lv_image_decoder_set_open_cb(self._pointer, open_cb_wrapper)
    def set_get_area_cb(self, read_line_cb: 'lv_image_decoder_get_area_cb_t') -> 'None':
        def wrap_read_line_cb(original_read_line_cb):
            def read_line_cb(_decoder, _dsc, _full_area, _decoded_area):
                decoder = image_decoder.__new__(image_decoder)
                decoder._pointer = _decoder
                dsc = image_decoder_dsc.__new__(image_decoder_dsc)
                dsc._pointer = _dsc
                full_area = area.__new__(area)
                full_area._pointer = _full_area
                decoded_area = area.__new__(area)
                decoded_area._pointer = _decoded_area
                return original_read_line_cb(decoder, dsc, full_area, decoded_area)
            return ffi.callback('lv_result_t (*)(lv_image_decoder_t*, lv_image_decoder_dsc_t*, lv_area_t*, lv_area_t*)', read_line_cb)
        if isinstance(read_line_cb, ffi.CData):
            read_line_cb_wrapper = read_line_cb
        else:
            read_line_cb_wrapper = self._callbacks.get(read_line_cb)
        if not read_line_cb_wrapper:
            read_line_cb_wrapper = wrap_read_line_cb(read_line_cb)
            self._callbacks[read_line_cb] = read_line_cb_wrapper
        return _lvgl.lv_image_decoder_set_get_area_cb(self._pointer, read_line_cb_wrapper)
    def set_close_cb(self, close_cb: 'lv_image_decoder_close_f_t') -> 'None':
        def wrap_close_cb(original_close_cb):
            def close_cb(_decoder, _dsc):
                decoder = image_decoder.__new__(image_decoder)
                decoder._pointer = _decoder
                dsc = image_decoder_dsc.__new__(image_decoder_dsc)
                dsc._pointer = _dsc
                original_close_cb(decoder, dsc)
            return ffi.callback('void (*)(lv_image_decoder_t*, lv_image_decoder_dsc_t*)', close_cb)
        if isinstance(close_cb, ffi.CData):
            close_cb_wrapper = close_cb
        else:
            close_cb_wrapper = self._callbacks.get(close_cb)
        if not close_cb_wrapper:
            close_cb_wrapper = wrap_close_cb(close_cb)
            self._callbacks[close_cb] = close_cb_wrapper
        return _lvgl.lv_image_decoder_set_close_cb(self._pointer, close_cb_wrapper)
    def add_to_cache(self, search_key: 'image_cache_data', decoded: 'draw_buf', user_data: 'str') -> 'cache_entry':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = cache_entry.__new__(cache_entry)
        result._pointer = _lvgl.lv_image_decoder_add_to_cache(self._pointer, search_key._pointer if search_key else ffi.NULL, decoded._pointer if decoded else ffi.NULL, ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def post_process(self, decoded: 'draw_buf') -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_image_decoder_post_process(self._pointer, decoded._pointer if decoded else ffi.NULL)
        return result if result._pointer else None

class image_cache_data:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_image_cache_data_t[2]')
        _objects[self] = self._pointer

class image(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_image_create(parent._pointer if parent else ffi.NULL)
    def buf_set_palette(self, id: 'int', c: 'lv_color32_t') -> 'None':
        return _lvgl.lv_image_buf_set_palette(self._pointer, id, c)
    def buf_free(self) -> 'None':
        return _lvgl.lv_image_buf_free(self._pointer)
    def cache_drop(self) -> 'None':
        return _lvgl.lv_image_cache_drop(self._pointer)
    def src_get_type(self) -> 'lv_image_src_t':
        return _lvgl.lv_image_src_get_type(self._pointer)
    def set_src(self, src: 'None') -> 'None':
        return _lvgl.lv_image_set_src(self._pointer, src.encode('utf-8'))
    def set_offset_x(self, x: 'int') -> 'None':
        return _lvgl.lv_image_set_offset_x(self._pointer, x)
    def set_offset_y(self, y: 'int') -> 'None':
        return _lvgl.lv_image_set_offset_y(self._pointer, y)
    def set_rotation(self, angle: 'int') -> 'None':
        return _lvgl.lv_image_set_rotation(self._pointer, angle)
    def set_pivot(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_image_set_pivot(self._pointer, x, y)
    def set_scale(self, zoom: 'int') -> 'None':
        return _lvgl.lv_image_set_scale(self._pointer, zoom)
    def set_scale_x(self, zoom: 'int') -> 'None':
        return _lvgl.lv_image_set_scale_x(self._pointer, zoom)
    def set_scale_y(self, zoom: 'int') -> 'None':
        return _lvgl.lv_image_set_scale_y(self._pointer, zoom)
    def set_blend_mode(self, blend_mode: 'BLEND_MODE') -> 'None':
        return _lvgl.lv_image_set_blend_mode(self._pointer, blend_mode.value if blend_mode and isinstance(blend_mode, Enum) else (blend_mode or 0))
    def set_antialias(self, antialias: 'bool') -> 'None':
        return _lvgl.lv_image_set_antialias(self._pointer, antialias)
    def set_inner_align(self, align: 'IMAGE_ALIGN') -> 'None':
        return _lvgl.lv_image_set_inner_align(self._pointer, align.value if align and isinstance(align, Enum) else (align or 0))
    def set_bitmap_map_src(self, src: 'image_dsc') -> 'None':
        return _lvgl.lv_image_set_bitmap_map_src(self._pointer, src._pointer if src else ffi.NULL)
    def get_src(self) -> 'None':
        return _lvgl.lv_image_get_src(self._pointer)
    def get_offset_x(self) -> 'int':
        return _lvgl.lv_image_get_offset_x(self._pointer)
    def get_offset_y(self) -> 'int':
        return _lvgl.lv_image_get_offset_y(self._pointer)
    def get_rotation(self) -> 'int':
        return _lvgl.lv_image_get_rotation(self._pointer)
    def get_pivot(self, pivot: 'point') -> 'None':
        return _lvgl.lv_image_get_pivot(self._pointer, pivot._pointer if pivot else ffi.NULL)
    def get_scale(self) -> 'int':
        return _lvgl.lv_image_get_scale(self._pointer)
    def get_scale_x(self) -> 'int':
        return _lvgl.lv_image_get_scale_x(self._pointer)
    def get_scale_y(self) -> 'int':
        return _lvgl.lv_image_get_scale_y(self._pointer)
    def get_blend_mode(self) -> 'lv_blend_mode_t':
        return _lvgl.lv_image_get_blend_mode(self._pointer)
    def get_antialias(self) -> 'bool':
        return _lvgl.lv_image_get_antialias(self._pointer)
    def get_inner_align(self) -> 'lv_image_align_t':
        return _lvgl.lv_image_get_inner_align(self._pointer)
    def get_bitmap_map_src(self) -> 'image_dsc':
        result = image_dsc.__new__(image_dsc)
        result._pointer = _lvgl.lv_image_get_bitmap_map_src(self._pointer)
        return result if result._pointer else None

class hit_test_info:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_hit_test_info_t[2]')
        _objects[self] = self._pointer

class group:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_group_t[2]')
        _objects[self] = self._pointer
    def delete(self) -> 'None':
        return _lvgl.lv_group_delete(self._pointer)
    def set_default(self) -> 'None':
        return _lvgl.lv_group_set_default(self._pointer)
    def add_obj(self, obj: 'obj') -> 'None':
        return _lvgl.lv_group_add_obj(self._pointer, obj._pointer if obj else ffi.NULL)
    def swap_obj(self, obj2: 'obj') -> 'None':
        return _lvgl.lv_group_swap_obj(self._pointer, obj2._pointer if obj2 else ffi.NULL)
    def remove_obj(self) -> 'None':
        return _lvgl.lv_group_remove_obj(self._pointer)
    def remove_all_objs(self) -> 'None':
        return _lvgl.lv_group_remove_all_objs(self._pointer)
    def focus_obj(self) -> 'None':
        return _lvgl.lv_group_focus_obj(self._pointer)
    def focus_next(self) -> 'None':
        return _lvgl.lv_group_focus_next(self._pointer)
    def focus_prev(self) -> 'None':
        return _lvgl.lv_group_focus_prev(self._pointer)
    def focus_freeze(self, en: 'bool') -> 'None':
        return _lvgl.lv_group_focus_freeze(self._pointer, en)
    def send_data(self, c: 'int') -> 'lv_result_t':
        return _lvgl.lv_group_send_data(self._pointer, c)
    def set_focus_cb(self, focus_cb: 'lv_group_focus_cb_t') -> 'None':
        def wrap_focus_cb(original_focus_cb):
            def focus_cb(_g0):
                g0 = group.__new__(group)
                g0._pointer = _g0
                original_focus_cb(g0)
            return ffi.callback('void (*)(lv_group_t*)', focus_cb)
        if isinstance(focus_cb, ffi.CData):
            focus_cb_wrapper = focus_cb
        else:
            focus_cb_wrapper = self._callbacks.get(focus_cb)
        if not focus_cb_wrapper:
            focus_cb_wrapper = wrap_focus_cb(focus_cb)
            self._callbacks[focus_cb] = focus_cb_wrapper
        return _lvgl.lv_group_set_focus_cb(self._pointer, focus_cb_wrapper)
    def set_edge_cb(self, edge_cb: 'lv_group_edge_cb_t') -> 'None':
        def wrap_edge_cb(original_edge_cb):
            def edge_cb(_g0, _b0):
                g0 = group.__new__(group)
                g0._pointer = _g0
                b0 = _b0
                original_edge_cb(g0, b0)
            return ffi.callback('void (*)(lv_group_t*, bool)', edge_cb)
        if isinstance(edge_cb, ffi.CData):
            edge_cb_wrapper = edge_cb
        else:
            edge_cb_wrapper = self._callbacks.get(edge_cb)
        if not edge_cb_wrapper:
            edge_cb_wrapper = wrap_edge_cb(edge_cb)
            self._callbacks[edge_cb] = edge_cb_wrapper
        return _lvgl.lv_group_set_edge_cb(self._pointer, edge_cb_wrapper)
    def set_refocus_policy(self, policy: 'GROUP_REFOCUS_POLICY') -> 'None':
        return _lvgl.lv_group_set_refocus_policy(self._pointer, policy.value if policy and isinstance(policy, Enum) else (policy or 0))
    def set_editing(self, edit: 'bool') -> 'None':
        return _lvgl.lv_group_set_editing(self._pointer, edit)
    def set_wrap(self, en: 'bool') -> 'None':
        return _lvgl.lv_group_set_wrap(self._pointer, en)
    def get_focused(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_group_get_focused(self._pointer)
        return result if result._pointer else None
    def get_focus_cb(self) -> 'lv_group_focus_cb_t':
        return _lvgl.lv_group_get_focus_cb(self._pointer)
    def get_edge_cb(self) -> 'lv_group_edge_cb_t':
        return _lvgl.lv_group_get_edge_cb(self._pointer)
    def get_editing(self) -> 'bool':
        return _lvgl.lv_group_get_editing(self._pointer)
    def get_wrap(self) -> 'bool':
        return _lvgl.lv_group_get_wrap(self._pointer)
    def get_obj_count(self) -> 'int':
        return _lvgl.lv_group_get_obj_count(self._pointer)
    def get_obj_by_index(self, index: 'int') -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_group_get_obj_by_index(self._pointer, index)
        return result if result._pointer else None

class grad_stop:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_grad_stop_t[2]')
        _objects[self] = self._pointer

class grad_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_grad_dsc_t[2]')
        _objects[self] = self._pointer
    def init_stops(self, colors: 'lv_color_t', opa: 'lv_opa_t', fracs: 'int', num_stops: 'int') -> 'None':
        return _lvgl.lv_grad_init_stops(self._pointer, ffi.NULL if colors is None else colors, ffi.NULL if opa is None else opa, ffi.NULL if fracs is None else fracs, num_stops)
    def horizontal_init(self) -> 'None':
        return _lvgl.lv_grad_horizontal_init(self._pointer)
    def vertical_init(self) -> 'None':
        return _lvgl.lv_grad_vertical_init(self._pointer)
    def linear_init(self, from_x: 'int', from_y: 'int', to_x: 'int', to_y: 'int', extend: 'GRAD_EXTEND') -> 'None':
        return _lvgl.lv_grad_linear_init(self._pointer, from_x, from_y, to_x, to_y, extend.value if extend and isinstance(extend, Enum) else (extend or 0))
    def radial_init(self, center_x: 'int', center_y: 'int', to_x: 'int', to_y: 'int', extend: 'GRAD_EXTEND') -> 'None':
        return _lvgl.lv_grad_radial_init(self._pointer, center_x, center_y, to_x, to_y, extend.value if extend and isinstance(extend, Enum) else (extend or 0))
    def radial_set_focal(self, center_x: 'int', center_y: 'int', radius: 'int') -> 'None':
        return _lvgl.lv_grad_radial_set_focal(self._pointer, center_x, center_y, radius)
    def conical_init(self, center_x: 'int', center_y: 'int', start_angle: 'int', end_angle: 'int', extend: 'GRAD_EXTEND') -> 'None':
        return _lvgl.lv_grad_conical_init(self._pointer, center_x, center_y, start_angle, end_angle, extend.value if extend and isinstance(extend, Enum) else (extend or 0))

class glfw_window:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_glfw_window_t[2]')
        _objects[self] = self._pointer

class glfw_texture:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_glfw_texture_t[2]')
        _objects[self] = self._pointer

class gif:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_gif_t[2]')
        _objects[self] = self._pointer

class fs_path_ex:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fs_path_ex_t[2]')
        _objects[self] = self._pointer

class fs_file_cache:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fs_file_cache_t[2]')
        _objects[self] = self._pointer

class fs_file:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fs_file_t[2]')
        _objects[self] = self._pointer

class fs_drv:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fs_drv_t[2]')
        _objects[self] = self._pointer

class fs_dir:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fs_dir_t[2]')
        _objects[self] = self._pointer

class freetype_outline_vector:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_freetype_outline_vector_t[2]')
        _objects[self] = self._pointer

class freetype_outline_event_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_freetype_outline_event_param_t[2]')
        _objects[self] = self._pointer

class fragment_managed_states:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fragment_managed_states_t[2]')
        _objects[self] = self._pointer

class fragment_class:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fragment_class_t[2]')
        _objects[self] = self._pointer

class fragment:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fragment_t[2]')
        _objects[self] = self._pointer

class fpoint:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_fpoint_t[2]')
        _objects[self] = self._pointer

class font_glyph_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_glyph_dsc_t[2]')
        _objects[self] = self._pointer

class font_fmt_txt_kern_pair:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_fmt_txt_kern_pair_t[2]')
        _objects[self] = self._pointer

class font_fmt_txt_kern_classes:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_fmt_txt_kern_classes_t[2]')
        _objects[self] = self._pointer

class font_fmt_txt_glyph_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_fmt_txt_glyph_dsc_t[2]')
        _objects[self] = self._pointer

class font_fmt_txt_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_fmt_txt_dsc_t[2]')
        _objects[self] = self._pointer

class font_fmt_txt_cmap:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_fmt_txt_cmap_t[2]')
        _objects[self] = self._pointer

class font:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_font_t[2]')
        _objects[self] = self._pointer
    def get_glyph_bitmap(self, draw_buf: 'draw_buf') -> 'None':
        return _lvgl.lv_font_get_glyph_bitmap(self._pointer, draw_buf._pointer if draw_buf else ffi.NULL)
    def get_glyph_dsc(self, dsc_out: 'font_glyph_dsc', letter: 'int', letter_next: 'int') -> 'bool':
        return _lvgl.lv_font_get_glyph_dsc(self._pointer, dsc_out._pointer if dsc_out else ffi.NULL, letter, letter_next)
    def glyph_release_draw_data(self) -> 'None':
        return _lvgl.lv_font_glyph_release_draw_data(self._pointer)
    def get_glyph_width(self, letter: 'int', letter_next: 'int') -> 'int':
        return _lvgl.lv_font_get_glyph_width(self._pointer, letter, letter_next)
    def get_line_height(self) -> 'int':
        return _lvgl.lv_font_get_line_height(self._pointer)
    def set_kerning(self, kerning: 'FONT_KERNING') -> 'None':
        return _lvgl.lv_font_set_kerning(self._pointer, kerning.value if kerning and isinstance(kerning, Enum) else (kerning or 0))
    def get_bitmap_fmt_txt(self, draw_buf: 'draw_buf') -> 'None':
        return _lvgl.lv_font_get_bitmap_fmt_txt(self._pointer, draw_buf._pointer if draw_buf else ffi.NULL)
    def get_glyph_dsc_fmt_txt(self, dsc_out: 'font_glyph_dsc', unicode_letter: 'int', unicode_letter_next: 'int') -> 'bool':
        return _lvgl.lv_font_get_glyph_dsc_fmt_txt(self._pointer, dsc_out._pointer if dsc_out else ffi.NULL, unicode_letter, unicode_letter_next)

class file_explorer:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_file_explorer_t[2]')
        _objects[self] = self._pointer

class ffmpeg_player:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_ffmpeg_player_t[2]')
        _objects[self] = self._pointer

class event_list:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_event_list_t[2]')
        _objects[self] = self._pointer

class event_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_event_dsc_t[2]')
        _objects[self] = self._pointer
    def get_cb(self) -> 'lv_event_cb_t':
        return _lvgl.lv_event_dsc_get_cb(self._pointer)
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_event_dsc_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')

class event:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_event_t[2]')
        _objects[self] = self._pointer
    def send(self, e: 'event', preprocess: 'bool') -> 'lv_result_t':
        return _lvgl.lv_event_send(self._pointer, e._pointer if e else ffi.NULL, preprocess)
    def add(self, cb: 'lv_event_cb_t', filter: 'EVENT_CODE', user_data: 'str') -> 'event_dsc':
        def wrap_cb(original_cb):
            def cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', cb)
        if isinstance(cb, ffi.CData):
            cb_wrapper = cb
        else:
            cb_wrapper = self._callbacks.get(cb)
        if not cb_wrapper:
            cb_wrapper = wrap_cb(cb)
            self._callbacks[cb] = cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_event_add(self._pointer, cb_wrapper, filter.value if filter and isinstance(filter, Enum) else (filter or 0), ffi.NULL if user_data is None else user_data)
        return result if result._pointer else None
    def remove_dsc(self, dsc: 'event_dsc') -> 'bool':
        return _lvgl.lv_event_remove_dsc(self._pointer, dsc._pointer if dsc else ffi.NULL)
    def get_count(self) -> 'int':
        return _lvgl.lv_event_get_count(self._pointer)
    def get_dsc(self, index: 'int') -> 'event_dsc':
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_event_get_dsc(self._pointer, index)
        return result if result._pointer else None
    def remove(self, index: 'int') -> 'bool':
        return _lvgl.lv_event_remove(self._pointer, index)
    def remove_all(self) -> 'None':
        return _lvgl.lv_event_remove_all(self._pointer)
    def get_target(self) -> 'None':
        return _lvgl.lv_event_get_target(self._pointer)
    def get_current_target(self) -> 'None':
        return _lvgl.lv_event_get_current_target(self._pointer)
    def get_code(self) -> 'lv_event_code_t':
        return _lvgl.lv_event_get_code(self._pointer)
    def get_param(self) -> 'None':
        return _lvgl.lv_event_get_param(self._pointer)
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_event_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def stop_bubbling(self) -> 'None':
        return _lvgl.lv_event_stop_bubbling(self._pointer)
    def stop_processing(self) -> 'None':
        return _lvgl.lv_event_stop_processing(self._pointer)
    def get_invalidated_area(self) -> 'area':
        result = area.__new__(area)
        result._pointer = _lvgl.lv_event_get_invalidated_area(self._pointer)
        return result if result._pointer else None
    def get_current_target_obj(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_event_get_current_target_obj(self._pointer)
        return result if result._pointer else None
    def get_target_obj(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_event_get_target_obj(self._pointer)
        return result if result._pointer else None
    def get_indev(self) -> 'indev':
        result = indev.__new__(indev)
        result._pointer = _lvgl.lv_event_get_indev(self._pointer)
        return result if result._pointer else None
    def get_layer(self) -> 'layer':
        result = layer.__new__(layer)
        result._pointer = _lvgl.lv_event_get_layer(self._pointer)
        return result if result._pointer else None
    def get_old_size(self) -> 'area':
        result = area.__new__(area)
        result._pointer = _lvgl.lv_event_get_old_size(self._pointer)
        return result if result._pointer else None
    def get_key(self) -> 'int':
        return _lvgl.lv_event_get_key(self._pointer)
    def get_rotary_diff(self) -> 'int':
        return _lvgl.lv_event_get_rotary_diff(self._pointer)
    def get_scroll_anim(self) -> 'anim':
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_event_get_scroll_anim(self._pointer)
        return result if result._pointer else None
    def set_ext_draw_size(self, size: 'int') -> 'None':
        return _lvgl.lv_event_set_ext_draw_size(self._pointer, size)
    def get_self_size_info(self) -> 'point':
        result = point.__new__(point)
        result._pointer = _lvgl.lv_event_get_self_size_info(self._pointer)
        return result if result._pointer else None
    def get_hit_test_info(self) -> 'hit_test_info':
        result = hit_test_info.__new__(hit_test_info)
        result._pointer = _lvgl.lv_event_get_hit_test_info(self._pointer)
        return result if result._pointer else None
    def get_cover_area(self) -> 'area':
        result = area.__new__(area)
        result._pointer = _lvgl.lv_event_get_cover_area(self._pointer)
        return result if result._pointer else None
    def set_cover_res(self, res: 'COVER_RES') -> 'None':
        return _lvgl.lv_event_set_cover_res(self._pointer, res.value if res and isinstance(res, Enum) else (res or 0))
    def get_draw_task(self) -> 'draw_task':
        result = draw_task.__new__(draw_task)
        result._pointer = _lvgl.lv_event_get_draw_task(self._pointer)
        return result if result._pointer else None

class evdev_discovery:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_evdev_discovery_t[2]')
        _objects[self] = self._pointer

class dropdown_list:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_dropdown_list_t[2]')
        _objects[self] = self._pointer

class dropdown(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_dropdown_create(parent._pointer if parent else ffi.NULL)
    def set_text(self, txt: 'str') -> 'None':
        return _lvgl.lv_dropdown_set_text(self._pointer, txt.encode('utf-8'))
    def set_options(self, options: 'str') -> 'None':
        return _lvgl.lv_dropdown_set_options(self._pointer, options.encode('utf-8'))
    def set_options_static(self, options: 'str') -> 'None':
        return _lvgl.lv_dropdown_set_options_static(self._pointer, options.encode('utf-8'))
    def add_option(self, option: 'str', pos: 'int') -> 'None':
        return _lvgl.lv_dropdown_add_option(self._pointer, option.encode('utf-8'), pos)
    def clear_options(self) -> 'None':
        return _lvgl.lv_dropdown_clear_options(self._pointer)
    def set_selected(self, sel_opt: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_dropdown_set_selected(self._pointer, sel_opt, anim)
    def set_dir(self, dir: 'DIR') -> 'None':
        return _lvgl.lv_dropdown_set_dir(self._pointer, dir.value if dir and isinstance(dir, Enum) else (dir or 0))
    def set_symbol(self, symbol: 'None') -> 'None':
        return _lvgl.lv_dropdown_set_symbol(self._pointer, ffi.NULL if symbol is None else symbol)
    def set_selected_highlight(self, en: 'bool') -> 'None':
        return _lvgl.lv_dropdown_set_selected_highlight(self._pointer, en)
    def get_list(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_dropdown_get_list(self._pointer)
        return result if result._pointer else None
    def get_text(self) -> 'str':
        result = _lvgl.lv_dropdown_get_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_options(self) -> 'str':
        result = _lvgl.lv_dropdown_get_options(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_selected(self) -> 'int':
        return _lvgl.lv_dropdown_get_selected(self._pointer)
    def get_option_count(self) -> 'int':
        return _lvgl.lv_dropdown_get_option_count(self._pointer)
    def get_selected_str(self, buf: 'str', buf_size: 'int') -> 'None':
        return _lvgl.lv_dropdown_get_selected_str(self._pointer, buf.encode('utf-8'), buf_size)
    def get_option_index(self, option: 'str') -> 'int':
        return _lvgl.lv_dropdown_get_option_index(self._pointer, option.encode('utf-8'))
    def get_symbol(self) -> 'str':
        result = _lvgl.lv_dropdown_get_symbol(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_selected_highlight(self) -> 'bool':
        return _lvgl.lv_dropdown_get_selected_highlight(self._pointer)
    def get_dir(self) -> 'lv_dir_t':
        return _lvgl.lv_dropdown_get_dir(self._pointer)
    def open(self) -> 'None':
        return _lvgl.lv_dropdown_open(self._pointer)
    def close(self) -> 'None':
        return _lvgl.lv_dropdown_close(self._pointer)
    def is_open(self) -> 'bool':
        return _lvgl.lv_dropdown_is_open(self._pointer)
    def bind_value(self, subject: 'subject') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_dropdown_bind_value(self._pointer, subject._pointer if subject else ffi.NULL)
        return result if result._pointer else None

class draw_vector_task_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_vector_task_dsc_t[2]')
        _objects[self] = self._pointer

class draw_unit:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_unit_t[2]')
        _objects[self] = self._pointer
    def draw_letter(self, dsc: 'draw_glyph_dsc', pos: 'point', font: 'font', letter: 'int', cb: 'lv_draw_glyph_cb_t') -> 'None':
        def wrap_cb(original_cb):
            def cb(_t, _dsc, _fill_dsc, _fill_area):
                t = draw_task.__new__(draw_task)
                t._pointer = _t
                dsc = draw_glyph_dsc.__new__(draw_glyph_dsc)
                dsc._pointer = _dsc
                fill_dsc = draw_fill_dsc.__new__(draw_fill_dsc)
                fill_dsc._pointer = _fill_dsc
                fill_area = area.__new__(area)
                fill_area._pointer = _fill_area
                original_cb(t, dsc, fill_dsc, fill_area)
            return ffi.callback('void (*)(lv_draw_task_t*, lv_draw_glyph_dsc_t*, lv_draw_fill_dsc_t*, lv_area_t*)', cb)
        if isinstance(cb, ffi.CData):
            cb_wrapper = cb
        else:
            cb_wrapper = self._callbacks.get(cb)
        if not cb_wrapper:
            cb_wrapper = wrap_cb(cb)
            self._callbacks[cb] = cb_wrapper
        return _lvgl.lv_draw_unit_draw_letter(self._pointer, dsc._pointer if dsc else ffi.NULL, pos._pointer if pos else ffi.NULL, font._pointer if font else ffi.NULL, letter, cb_wrapper)

class draw_triangle_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_triangle_dsc_t[2]')
        _lvgl.lv_draw_triangle_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_task:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_task_t[2]')
        _objects[self] = self._pointer
    def get_type(self) -> 'lv_draw_task_type_t':
        return _lvgl.lv_draw_task_get_type(self._pointer)
    def get_draw_dsc(self) -> 'None':
        return _lvgl.lv_draw_task_get_draw_dsc(self._pointer)
    def get_area(self, area: 'area') -> 'None':
        return _lvgl.lv_draw_task_get_area(self._pointer, area._pointer if area else ffi.NULL)
    def get_fill_dsc(self) -> 'draw_fill_dsc':
        result = draw_fill_dsc.__new__(draw_fill_dsc)
        result._pointer = _lvgl.lv_draw_task_get_fill_dsc(self._pointer)
        return result if result._pointer else None
    def get_border_dsc(self) -> 'draw_border_dsc':
        result = draw_border_dsc.__new__(draw_border_dsc)
        result._pointer = _lvgl.lv_draw_task_get_border_dsc(self._pointer)
        return result if result._pointer else None
    def get_box_shadow_dsc(self) -> 'draw_box_shadow_dsc':
        result = draw_box_shadow_dsc.__new__(draw_box_shadow_dsc)
        result._pointer = _lvgl.lv_draw_task_get_box_shadow_dsc(self._pointer)
        return result if result._pointer else None
    def get_label_dsc(self) -> 'draw_label_dsc':
        result = draw_label_dsc.__new__(draw_label_dsc)
        result._pointer = _lvgl.lv_draw_task_get_label_dsc(self._pointer)
        return result if result._pointer else None
    def get_image_dsc(self) -> 'draw_image_dsc':
        result = draw_image_dsc.__new__(draw_image_dsc)
        result._pointer = _lvgl.lv_draw_task_get_image_dsc(self._pointer)
        return result if result._pointer else None
    def get_line_dsc(self) -> 'draw_line_dsc':
        result = draw_line_dsc.__new__(draw_line_dsc)
        result._pointer = _lvgl.lv_draw_task_get_line_dsc(self._pointer)
        return result if result._pointer else None
    def get_arc_dsc(self) -> 'draw_arc_dsc':
        result = draw_arc_dsc.__new__(draw_arc_dsc)
        result._pointer = _lvgl.lv_draw_task_get_arc_dsc(self._pointer)
        return result if result._pointer else None
    def get_triangle_dsc(self) -> 'draw_triangle_dsc':
        result = draw_triangle_dsc.__new__(draw_triangle_dsc)
        result._pointer = _lvgl.lv_draw_task_get_triangle_dsc(self._pointer)
        return result if result._pointer else None

class draw_sw_unit:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_unit_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_radius_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_radius_param_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_map_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_map_param_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_line_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_line_param_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_fade_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_fade_param_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_common_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_common_dsc_t[2]')
        _objects[self] = self._pointer

class draw_sw_mask_angle_param:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_mask_angle_param_t[2]')
        _objects[self] = self._pointer

class draw_sw_blend_image_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_blend_image_dsc_t[2]')
        _objects[self] = self._pointer

class draw_sw_blend_fill_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_blend_fill_dsc_t[2]')
        _objects[self] = self._pointer

class draw_sw_blend_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_sw_blend_dsc_t[2]')
        _objects[self] = self._pointer

class draw_rect_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_rect_dsc_t[2]')
        _lvgl.lv_draw_rect_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_mask_rect_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_mask_rect_dsc_t[2]')
        _objects[self] = self._pointer

class draw_mask:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_mask_t[2]')
        _objects[self] = self._pointer

class draw_line_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_line_dsc_t[2]')
        _lvgl.lv_draw_line_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_letter_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_letter_dsc_t[2]')
        _lvgl.lv_draw_letter_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_label_hint:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_label_hint_t[2]')
        _objects[self] = self._pointer

class draw_label_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_label_dsc_t[2]')
        _lvgl.lv_draw_label_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_image_sup:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_image_sup_t[2]')
        _objects[self] = self._pointer

class draw_image_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_image_dsc_t[2]')
        _lvgl.lv_draw_image_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_glyph_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_glyph_dsc_t[2]')
        _lvgl.lv_draw_glyph_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_fill_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_fill_dsc_t[2]')
        _lvgl.lv_draw_fill_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_dsc_base:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_dsc_base_t[2]')
        _objects[self] = self._pointer

class draw_buf_handlers:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_buf_handlers_t[2]')
        _lvgl.lv_draw_buf_handlers_init(self._pointer)
        _objects[self] = self._pointer

class draw_buf:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_buf_t[2]')
        _lvgl.lv_draw_buf_init(self._pointer)
        _objects[self] = self._pointer
    def init_with_default_handlers(self) -> 'None':
        return _lvgl.lv_draw_buf_init_with_default_handlers(self._pointer)
    def align(self, color_format: 'COLOR_FORMAT') -> 'None':
        return _lvgl.lv_draw_buf_align(self._pointer, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
    def align_ex(self, buf: 'None', color_format: 'COLOR_FORMAT') -> 'None':
        return _lvgl.lv_draw_buf_align_ex(self._pointer, ffi.NULL if buf is None else buf, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
    def invalidate_cache(self, area: 'area') -> 'None':
        return _lvgl.lv_draw_buf_invalidate_cache(self._pointer, area._pointer if area else ffi.NULL)
    def flush_cache(self, area: 'area') -> 'None':
        return _lvgl.lv_draw_buf_flush_cache(self._pointer, area._pointer if area else ffi.NULL)
    def width_to_stride_ex(self, w: 'int', color_format: 'COLOR_FORMAT') -> 'int':
        return _lvgl.lv_draw_buf_width_to_stride_ex(self._pointer, w, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
    def clear(self, a: 'area') -> 'None':
        return _lvgl.lv_draw_buf_clear(self._pointer, a._pointer if a else ffi.NULL)
    def copy(self, dest_area: 'area', src: 'draw_buf', src_area: 'area') -> 'None':
        return _lvgl.lv_draw_buf_copy(self._pointer, dest_area._pointer if dest_area else ffi.NULL, src._pointer if src else ffi.NULL, src_area._pointer if src_area else ffi.NULL)
    def create_ex(self, w: 'int', h: 'int', cf: 'COLOR_FORMAT', stride: 'int') -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_draw_buf_create_ex(self._pointer, w, h, cf.value if cf and isinstance(cf, Enum) else (cf or 0), stride)
        return result if result._pointer else None
    def dup(self) -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_draw_buf_dup(self._pointer)
        return result if result._pointer else None
    def dup_ex(self, draw_buf: 'draw_buf') -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_draw_buf_dup_ex(self._pointer, draw_buf._pointer if draw_buf else ffi.NULL)
        return result if result._pointer else None
    def reshape(self, cf: 'COLOR_FORMAT', w: 'int', h: 'int', stride: 'int') -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_draw_buf_reshape(self._pointer, cf.value if cf and isinstance(cf, Enum) else (cf or 0), w, h, stride)
        return result if result._pointer else None
    def destroy(self) -> 'None':
        return _lvgl.lv_draw_buf_destroy(self._pointer)
    def goto_xy(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_draw_buf_goto_xy(self._pointer, x, y)
    def adjust_stride(self, stride: 'int') -> 'lv_result_t':
        return _lvgl.lv_draw_buf_adjust_stride(self._pointer, stride)
    def premultiply(self) -> 'lv_result_t':
        return _lvgl.lv_draw_buf_premultiply(self._pointer)
    def has_flag(self, flag: 'IMAGE_FLAGS') -> 'bool':
        return _lvgl.lv_draw_buf_has_flag(self._pointer, flag.value if flag and isinstance(flag, Enum) else (flag or 0))
    def set_flag(self, flag: 'IMAGE_FLAGS') -> 'None':
        return _lvgl.lv_draw_buf_set_flag(self._pointer, flag.value if flag and isinstance(flag, Enum) else (flag or 0))
    def clear_flag(self, flag: 'IMAGE_FLAGS') -> 'None':
        return _lvgl.lv_draw_buf_clear_flag(self._pointer, flag.value if flag and isinstance(flag, Enum) else (flag or 0))
    def from_image(self, img: 'image_dsc') -> 'lv_result_t':
        return _lvgl.lv_draw_buf_from_image(self._pointer, img._pointer if img else ffi.NULL)
    def to_image(self, img: 'image_dsc') -> 'None':
        return _lvgl.lv_draw_buf_to_image(self._pointer, img._pointer if img else ffi.NULL)
    def set_palette(self, index: 'int', color: 'lv_color32_t') -> 'None':
        return _lvgl.lv_draw_buf_set_palette(self._pointer, index, color)
    def save_to_file(self, path: 'str') -> 'lv_result_t':
        return _lvgl.lv_draw_buf_save_to_file(self._pointer, path.encode('utf-8'))

class draw_box_shadow_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_box_shadow_dsc_t[2]')
        _lvgl.lv_draw_box_shadow_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_border_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_border_dsc_t[2]')
        _lvgl.lv_draw_border_dsc_init(self._pointer)
        _objects[self] = self._pointer

class draw_arc_dsc:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_draw_arc_dsc_t[2]')
        _lvgl.lv_draw_arc_dsc_init(self._pointer)
        _objects[self] = self._pointer

class display:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_display_t[2]')
        _objects[self] = self._pointer
    def delete(self) -> 'None':
        return _lvgl.lv_display_delete(self._pointer)
    def set_default(self) -> 'None':
        return _lvgl.lv_display_set_default(self._pointer)
    def get_next(self) -> 'display':
        result = display.__new__(display)
        result._pointer = _lvgl.lv_display_get_next(self._pointer)
        return result if result._pointer else None
    def set_resolution(self, hor_res: 'int', ver_res: 'int') -> 'None':
        return _lvgl.lv_display_set_resolution(self._pointer, hor_res, ver_res)
    def set_physical_resolution(self, hor_res: 'int', ver_res: 'int') -> 'None':
        return _lvgl.lv_display_set_physical_resolution(self._pointer, hor_res, ver_res)
    def set_offset(self, x: 'int', y: 'int') -> 'None':
        return _lvgl.lv_display_set_offset(self._pointer, x, y)
    def set_rotation(self, rotation: 'DISPLAY_ROTATION') -> 'None':
        return _lvgl.lv_display_set_rotation(self._pointer, rotation.value if rotation and isinstance(rotation, Enum) else (rotation or 0))
    def set_dpi(self, dpi: 'int') -> 'None':
        return _lvgl.lv_display_set_dpi(self._pointer, dpi)
    def get_horizontal_resolution(self) -> 'int':
        return _lvgl.lv_display_get_horizontal_resolution(self._pointer)
    def get_vertical_resolution(self) -> 'int':
        return _lvgl.lv_display_get_vertical_resolution(self._pointer)
    def get_physical_horizontal_resolution(self) -> 'int':
        return _lvgl.lv_display_get_physical_horizontal_resolution(self._pointer)
    def get_physical_vertical_resolution(self) -> 'int':
        return _lvgl.lv_display_get_physical_vertical_resolution(self._pointer)
    def get_offset_x(self) -> 'int':
        return _lvgl.lv_display_get_offset_x(self._pointer)
    def get_offset_y(self) -> 'int':
        return _lvgl.lv_display_get_offset_y(self._pointer)
    def get_rotation(self) -> 'lv_display_rotation_t':
        return _lvgl.lv_display_get_rotation(self._pointer)
    def get_dpi(self) -> 'int':
        return _lvgl.lv_display_get_dpi(self._pointer)
    def set_buffers(self, buf1: 'None', buf2: 'None', buf_size: 'int', render_mode: 'DISPLAY_RENDER_MODE') -> 'None':
        return _lvgl.lv_display_set_buffers(self._pointer, ffi.NULL if buf1 is None else buf1, ffi.NULL if buf2 is None else buf2, buf_size, render_mode.value if render_mode and isinstance(render_mode, Enum) else (render_mode or 0))
    def set_buffers_with_stride(self, buf1: 'None', buf2: 'None', buf_size: 'int', stride: 'int', render_mode: 'DISPLAY_RENDER_MODE') -> 'None':
        return _lvgl.lv_display_set_buffers_with_stride(self._pointer, ffi.NULL if buf1 is None else buf1, ffi.NULL if buf2 is None else buf2, buf_size, stride, render_mode.value if render_mode and isinstance(render_mode, Enum) else (render_mode or 0))
    def set_draw_buffers(self, buf1: 'draw_buf', buf2: 'draw_buf') -> 'None':
        return _lvgl.lv_display_set_draw_buffers(self._pointer, buf1._pointer if buf1 else ffi.NULL, buf2._pointer if buf2 else ffi.NULL)
    def set_render_mode(self, render_mode: 'DISPLAY_RENDER_MODE') -> 'None':
        return _lvgl.lv_display_set_render_mode(self._pointer, render_mode.value if render_mode and isinstance(render_mode, Enum) else (render_mode or 0))
    def set_flush_cb(self, flush_cb: 'lv_display_flush_cb_t') -> 'None':
        def wrap_flush_cb(original_flush_cb):
            def flush_cb(_disp, _area, _px_map):
                disp = display.__new__(display)
                disp._pointer = _disp
                area = area.__new__(area)
                area._pointer = _area
                px_map = _px_map
                original_flush_cb(disp, area, px_map)
            return ffi.callback('void (*)(lv_display_t*, lv_area_t*, uint8_t*)', flush_cb)
        if isinstance(flush_cb, ffi.CData):
            flush_cb_wrapper = flush_cb
        else:
            flush_cb_wrapper = self._callbacks.get(flush_cb)
        if not flush_cb_wrapper:
            flush_cb_wrapper = wrap_flush_cb(flush_cb)
            self._callbacks[flush_cb] = flush_cb_wrapper
        return _lvgl.lv_display_set_flush_cb(self._pointer, flush_cb_wrapper)
    def set_flush_wait_cb(self, wait_cb: 'lv_display_flush_wait_cb_t') -> 'None':
        def wrap_wait_cb(original_wait_cb):
            def wait_cb(_disp):
                disp = display.__new__(display)
                disp._pointer = _disp
                original_wait_cb(disp)
            return ffi.callback('void (*)(lv_display_t*)', wait_cb)
        if isinstance(wait_cb, ffi.CData):
            wait_cb_wrapper = wait_cb
        else:
            wait_cb_wrapper = self._callbacks.get(wait_cb)
        if not wait_cb_wrapper:
            wait_cb_wrapper = wrap_wait_cb(wait_cb)
            self._callbacks[wait_cb] = wait_cb_wrapper
        return _lvgl.lv_display_set_flush_wait_cb(self._pointer, wait_cb_wrapper)
    def set_color_format(self, color_format: 'COLOR_FORMAT') -> 'None':
        return _lvgl.lv_display_set_color_format(self._pointer, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
    def get_color_format(self) -> 'lv_color_format_t':
        return _lvgl.lv_display_get_color_format(self._pointer)
    def set_tile_cnt(self, tile_cnt: 'int') -> 'None':
        return _lvgl.lv_display_set_tile_cnt(self._pointer, tile_cnt)
    def get_tile_cnt(self) -> 'int':
        return _lvgl.lv_display_get_tile_cnt(self._pointer)
    def set_antialiasing(self, en: 'bool') -> 'None':
        return _lvgl.lv_display_set_antialiasing(self._pointer, en)
    def get_antialiasing(self) -> 'bool':
        return _lvgl.lv_display_get_antialiasing(self._pointer)
    def flush_ready(self) -> 'None':
        return _lvgl.lv_display_flush_ready(self._pointer)
    def flush_is_last(self) -> 'bool':
        return _lvgl.lv_display_flush_is_last(self._pointer)
    def is_double_buffered(self) -> 'bool':
        return _lvgl.lv_display_is_double_buffered(self._pointer)
    def get_screen_active(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_display_get_screen_active(self._pointer)
        return result if result._pointer else None
    def get_screen_prev(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_display_get_screen_prev(self._pointer)
        return result if result._pointer else None
    def get_layer_top(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_display_get_layer_top(self._pointer)
        return result if result._pointer else None
    def get_layer_sys(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_display_get_layer_sys(self._pointer)
        return result if result._pointer else None
    def get_layer_bottom(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_display_get_layer_bottom(self._pointer)
        return result if result._pointer else None
    def add_event_cb(self, event_cb: 'lv_event_cb_t', filter: 'EVENT_CODE', user_data: 'str') -> 'None':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_display_add_event_cb(self._pointer, event_cb_wrapper, filter.value if filter and isinstance(filter, Enum) else (filter or 0), ffi.NULL if user_data is None else user_data)
    def get_event_count(self) -> 'int':
        return _lvgl.lv_display_get_event_count(self._pointer)
    def get_event_dsc(self, index: 'int') -> 'event_dsc':
        result = event_dsc.__new__(event_dsc)
        result._pointer = _lvgl.lv_display_get_event_dsc(self._pointer, index)
        return result if result._pointer else None
    def delete_event(self, index: 'int') -> 'bool':
        return _lvgl.lv_display_delete_event(self._pointer, index)
    def remove_event_cb_with_user_data(self, event_cb: 'lv_event_cb_t', user_data: 'str') -> 'int':
        def wrap_event_cb(original_event_cb):
            def event_cb(_e):
                e = event.__new__(event)
                e._pointer = _e
                original_event_cb(e)
            return ffi.callback('void (*)(lv_event_t*)', event_cb)
        if isinstance(event_cb, ffi.CData):
            event_cb_wrapper = event_cb
        else:
            event_cb_wrapper = self._callbacks.get(event_cb)
        if not event_cb_wrapper:
            event_cb_wrapper = wrap_event_cb(event_cb)
            self._callbacks[event_cb] = event_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_display_remove_event_cb_with_user_data(self._pointer, event_cb_wrapper, ffi.NULL if user_data is None else user_data)
    def send_event(self, code: 'EVENT_CODE', param: 'None') -> 'lv_result_t':
        return _lvgl.lv_display_send_event(self._pointer, code.value if code and isinstance(code, Enum) else (code or 0), ffi.NULL if param is None else param)
    def set_theme(self, th: 'theme') -> 'None':
        return _lvgl.lv_display_set_theme(self._pointer, th._pointer if th else ffi.NULL)
    def get_theme(self) -> 'theme':
        result = theme.__new__(theme)
        result._pointer = _lvgl.lv_display_get_theme(self._pointer)
        return result if result._pointer else None
    def get_inactive_time(self) -> 'int':
        return _lvgl.lv_display_get_inactive_time(self._pointer)
    def trigger_activity(self) -> 'None':
        return _lvgl.lv_display_trigger_activity(self._pointer)
    def enable_invalidation(self, en: 'bool') -> 'None':
        return _lvgl.lv_display_enable_invalidation(self._pointer, en)
    def is_invalidation_enabled(self) -> 'bool':
        return _lvgl.lv_display_is_invalidation_enabled(self._pointer)
    def get_refr_timer(self) -> 'timer':
        result = timer.__new__(timer)
        result._pointer = _lvgl.lv_display_get_refr_timer(self._pointer)
        return result if result._pointer else None
    def delete_refr_timer(self) -> 'None':
        return _lvgl.lv_display_delete_refr_timer(self._pointer)
    def set_user_data(self, user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_display_set_user_data(self._pointer, ffi.NULL if user_data is None else user_data)
    def set_driver_data(self, driver_data: 'None') -> 'None':
        return _lvgl.lv_display_set_driver_data(self._pointer, ffi.NULL if driver_data is None else driver_data)
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_display_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_driver_data(self) -> 'None':
        return _lvgl.lv_display_get_driver_data(self._pointer)
    def get_buf_active(self) -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_display_get_buf_active(self._pointer)
        return result if result._pointer else None
    def rotate_area(self, area: 'area') -> 'None':
        return _lvgl.lv_display_rotate_area(self._pointer, area._pointer if area else ffi.NULL)
    def get_draw_buf_size(self) -> 'int':
        return _lvgl.lv_display_get_draw_buf_size(self._pointer)
    def get_invalidated_draw_buf_size(self, width: 'int', height: 'int') -> 'int':
        return _lvgl.lv_display_get_invalidated_draw_buf_size(self._pointer, width, height)
    def dpx(self, n: 'int') -> 'int':
        return _lvgl.lv_display_dpx(self._pointer, n)
    def refr_timer(self) -> 'None':
        return _lvgl.lv_display_refr_timer(self._pointer)

class cover_check_info:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_cover_check_info_t[2]')
        _objects[self] = self._pointer

class circle_buf:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_circle_buf_t[2]')
        _objects[self] = self._pointer
    def create_from_buf(self, capacity: 'int', element_size: 'int') -> 'circle_buf':
        result = circle_buf.__new__(circle_buf)
        result._pointer = _lvgl.lv_circle_buf_create_from_buf(self._pointer, capacity, element_size)
        return result if result._pointer else None
    def create_from_array(self) -> 'circle_buf':
        result = circle_buf.__new__(circle_buf)
        result._pointer = _lvgl.lv_circle_buf_create_from_array(self._pointer)
        return result if result._pointer else None
    def resize(self, capacity: 'int') -> 'lv_result_t':
        return _lvgl.lv_circle_buf_resize(self._pointer, capacity)
    def destroy(self) -> 'None':
        return _lvgl.lv_circle_buf_destroy(self._pointer)
    def size(self) -> 'int':
        return _lvgl.lv_circle_buf_size(self._pointer)
    def capacity(self) -> 'int':
        return _lvgl.lv_circle_buf_capacity(self._pointer)
    def remain(self) -> 'int':
        return _lvgl.lv_circle_buf_remain(self._pointer)
    def is_empty(self) -> 'bool':
        return _lvgl.lv_circle_buf_is_empty(self._pointer)
    def is_full(self) -> 'bool':
        return _lvgl.lv_circle_buf_is_full(self._pointer)
    def reset(self) -> 'None':
        return _lvgl.lv_circle_buf_reset(self._pointer)
    def head(self) -> 'None':
        return _lvgl.lv_circle_buf_head(self._pointer)
    def tail(self) -> 'None':
        return _lvgl.lv_circle_buf_tail(self._pointer)
    def read(self, data: 'None') -> 'lv_result_t':
        return _lvgl.lv_circle_buf_read(self._pointer, ffi.NULL if data is None else data)
    def write(self, data: 'None') -> 'lv_result_t':
        return _lvgl.lv_circle_buf_write(self._pointer, ffi.NULL if data is None else data)
    def fill(self, count: 'int', fill_cb: 'lv_circle_buf_fill_cb_t', user_data: 'str') -> 'int':
        def wrap_fill_cb(original_fill_cb):
            def fill_cb(_buf, _buff_len, _index, _user_data):
                buf = _buf
                buff_len = _buff_len
                index = _index
                user_data = _user_data
                return original_fill_cb(buf, buff_len, index, user_data)
            return ffi.callback('bool (*)(void*, uint32_t, int32_t, void*)', fill_cb)
        if isinstance(fill_cb, ffi.CData):
            fill_cb_wrapper = fill_cb
        else:
            fill_cb_wrapper = self._callbacks.get(fill_cb)
        if not fill_cb_wrapper:
            fill_cb_wrapper = wrap_fill_cb(fill_cb)
            self._callbacks[fill_cb] = fill_cb_wrapper
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_circle_buf_fill(self._pointer, count, fill_cb_wrapper, ffi.NULL if user_data is None else user_data)
    def skip(self) -> 'lv_result_t':
        return _lvgl.lv_circle_buf_skip(self._pointer)
    def peek(self, data: 'None') -> 'lv_result_t':
        return _lvgl.lv_circle_buf_peek(self._pointer, ffi.NULL if data is None else data)
    def peek_at(self, index: 'int', data: 'None') -> 'lv_result_t':
        return _lvgl.lv_circle_buf_peek_at(self._pointer, index, ffi.NULL if data is None else data)

class checkbox(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_checkbox_create(parent._pointer if parent else ffi.NULL)
    def set_text(self, txt: 'str') -> 'None':
        return _lvgl.lv_checkbox_set_text(self._pointer, txt.encode('utf-8'))
    def set_text_static(self, txt: 'str') -> 'None':
        return _lvgl.lv_checkbox_set_text_static(self._pointer, txt.encode('utf-8'))
    def get_text(self) -> 'str':
        result = _lvgl.lv_checkbox_get_text(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')

class chart_series:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_chart_series_t[2]')
        _objects[self] = self._pointer

class chart_cursor:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_chart_cursor_t[2]')
        _objects[self] = self._pointer

class chart(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_chart_create(parent._pointer if parent else ffi.NULL)
    def set_type(self, type: 'CHART_TYPE') -> 'None':
        return _lvgl.lv_chart_set_type(self._pointer, type.value if type and isinstance(type, Enum) else (type or 0))
    def set_point_count(self, cnt: 'int') -> 'None':
        return _lvgl.lv_chart_set_point_count(self._pointer, cnt)
    def set_axis_range(self, axis: 'CHART_AXIS', min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_chart_set_axis_range(self._pointer, axis.value if axis and isinstance(axis, Enum) else (axis or 0), min, max)
    def set_update_mode(self, update_mode: 'CHART_UPDATE_MODE') -> 'None':
        return _lvgl.lv_chart_set_update_mode(self._pointer, update_mode.value if update_mode and isinstance(update_mode, Enum) else (update_mode or 0))
    def set_div_line_count(self, hdiv: 'int', vdiv: 'int') -> 'None':
        return _lvgl.lv_chart_set_div_line_count(self._pointer, hdiv, vdiv)
    def get_type(self) -> 'lv_chart_type_t':
        return _lvgl.lv_chart_get_type(self._pointer)
    def get_point_count(self) -> 'int':
        return _lvgl.lv_chart_get_point_count(self._pointer)
    def get_x_start_point(self, ser: 'chart_series') -> 'int':
        return _lvgl.lv_chart_get_x_start_point(self._pointer, ser._pointer if ser else ffi.NULL)
    def get_point_pos_by_id(self, ser: 'chart_series', id: 'int', p_out: 'point') -> 'None':
        return _lvgl.lv_chart_get_point_pos_by_id(self._pointer, ser._pointer if ser else ffi.NULL, id, p_out._pointer if p_out else ffi.NULL)
    def refresh(self) -> 'None':
        return _lvgl.lv_chart_refresh(self._pointer)
    def add_series(self, color: 'lv_color_t', axis: 'CHART_AXIS') -> 'chart_series':
        result = chart_series.__new__(chart_series)
        result._pointer = _lvgl.lv_chart_add_series(self._pointer, color, axis.value if axis and isinstance(axis, Enum) else (axis or 0))
        return result if result._pointer else None
    def remove_series(self, series: 'chart_series') -> 'None':
        return _lvgl.lv_chart_remove_series(self._pointer, series._pointer if series else ffi.NULL)
    def hide_series(self, series: 'chart_series', hide: 'bool') -> 'None':
        return _lvgl.lv_chart_hide_series(self._pointer, series._pointer if series else ffi.NULL, hide)
    def set_series_color(self, series: 'chart_series', color: 'lv_color_t') -> 'None':
        return _lvgl.lv_chart_set_series_color(self._pointer, series._pointer if series else ffi.NULL, color)
    def get_series_color(self, series: 'chart_series') -> 'lv_color_t':
        return _lvgl.lv_chart_get_series_color(self._pointer, series._pointer if series else ffi.NULL)
    def set_x_start_point(self, ser: 'chart_series', id: 'int') -> 'None':
        return _lvgl.lv_chart_set_x_start_point(self._pointer, ser._pointer if ser else ffi.NULL, id)
    def get_series_next(self, ser: 'chart_series') -> 'chart_series':
        result = chart_series.__new__(chart_series)
        result._pointer = _lvgl.lv_chart_get_series_next(self._pointer, ser._pointer if ser else ffi.NULL)
        return result if result._pointer else None
    def add_cursor(self, color: 'lv_color_t', dir: 'DIR') -> 'chart_cursor':
        result = chart_cursor.__new__(chart_cursor)
        result._pointer = _lvgl.lv_chart_add_cursor(self._pointer, color, dir.value if dir and isinstance(dir, Enum) else (dir or 0))
        return result if result._pointer else None
    def set_cursor_pos(self, cursor: 'chart_cursor', pos: 'point') -> 'None':
        return _lvgl.lv_chart_set_cursor_pos(self._pointer, cursor._pointer if cursor else ffi.NULL, pos._pointer if pos else ffi.NULL)
    def set_cursor_point(self, cursor: 'chart_cursor', ser: 'chart_series', point_id: 'int') -> 'None':
        return _lvgl.lv_chart_set_cursor_point(self._pointer, cursor._pointer if cursor else ffi.NULL, ser._pointer if ser else ffi.NULL, point_id)
    def get_cursor_point(self, cursor: 'chart_cursor') -> 'point':
        result = point.__new__(point)
        result._pointer = _lvgl.lv_chart_get_cursor_point(self._pointer, cursor._pointer if cursor else ffi.NULL)
        return result if result._pointer else None
    def set_all_values(self, ser: 'chart_series', value: 'int') -> 'None':
        return _lvgl.lv_chart_set_all_values(self._pointer, ser._pointer if ser else ffi.NULL, value)
    def set_next_value(self, ser: 'chart_series', value: 'int') -> 'None':
        return _lvgl.lv_chart_set_next_value(self._pointer, ser._pointer if ser else ffi.NULL, value)
    def set_next_value2(self, ser: 'chart_series', x_value: 'int', y_value: 'int') -> 'None':
        return _lvgl.lv_chart_set_next_value2(self._pointer, ser._pointer if ser else ffi.NULL, x_value, y_value)
    def set_series_values(self, ser: 'chart_series', values: 'int', values_cnt: 'size_t') -> 'None':
        return _lvgl.lv_chart_set_series_values(self._pointer, ser._pointer if ser else ffi.NULL, ffi.NULL if values is None else values, values_cnt)
    def set_series_values2(self, ser: 'chart_series', x_values: 'int', y_values: 'int', values_cnt: 'size_t') -> 'None':
        return _lvgl.lv_chart_set_series_values2(self._pointer, ser._pointer if ser else ffi.NULL, ffi.NULL if x_values is None else x_values, ffi.NULL if y_values is None else y_values, values_cnt)
    def set_series_value_by_id(self, ser: 'chart_series', id: 'int', value: 'int') -> 'None':
        return _lvgl.lv_chart_set_series_value_by_id(self._pointer, ser._pointer if ser else ffi.NULL, id, value)
    def set_series_value_by_id2(self, ser: 'chart_series', id: 'int', x_value: 'int', y_value: 'int') -> 'None':
        return _lvgl.lv_chart_set_series_value_by_id2(self._pointer, ser._pointer if ser else ffi.NULL, id, x_value, y_value)
    def set_series_ext_y_array(self, ser: 'chart_series', array: 'int') -> 'None':
        return _lvgl.lv_chart_set_series_ext_y_array(self._pointer, ser._pointer if ser else ffi.NULL, ffi.NULL if array is None else array)
    def set_series_ext_x_array(self, ser: 'chart_series', array: 'int') -> 'None':
        return _lvgl.lv_chart_set_series_ext_x_array(self._pointer, ser._pointer if ser else ffi.NULL, ffi.NULL if array is None else array)
    def get_series_y_array(self, ser: 'chart_series') -> 'int':
        return _lvgl.lv_chart_get_series_y_array(self._pointer, ser._pointer if ser else ffi.NULL)
    def get_series_x_array(self, ser: 'chart_series') -> 'int':
        return _lvgl.lv_chart_get_series_x_array(self._pointer, ser._pointer if ser else ffi.NULL)
    def get_pressed_point(self) -> 'int':
        return _lvgl.lv_chart_get_pressed_point(self._pointer)
    def get_first_point_center_offset(self) -> 'int':
        return _lvgl.lv_chart_get_first_point_center_offset(self._pointer)

class canvas(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_canvas_create(parent._pointer if parent else ffi.NULL)
    def set_buffer(self, buf: 'None', w: 'int', h: 'int', cf: 'COLOR_FORMAT') -> 'None':
        return _lvgl.lv_canvas_set_buffer(self._pointer, ffi.NULL if buf is None else buf, w, h, cf.value if cf and isinstance(cf, Enum) else (cf or 0))
    def set_draw_buf(self, draw_buf: 'draw_buf') -> 'None':
        return _lvgl.lv_canvas_set_draw_buf(self._pointer, draw_buf._pointer if draw_buf else ffi.NULL)
    def set_px(self, x: 'int', y: 'int', color: 'lv_color_t', opa: 'OPA') -> 'None':
        return _lvgl.lv_canvas_set_px(self._pointer, x, y, color, opa.value if opa and isinstance(opa, Enum) else (opa or 0))
    def set_palette(self, index: 'int', color: 'lv_color32_t') -> 'None':
        return _lvgl.lv_canvas_set_palette(self._pointer, index, color)
    def get_draw_buf(self) -> 'draw_buf':
        result = draw_buf.__new__(draw_buf)
        result._pointer = _lvgl.lv_canvas_get_draw_buf(self._pointer)
        return result if result._pointer else None
    def get_px(self, x: 'int', y: 'int') -> 'lv_color32_t':
        return _lvgl.lv_canvas_get_px(self._pointer, x, y)
    def get_image(self) -> 'image_dsc':
        result = image_dsc.__new__(image_dsc)
        result._pointer = _lvgl.lv_canvas_get_image(self._pointer)
        return result if result._pointer else None
    def get_buf(self) -> 'None':
        return _lvgl.lv_canvas_get_buf(self._pointer)
    def copy_buf(self, canvas_area: 'area', dest_buf: 'draw_buf', dest_area: 'area') -> 'None':
        return _lvgl.lv_canvas_copy_buf(self._pointer, canvas_area._pointer if canvas_area else ffi.NULL, dest_buf._pointer if dest_buf else ffi.NULL, dest_area._pointer if dest_area else ffi.NULL)
    def fill_bg(self, color: 'lv_color_t', opa: 'OPA') -> 'None':
        return _lvgl.lv_canvas_fill_bg(self._pointer, color, opa.value if opa and isinstance(opa, Enum) else (opa or 0))
    def init_layer(self, layer: 'layer') -> 'None':
        return _lvgl.lv_canvas_init_layer(self._pointer, layer._pointer if layer else ffi.NULL)
    def finish_layer(self, layer: 'layer') -> 'None':
        return _lvgl.lv_canvas_finish_layer(self._pointer, layer._pointer if layer else ffi.NULL)

class calendar_date:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_calendar_date_t[2]')
        _objects[self] = self._pointer

class calendar(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_calendar_create(parent._pointer if parent else ffi.NULL)
    def set_today_date(self, year: 'int', month: 'int', day: 'int') -> 'None':
        return _lvgl.lv_calendar_set_today_date(self._pointer, year, month, day)
    def set_month_shown(self, year: 'int', month: 'int') -> 'None':
        return _lvgl.lv_calendar_set_month_shown(self._pointer, year, month)
    def set_highlighted_dates(self, highlighted: 'lv_calendar_date_t', date_num: 'size_t') -> 'None':
        return _lvgl.lv_calendar_set_highlighted_dates(self._pointer, ffi.NULL if highlighted is None else highlighted, date_num)
    def set_day_names(self, day_names: 'str') -> 'None':
        return _lvgl.lv_calendar_set_day_names(self._pointer, ffi.NULL if day_names is None else day_names)
    def get_btnmatrix(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_calendar_get_btnmatrix(self._pointer)
        return result if result._pointer else None
    def get_today_date(self) -> 'calendar_date':
        result = calendar_date.__new__(calendar_date)
        result._pointer = _lvgl.lv_calendar_get_today_date(self._pointer)
        return result if result._pointer else None
    def get_showed_date(self) -> 'calendar_date':
        result = calendar_date.__new__(calendar_date)
        result._pointer = _lvgl.lv_calendar_get_showed_date(self._pointer)
        return result if result._pointer else None
    def get_highlighted_dates(self) -> 'calendar_date':
        result = calendar_date.__new__(calendar_date)
        result._pointer = _lvgl.lv_calendar_get_highlighted_dates(self._pointer)
        return result if result._pointer else None
    def get_highlighted_dates_num(self) -> 'size_t':
        return _lvgl.lv_calendar_get_highlighted_dates_num(self._pointer)
    def get_pressed_date(self, date: 'calendar_date') -> 'lv_result_t':
        return _lvgl.lv_calendar_get_pressed_date(self._pointer, date._pointer if date else ffi.NULL)
    def header_arrow_create(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_calendar_header_arrow_create(self._pointer)
        return result if result._pointer else None
    def header_dropdown_create(self) -> 'obj':
        result = obj.__new__(obj)
        result._pointer = _lvgl.lv_calendar_header_dropdown_create(self._pointer)
        return result if result._pointer else None
    def header_dropdown_set_year_list(self, years_list: 'str') -> 'None':
        return _lvgl.lv_calendar_header_dropdown_set_year_list(self._pointer, years_list.encode('utf-8'))

class cache_entry:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_cache_entry_t[2]')
        _objects[self] = self._pointer

class cache:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_cache_t[2]')
        _objects[self] = self._pointer

class buttonmatrix(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_buttonmatrix_create(parent._pointer if parent else ffi.NULL)
    def set_map(self, map: 'str') -> 'None':
        return _lvgl.lv_buttonmatrix_set_map(self._pointer, ffi.NULL if map is None else map)
    def set_ctrl_map(self, ctrl_map: 'lv_buttonmatrix_ctrl_t') -> 'None':
        return _lvgl.lv_buttonmatrix_set_ctrl_map(self._pointer, ffi.NULL if ctrl_map is None else ctrl_map)
    def set_selected_button(self, btn_id: 'int') -> 'None':
        return _lvgl.lv_buttonmatrix_set_selected_button(self._pointer, btn_id)
    def set_button_ctrl(self, btn_id: 'int', ctrl: 'BUTTONMATRIX_CTRL') -> 'None':
        return _lvgl.lv_buttonmatrix_set_button_ctrl(self._pointer, btn_id, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def clear_button_ctrl(self, btn_id: 'int', ctrl: 'BUTTONMATRIX_CTRL') -> 'None':
        return _lvgl.lv_buttonmatrix_clear_button_ctrl(self._pointer, btn_id, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def set_button_ctrl_all(self, ctrl: 'BUTTONMATRIX_CTRL') -> 'None':
        return _lvgl.lv_buttonmatrix_set_button_ctrl_all(self._pointer, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def clear_button_ctrl_all(self, ctrl: 'BUTTONMATRIX_CTRL') -> 'None':
        return _lvgl.lv_buttonmatrix_clear_button_ctrl_all(self._pointer, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def set_button_width(self, btn_id: 'int', width: 'int') -> 'None':
        return _lvgl.lv_buttonmatrix_set_button_width(self._pointer, btn_id, width)
    def set_one_checked(self, en: 'bool') -> 'None':
        return _lvgl.lv_buttonmatrix_set_one_checked(self._pointer, en)
    def get_map(self) -> 'str':
        result = _lvgl.lv_buttonmatrix_get_map(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def get_selected_button(self) -> 'int':
        return _lvgl.lv_buttonmatrix_get_selected_button(self._pointer)
    def get_button_text(self, btn_id: 'int') -> 'str':
        result = _lvgl.lv_buttonmatrix_get_button_text(self._pointer, btn_id)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def has_button_ctrl(self, btn_id: 'int', ctrl: 'BUTTONMATRIX_CTRL') -> 'bool':
        return _lvgl.lv_buttonmatrix_has_button_ctrl(self._pointer, btn_id, ctrl.value if ctrl and isinstance(ctrl, Enum) else (ctrl or 0))
    def get_one_checked(self) -> 'bool':
        return _lvgl.lv_buttonmatrix_get_one_checked(self._pointer)

class button(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_button_create(parent._pointer if parent else ffi.NULL)

class barcode:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_barcode_t[2]')
        _objects[self] = self._pointer

class bar_anim:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_bar_anim_t[2]')
        _objects[self] = self._pointer

class bar(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_bar_create(parent._pointer if parent else ffi.NULL)
    def set_value(self, value: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_bar_set_value(self._pointer, value, anim)
    def set_start_value(self, start_value: 'int', anim: 'lv_anim_enable_t') -> 'None':
        return _lvgl.lv_bar_set_start_value(self._pointer, start_value, anim)
    def set_range(self, min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_bar_set_range(self._pointer, min, max)
    def set_mode(self, mode: 'BAR_MODE') -> 'None':
        return _lvgl.lv_bar_set_mode(self._pointer, mode.value if mode and isinstance(mode, Enum) else (mode or 0))
    def set_orientation(self, orientation: 'BAR_ORIENTATION') -> 'None':
        return _lvgl.lv_bar_set_orientation(self._pointer, orientation.value if orientation and isinstance(orientation, Enum) else (orientation or 0))
    def get_value(self) -> 'int':
        return _lvgl.lv_bar_get_value(self._pointer)
    def get_start_value(self) -> 'int':
        return _lvgl.lv_bar_get_start_value(self._pointer)
    def get_min_value(self) -> 'int':
        return _lvgl.lv_bar_get_min_value(self._pointer)
    def get_max_value(self) -> 'int':
        return _lvgl.lv_bar_get_max_value(self._pointer)
    def get_mode(self) -> 'lv_bar_mode_t':
        return _lvgl.lv_bar_get_mode(self._pointer)
    def get_orientation(self) -> 'lv_bar_orientation_t':
        return _lvgl.lv_bar_get_orientation(self._pointer)
    def is_symmetrical(self) -> 'bool':
        return _lvgl.lv_bar_is_symmetrical(self._pointer)

class array:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_array_t[2]')
        _lvgl.lv_array_init(self._pointer)
        _objects[self] = self._pointer
    def init_from_buf(self, buf: 'None', capacity: 'int', element_size: 'int') -> 'None':
        return _lvgl.lv_array_init_from_buf(self._pointer, ffi.NULL if buf is None else buf, capacity, element_size)
    def resize(self, new_capacity: 'int') -> 'bool':
        return _lvgl.lv_array_resize(self._pointer, new_capacity)
    def deinit(self) -> 'None':
        return _lvgl.lv_array_deinit(self._pointer)
    def copy(self, source: 'array') -> 'None':
        return _lvgl.lv_array_copy(self._pointer, source._pointer if source else ffi.NULL)
    def shrink(self) -> 'None':
        return _lvgl.lv_array_shrink(self._pointer)
    def remove(self, index: 'int') -> 'lv_result_t':
        return _lvgl.lv_array_remove(self._pointer, index)
    def erase(self, start: 'int', end: 'int') -> 'lv_result_t':
        return _lvgl.lv_array_erase(self._pointer, start, end)
    def concat(self, other: 'array') -> 'lv_result_t':
        return _lvgl.lv_array_concat(self._pointer, other._pointer if other else ffi.NULL)
    def push_back(self, element: 'None') -> 'lv_result_t':
        return _lvgl.lv_array_push_back(self._pointer, ffi.NULL if element is None else element)
    def assign(self, index: 'int', value: 'None') -> 'lv_result_t':
        return _lvgl.lv_array_assign(self._pointer, index, ffi.NULL if value is None else value)
    def at(self, index: 'int') -> 'None':
        return _lvgl.lv_array_at(self._pointer, index)
    def size(self) -> 'int':
        return _lvgl.lv_array_size(self._pointer)
    def capacity(self) -> 'int':
        return _lvgl.lv_array_capacity(self._pointer)
    def is_empty(self) -> 'bool':
        return _lvgl.lv_array_is_empty(self._pointer)
    def is_full(self) -> 'bool':
        return _lvgl.lv_array_is_full(self._pointer)
    def clear(self) -> 'None':
        return _lvgl.lv_array_clear(self._pointer)
    def front(self) -> 'None':
        return _lvgl.lv_array_front(self._pointer)
    def back(self) -> 'None':
        return _lvgl.lv_array_back(self._pointer)

class area:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_area_t[2]')
        _objects[self] = self._pointer
    def set(self, x1: 'int', y1: 'int', x2: 'int', y2: 'int') -> 'None':
        return _lvgl.lv_area_set(self._pointer, x1, y1, x2, y2)
    def get_width(self) -> 'int':
        return _lvgl.lv_area_get_width(self._pointer)
    def get_height(self) -> 'int':
        return _lvgl.lv_area_get_height(self._pointer)
    def set_width(self, w: 'int') -> 'None':
        return _lvgl.lv_area_set_width(self._pointer, w)
    def set_height(self, h: 'int') -> 'None':
        return _lvgl.lv_area_set_height(self._pointer, h)
    def get_size(self) -> 'int':
        return _lvgl.lv_area_get_size(self._pointer)
    def increase(self, w_extra: 'int', h_extra: 'int') -> 'None':
        return _lvgl.lv_area_increase(self._pointer, w_extra, h_extra)
    def move(self, x_ofs: 'int', y_ofs: 'int') -> 'None':
        return _lvgl.lv_area_move(self._pointer, x_ofs, y_ofs)
    def align(self, to_align: 'area', align: 'ALIGN', ofs_x: 'int', ofs_y: 'int') -> 'None':
        return _lvgl.lv_area_align(self._pointer, to_align._pointer if to_align else ffi.NULL, align.value if align and isinstance(align, Enum) else (align or 0), ofs_x, ofs_y)
    def copy(self, src: 'area') -> 'None':
        return _lvgl.lv_area_copy(self._pointer, src._pointer if src else ffi.NULL)

class arc(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_arc_create(parent._pointer if parent else ffi.NULL)
    def set_start_angle(self, start: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_start_angle(self._pointer, start)
    def set_end_angle(self, end: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_end_angle(self._pointer, end)
    def set_angles(self, start: 'lv_value_precise_t', end: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_angles(self._pointer, start, end)
    def set_bg_start_angle(self, start: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_bg_start_angle(self._pointer, start)
    def set_bg_end_angle(self, end: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_bg_end_angle(self._pointer, end)
    def set_bg_angles(self, start: 'lv_value_precise_t', end: 'lv_value_precise_t') -> 'None':
        return _lvgl.lv_arc_set_bg_angles(self._pointer, start, end)
    def set_rotation(self, rotation: 'int') -> 'None':
        return _lvgl.lv_arc_set_rotation(self._pointer, rotation)
    def set_mode(self, type: 'ARC_MODE') -> 'None':
        return _lvgl.lv_arc_set_mode(self._pointer, type.value if type and isinstance(type, Enum) else (type or 0))
    def set_value(self, value: 'int') -> 'None':
        return _lvgl.lv_arc_set_value(self._pointer, value)
    def set_range(self, min: 'int', max: 'int') -> 'None':
        return _lvgl.lv_arc_set_range(self._pointer, min, max)
    def set_change_rate(self, rate: 'int') -> 'None':
        return _lvgl.lv_arc_set_change_rate(self._pointer, rate)
    def set_knob_offset(self, offset: 'int') -> 'None':
        return _lvgl.lv_arc_set_knob_offset(self._pointer, offset)
    def get_angle_start(self) -> 'lv_value_precise_t':
        return _lvgl.lv_arc_get_angle_start(self._pointer)
    def get_angle_end(self) -> 'lv_value_precise_t':
        return _lvgl.lv_arc_get_angle_end(self._pointer)
    def get_bg_angle_start(self) -> 'lv_value_precise_t':
        return _lvgl.lv_arc_get_bg_angle_start(self._pointer)
    def get_bg_angle_end(self) -> 'lv_value_precise_t':
        return _lvgl.lv_arc_get_bg_angle_end(self._pointer)
    def get_value(self) -> 'int':
        return _lvgl.lv_arc_get_value(self._pointer)
    def get_min_value(self) -> 'int':
        return _lvgl.lv_arc_get_min_value(self._pointer)
    def get_max_value(self) -> 'int':
        return _lvgl.lv_arc_get_max_value(self._pointer)
    def get_mode(self) -> 'lv_arc_mode_t':
        return _lvgl.lv_arc_get_mode(self._pointer)
    def get_rotation(self) -> 'int':
        return _lvgl.lv_arc_get_rotation(self._pointer)
    def get_knob_offset(self) -> 'int':
        return _lvgl.lv_arc_get_knob_offset(self._pointer)
    def align_obj_to_angle(self, obj_to_align: 'obj', r_offset: 'int') -> 'None':
        return _lvgl.lv_arc_align_obj_to_angle(self._pointer, obj_to_align._pointer if obj_to_align else ffi.NULL, r_offset)
    def rotate_obj_to_angle(self, obj_to_rotate: 'obj', r_offset: 'int') -> 'None':
        return _lvgl.lv_arc_rotate_obj_to_angle(self._pointer, obj_to_rotate._pointer if obj_to_rotate else ffi.NULL, r_offset)
    def bind_value(self, subject: 'subject') -> 'observer':
        result = observer.__new__(observer)
        result._pointer = _lvgl.lv_arc_bind_value(self._pointer, subject._pointer if subject else ffi.NULL)
        return result if result._pointer else None

class animimg(obj):
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self, parent):
        self._pointer = _lvgl.lv_animimg_create(parent._pointer if parent else ffi.NULL)
    def set_src(self, dsc: 'None', num: 'size_t') -> 'None':
        return _lvgl.lv_animimg_set_src(self._pointer, ffi.NULL if dsc is None else dsc, num)
    def start(self) -> 'None':
        return _lvgl.lv_animimg_start(self._pointer)
    def set_duration(self, duration: 'int') -> 'None':
        return _lvgl.lv_animimg_set_duration(self._pointer, duration)
    def set_repeat_count(self, count: 'int') -> 'None':
        return _lvgl.lv_animimg_set_repeat_count(self._pointer, count)
    def get_src(self) -> 'None':
        return _lvgl.lv_animimg_get_src(self._pointer)
    def get_src_count(self) -> 'int':
        return _lvgl.lv_animimg_get_src_count(self._pointer)
    def get_duration(self) -> 'int':
        return _lvgl.lv_animimg_get_duration(self._pointer)
    def get_repeat_count(self) -> 'int':
        return _lvgl.lv_animimg_get_repeat_count(self._pointer)
    def get_anim(self) -> 'anim':
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_animimg_get_anim(self._pointer)
        return result if result._pointer else None

class anim_timeline:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_anim_timeline_t[2]')
        _objects[self] = self._pointer
    def delete(self) -> 'None':
        return _lvgl.lv_anim_timeline_delete(self._pointer)
    def add(self, start_time: 'int', a: 'anim') -> 'None':
        return _lvgl.lv_anim_timeline_add(self._pointer, start_time, a._pointer if a else ffi.NULL)
    def start(self) -> 'int':
        return _lvgl.lv_anim_timeline_start(self._pointer)
    def pause(self) -> 'None':
        return _lvgl.lv_anim_timeline_pause(self._pointer)
    def set_reverse(self, reverse: 'bool') -> 'None':
        return _lvgl.lv_anim_timeline_set_reverse(self._pointer, reverse)
    def set_repeat_count(self, cnt: 'int') -> 'None':
        return _lvgl.lv_anim_timeline_set_repeat_count(self._pointer, cnt)
    def set_repeat_delay(self, delay: 'int') -> 'None':
        return _lvgl.lv_anim_timeline_set_repeat_delay(self._pointer, delay)
    def set_progress(self, progress: 'int') -> 'None':
        return _lvgl.lv_anim_timeline_set_progress(self._pointer, progress)
    def get_playtime(self) -> 'int':
        return _lvgl.lv_anim_timeline_get_playtime(self._pointer)
    def get_reverse(self) -> 'bool':
        return _lvgl.lv_anim_timeline_get_reverse(self._pointer)
    def get_progress(self) -> 'int':
        return _lvgl.lv_anim_timeline_get_progress(self._pointer)
    def get_repeat_count(self) -> 'int':
        return _lvgl.lv_anim_timeline_get_repeat_count(self._pointer)
    def get_repeat_delay(self) -> 'int':
        return _lvgl.lv_anim_timeline_get_repeat_delay(self._pointer)

class anim_bezier3_para:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_anim_bezier3_para_t[2]')
        _objects[self] = self._pointer

class anim:
    _pointer = None
    _callbacks = {}
    _user_data = []

    def __init__(self):
        self._pointer = ffi.new('lv_anim_t[2]')
        _lvgl.lv_anim_init(self._pointer)
        _objects[self] = self._pointer
    def set_var(self, var: 'None') -> 'None':
        return _lvgl.lv_anim_set_var(self._pointer, ffi.NULL if var is None else var)
    def set_exec_cb(self, exec_cb: 'lv_anim_exec_xcb_t') -> 'None':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_N0, _i0):
                N0 = _N0
                i0 = _i0
                original_exec_cb(N0, i0)
            return ffi.callback('void (*)(void*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        return _lvgl.lv_anim_set_exec_cb(self._pointer, exec_cb_wrapper)
    def set_duration(self, duration: 'int') -> 'None':
        return _lvgl.lv_anim_set_duration(self._pointer, duration)
    def set_delay(self, delay: 'int') -> 'None':
        return _lvgl.lv_anim_set_delay(self._pointer, delay)
    def resume(self) -> 'None':
        return _lvgl.lv_anim_resume(self._pointer)
    def pause(self) -> 'None':
        return _lvgl.lv_anim_pause(self._pointer)
    def pause_for(self, ms: 'int') -> 'None':
        return _lvgl.lv_anim_pause_for(self._pointer, ms)
    def is_paused(self) -> 'bool':
        return _lvgl.lv_anim_is_paused(self._pointer)
    def set_values(self, start: 'int', end: 'int') -> 'None':
        return _lvgl.lv_anim_set_values(self._pointer, start, end)
    def set_custom_exec_cb(self, exec_cb: 'lv_anim_custom_exec_cb_t') -> 'None':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_a0, _i0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                i0 = _i0
                original_exec_cb(a0, i0)
            return ffi.callback('void (*)(lv_anim_t*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        return _lvgl.lv_anim_set_custom_exec_cb(self._pointer, exec_cb_wrapper)
    def set_path_cb(self, path_cb: 'lv_anim_path_cb_t') -> 'None':
        def wrap_path_cb(original_path_cb):
            def path_cb(_a0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                return original_path_cb(a0)
            return ffi.callback('int32_t (*)(lv_anim_t*)', path_cb)
        if isinstance(path_cb, ffi.CData):
            path_cb_wrapper = path_cb
        else:
            path_cb_wrapper = self._callbacks.get(path_cb)
        if not path_cb_wrapper:
            path_cb_wrapper = wrap_path_cb(path_cb)
            self._callbacks[path_cb] = path_cb_wrapper
        return _lvgl.lv_anim_set_path_cb(self._pointer, path_cb_wrapper)
    def set_start_cb(self, start_cb: 'lv_anim_start_cb_t') -> 'None':
        def wrap_start_cb(original_start_cb):
            def start_cb(_a0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                original_start_cb(a0)
            return ffi.callback('void (*)(lv_anim_t*)', start_cb)
        if isinstance(start_cb, ffi.CData):
            start_cb_wrapper = start_cb
        else:
            start_cb_wrapper = self._callbacks.get(start_cb)
        if not start_cb_wrapper:
            start_cb_wrapper = wrap_start_cb(start_cb)
            self._callbacks[start_cb] = start_cb_wrapper
        return _lvgl.lv_anim_set_start_cb(self._pointer, start_cb_wrapper)
    def set_get_value_cb(self, get_value_cb: 'lv_anim_get_value_cb_t') -> 'None':
        def wrap_get_value_cb(original_get_value_cb):
            def get_value_cb(_a0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                return original_get_value_cb(a0)
            return ffi.callback('int32_t (*)(lv_anim_t*)', get_value_cb)
        if isinstance(get_value_cb, ffi.CData):
            get_value_cb_wrapper = get_value_cb
        else:
            get_value_cb_wrapper = self._callbacks.get(get_value_cb)
        if not get_value_cb_wrapper:
            get_value_cb_wrapper = wrap_get_value_cb(get_value_cb)
            self._callbacks[get_value_cb] = get_value_cb_wrapper
        return _lvgl.lv_anim_set_get_value_cb(self._pointer, get_value_cb_wrapper)
    def set_completed_cb(self, completed_cb: 'lv_anim_completed_cb_t') -> 'None':
        def wrap_completed_cb(original_completed_cb):
            def completed_cb(_a0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                original_completed_cb(a0)
            return ffi.callback('void (*)(lv_anim_t*)', completed_cb)
        if isinstance(completed_cb, ffi.CData):
            completed_cb_wrapper = completed_cb
        else:
            completed_cb_wrapper = self._callbacks.get(completed_cb)
        if not completed_cb_wrapper:
            completed_cb_wrapper = wrap_completed_cb(completed_cb)
            self._callbacks[completed_cb] = completed_cb_wrapper
        return _lvgl.lv_anim_set_completed_cb(self._pointer, completed_cb_wrapper)
    def set_deleted_cb(self, deleted_cb: 'lv_anim_deleted_cb_t') -> 'None':
        def wrap_deleted_cb(original_deleted_cb):
            def deleted_cb(_a0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                original_deleted_cb(a0)
            return ffi.callback('void (*)(lv_anim_t*)', deleted_cb)
        if isinstance(deleted_cb, ffi.CData):
            deleted_cb_wrapper = deleted_cb
        else:
            deleted_cb_wrapper = self._callbacks.get(deleted_cb)
        if not deleted_cb_wrapper:
            deleted_cb_wrapper = wrap_deleted_cb(deleted_cb)
            self._callbacks[deleted_cb] = deleted_cb_wrapper
        return _lvgl.lv_anim_set_deleted_cb(self._pointer, deleted_cb_wrapper)
    def set_reverse_duration(self, duration: 'int') -> 'None':
        return _lvgl.lv_anim_set_reverse_duration(self._pointer, duration)
    def set_reverse_time(self, duration: 'int') -> 'None':
        return _lvgl.lv_anim_set_reverse_time(self._pointer, duration)
    def set_reverse_delay(self, delay: 'int') -> 'None':
        return _lvgl.lv_anim_set_reverse_delay(self._pointer, delay)
    def set_repeat_count(self, cnt: 'int') -> 'None':
        return _lvgl.lv_anim_set_repeat_count(self._pointer, cnt)
    def set_repeat_delay(self, delay: 'int') -> 'None':
        return _lvgl.lv_anim_set_repeat_delay(self._pointer, delay)
    def set_early_apply(self, en: 'bool') -> 'None':
        return _lvgl.lv_anim_set_early_apply(self._pointer, en)
    def set_user_data(self, user_data: 'str') -> 'None':
        if user_data is not None:
            user_data = user_data.encode('utf-8') + b'\x00'
            user_data = ffi.from_buffer(user_data)
            self._user_data.append(user_data)
        return _lvgl.lv_anim_set_user_data(self._pointer, ffi.NULL if user_data is None else user_data)
    def set_bezier3_param(self, x1: 'int', y1: 'int', x2: 'int', y2: 'int') -> 'None':
        return _lvgl.lv_anim_set_bezier3_param(self._pointer, x1, y1, x2, y2)
    def start(self) -> 'anim':
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_anim_start(self._pointer)
        return result if result._pointer else None
    def get_delay(self) -> 'int':
        return _lvgl.lv_anim_get_delay(self._pointer)
    def get_playtime(self) -> 'int':
        return _lvgl.lv_anim_get_playtime(self._pointer)
    def get_time(self) -> 'int':
        return _lvgl.lv_anim_get_time(self._pointer)
    def get_repeat_count(self) -> 'int':
        return _lvgl.lv_anim_get_repeat_count(self._pointer)
    def get_user_data(self) -> 'str':
        result = _lvgl.lv_anim_get_user_data(self._pointer)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
    def delete(self, exec_cb: 'lv_anim_exec_xcb_t') -> 'bool':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_N0, _i0):
                N0 = _N0
                i0 = _i0
                original_exec_cb(N0, i0)
            return ffi.callback('void (*)(void*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        return _lvgl.lv_anim_delete(self._pointer, exec_cb_wrapper)
    def get(self, exec_cb: 'lv_anim_exec_xcb_t') -> 'anim':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_N0, _i0):
                N0 = _N0
                i0 = _i0
                original_exec_cb(N0, i0)
            return ffi.callback('void (*)(void*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_anim_get(self._pointer, exec_cb_wrapper)
        return result if result._pointer else None
    def custom_delete(self, exec_cb: 'lv_anim_custom_exec_cb_t') -> 'bool':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_a0, _i0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                i0 = _i0
                original_exec_cb(a0, i0)
            return ffi.callback('void (*)(lv_anim_t*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        return _lvgl.lv_anim_custom_delete(self._pointer, exec_cb_wrapper)
    def custom_get(self, exec_cb: 'lv_anim_custom_exec_cb_t') -> 'anim':
        def wrap_exec_cb(original_exec_cb):
            def exec_cb(_a0, _i0):
                a0 = anim.__new__(anim)
                a0._pointer = _a0
                i0 = _i0
                original_exec_cb(a0, i0)
            return ffi.callback('void (*)(lv_anim_t*, int32_t)', exec_cb)
        if isinstance(exec_cb, ffi.CData):
            exec_cb_wrapper = exec_cb
        else:
            exec_cb_wrapper = self._callbacks.get(exec_cb)
        if not exec_cb_wrapper:
            exec_cb_wrapper = wrap_exec_cb(exec_cb)
            self._callbacks[exec_cb] = exec_cb_wrapper
        result = anim.__new__(anim)
        result._pointer = _lvgl.lv_anim_custom_get(self._pointer, exec_cb_wrapper)
        return result if result._pointer else None


################
# Functions

_callbacks = {}
_user_data = []

def init() -> 'None':
    return _lvgl.lv_init()
def deinit() -> 'None':
    return _lvgl.lv_deinit()
def is_initialized() -> 'bool':
    return _lvgl.lv_is_initialized()
def tick_inc(tick_period: 'int') -> 'None':
    return _lvgl.lv_tick_inc(tick_period)
def tick_get() -> 'int':
    return _lvgl.lv_tick_get()
def tick_elaps(prev_tick: 'int') -> 'int':
    return _lvgl.lv_tick_elaps(prev_tick)
def tick_set_cb(cb: 'lv_tick_get_cb_t') -> 'None':
    def wrap_cb(original_cb):
        def cb():
            return original_cb()
        return ffi.callback('uint32_t (*)()', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    return _lvgl.lv_tick_set_cb(cb_wrapper)
def timer_handler() -> 'int':
    return _lvgl.lv_timer_handler()
def timer_handler_run_in_period(period: 'int') -> 'int':
    return _lvgl.lv_timer_handler_run_in_period(period)
def timer_periodic_handler() -> 'None':
    return _lvgl.lv_timer_periodic_handler()
def timer_handler_set_resume_cb(cb: 'lv_timer_handler_resume_cb_t', data: 'None') -> 'None':
    def wrap_cb(original_cb):
        def cb(_data):
            data = _data
            original_cb(data)
        return ffi.callback('void (*)(void*)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    return _lvgl.lv_timer_handler_set_resume_cb(cb_wrapper, ffi.NULL if data is None else data)
def timer_create_basic() -> 'timer':
    result = timer.__new__(timer)
    result._pointer = _lvgl.lv_timer_create_basic()
    return result if result._pointer else None
def timer_create(timer_xcb: 'lv_timer_cb_t', period: 'int', user_data: 'str') -> 'timer':
    def wrap_timer_xcb(original_timer_xcb):
        def timer_xcb(_t0):
            t0 = timer.__new__(timer)
            t0._pointer = _t0
            original_timer_xcb(t0)
        return ffi.callback('void (*)(lv_timer_t*)', timer_xcb)
    if isinstance(timer_xcb, ffi.CData):
        timer_xcb_wrapper = timer_xcb
    else:
        timer_xcb_wrapper = _callbacks.get(timer_xcb)
    if not timer_xcb_wrapper:
        timer_xcb_wrapper = wrap_timer_xcb(timer_xcb)
        _callbacks[timer_xcb] = timer_xcb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    result = timer.__new__(timer)
    result._pointer = _lvgl.lv_timer_create(timer_xcb_wrapper, period, ffi.NULL if user_data is None else user_data)
    return result if result._pointer else None
def timer_enable(en: 'bool') -> 'None':
    return _lvgl.lv_timer_enable(en)
def timer_get_idle() -> 'int':
    return _lvgl.lv_timer_get_idle()
def timer_get_time_until_next() -> 'int':
    return _lvgl.lv_timer_get_time_until_next()
def cubic_bezier(x: 'int', x1: 'int', y1: 'int', x2: 'int', y2: 'int') -> 'int':
    return _lvgl.lv_cubic_bezier(x, x1, y1, x2, y2)
def bezier3(t: 'int', u0: 'int', u1: 'int', u2: 'int', u3: 'int') -> 'int':
    return _lvgl.lv_bezier3(t, u0, u1, u2, u3)
def async_call(async_xcb: 'lv_async_cb_t', user_data: 'str') -> 'lv_result_t':
    def wrap_async_xcb(original_async_xcb):
        def async_xcb(_N0):
            N0 = _N0
            original_async_xcb(N0)
        return ffi.callback('void (*)(void*)', async_xcb)
    if isinstance(async_xcb, ffi.CData):
        async_xcb_wrapper = async_xcb
    else:
        async_xcb_wrapper = _callbacks.get(async_xcb)
    if not async_xcb_wrapper:
        async_xcb_wrapper = wrap_async_xcb(async_xcb)
        _callbacks[async_xcb] = async_xcb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    return _lvgl.lv_async_call(async_xcb_wrapper, ffi.NULL if user_data is None else user_data)
def async_call_cancel(async_xcb: 'lv_async_cb_t', user_data: 'str') -> 'lv_result_t':
    def wrap_async_xcb(original_async_xcb):
        def async_xcb(_N0):
            N0 = _N0
            original_async_xcb(N0)
        return ffi.callback('void (*)(void*)', async_xcb)
    if isinstance(async_xcb, ffi.CData):
        async_xcb_wrapper = async_xcb
    else:
        async_xcb_wrapper = _callbacks.get(async_xcb)
    if not async_xcb_wrapper:
        async_xcb_wrapper = wrap_async_xcb(async_xcb)
        _callbacks[async_xcb] = async_xcb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    return _lvgl.lv_async_call_cancel(async_xcb_wrapper, ffi.NULL if user_data is None else user_data)
def anim_delete_all() -> 'None':
    return _lvgl.lv_anim_delete_all()
def anim_get_timer() -> 'timer':
    result = timer.__new__(timer)
    result._pointer = _lvgl.lv_anim_get_timer()
    return result if result._pointer else None
def anim_count_running() -> 'int':
    return _lvgl.lv_anim_count_running()
def anim_speed(speed: 'int') -> 'int':
    return _lvgl.lv_anim_speed(speed)
def anim_speed_clamped(speed: 'int', min_time: 'int', max_time: 'int') -> 'int':
    return _lvgl.lv_anim_speed_clamped(speed, min_time, max_time)
def anim_resolve_speed(speed: 'int', start: 'int', end: 'int') -> 'int':
    return _lvgl.lv_anim_resolve_speed(speed, start, end)
def anim_speed_to_time(speed: 'int', start: 'int', end: 'int') -> 'int':
    return _lvgl.lv_anim_speed_to_time(speed, start, end)
def anim_refr_now() -> 'None':
    return _lvgl.lv_anim_refr_now()
def anim_path_linear(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_linear(a._pointer if a else ffi.NULL)
def anim_path_ease_in(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_ease_in(a._pointer if a else ffi.NULL)
def anim_path_ease_out(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_ease_out(a._pointer if a else ffi.NULL)
def anim_path_ease_in_out(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_ease_in_out(a._pointer if a else ffi.NULL)
def anim_path_overshoot(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_overshoot(a._pointer if a else ffi.NULL)
def anim_path_bounce(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_bounce(a._pointer if a else ffi.NULL)
def anim_path_step(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_step(a._pointer if a else ffi.NULL)
def anim_path_custom_bezier3(a: 'anim') -> 'int':
    return _lvgl.lv_anim_path_custom_bezier3(a._pointer if a else ffi.NULL)
def anim_timeline_create() -> 'anim_timeline':
    result = anim_timeline.__new__(anim_timeline)
    result._pointer = _lvgl.lv_anim_timeline_create()
    return result if result._pointer else None
def pct(x: 'int') -> 'int':
    return _lvgl.lv_pct(x)
def pct_to_px(v: 'int', base: 'int') -> 'int':
    return _lvgl.lv_pct_to_px(v, base)
def color_format_get_bpp(cf: 'COLOR_FORMAT') -> 'int':
    return _lvgl.lv_color_format_get_bpp(cf.value if cf and isinstance(cf, Enum) else (cf or 0))
def color_format_get_size(cf: 'COLOR_FORMAT') -> 'int':
    return _lvgl.lv_color_format_get_size(cf.value if cf and isinstance(cf, Enum) else (cf or 0))
def color_format_has_alpha(src_cf: 'COLOR_FORMAT') -> 'bool':
    return _lvgl.lv_color_format_has_alpha(src_cf.value if src_cf and isinstance(src_cf, Enum) else (src_cf or 0))
def color_to_32(color: 'lv_color_t', opa: 'OPA') -> 'lv_color32_t':
    return _lvgl.lv_color_to_32(color, opa.value if opa and isinstance(opa, Enum) else (opa or 0))
def color_to_int(c: 'lv_color_t') -> 'int':
    return _lvgl.lv_color_to_int(c)
def color_eq(c1: 'lv_color_t', c2: 'lv_color_t') -> 'bool':
    return _lvgl.lv_color_eq(c1, c2)
def color32_eq(c1: 'lv_color32_t', c2: 'lv_color32_t') -> 'bool':
    return _lvgl.lv_color32_eq(c1, c2)
def color_hex(c: 'int') -> 'lv_color_t':
    return _lvgl.lv_color_hex(c)
def color_make(r: 'int', g: 'int', b: 'int') -> 'lv_color_t':
    return _lvgl.lv_color_make(r, g, b)
def color32_make(r: 'int', g: 'int', b: 'int', a: 'int') -> 'lv_color32_t':
    return _lvgl.lv_color32_make(r, g, b, a)
def color_hex3(c: 'int') -> 'lv_color_t':
    return _lvgl.lv_color_hex3(c)
def color_to_u16(color: 'lv_color_t') -> 'int':
    return _lvgl.lv_color_to_u16(color)
def color_to_u32(color: 'lv_color_t') -> 'int':
    return _lvgl.lv_color_to_u32(color)
def color_16_16_mix(c1: 'int', c2: 'int', mix: 'int') -> 'int':
    return _lvgl.lv_color_16_16_mix(c1, c2, mix)
def color_lighten(c: 'lv_color_t', lvl: 'OPA') -> 'lv_color_t':
    return _lvgl.lv_color_lighten(c, lvl.value if lvl and isinstance(lvl, Enum) else (lvl or 0))
def color_darken(c: 'lv_color_t', lvl: 'OPA') -> 'lv_color_t':
    return _lvgl.lv_color_darken(c, lvl.value if lvl and isinstance(lvl, Enum) else (lvl or 0))
def color_hsv_to_rgb(h: 'int', s: 'int', v: 'int') -> 'lv_color_t':
    return _lvgl.lv_color_hsv_to_rgb(h, s, v)
def color_rgb_to_hsv(r8: 'int', g8: 'int', b8: 'int') -> 'lv_color_hsv_t':
    return _lvgl.lv_color_rgb_to_hsv(r8, g8, b8)
def color_to_hsv(color: 'lv_color_t') -> 'lv_color_hsv_t':
    return _lvgl.lv_color_to_hsv(color)
def color_white() -> 'lv_color_t':
    return _lvgl.lv_color_white()
def color_black() -> 'lv_color_t':
    return _lvgl.lv_color_black()
def color_premultiply(c: 'lv_color32_t') -> 'None':
    return _lvgl.lv_color_premultiply(ffi.NULL if c is None else c)
def color16_premultiply(c: 'lv_color16_t', a: 'OPA') -> 'None':
    return _lvgl.lv_color16_premultiply(ffi.NULL if c is None else c, a.value if a and isinstance(a, Enum) else (a or 0))
def color_luminance(c: 'lv_color_t') -> 'int':
    return _lvgl.lv_color_luminance(c)
def color16_luminance(c: 'lv_color16_t') -> 'int':
    return _lvgl.lv_color16_luminance(c)
def color24_luminance(c: 'int') -> 'int':
    return _lvgl.lv_color24_luminance(ffi.NULL if c is None else c)
def color32_luminance(c: 'lv_color32_t') -> 'int':
    return _lvgl.lv_color32_luminance(c)
def palette_main(p: 'PALETTE') -> 'lv_color_t':
    return _lvgl.lv_palette_main(p.value if p and isinstance(p, Enum) else (p or 0))
def palette_lighten(p: 'PALETTE', lvl: 'int') -> 'lv_color_t':
    return _lvgl.lv_palette_lighten(p.value if p and isinstance(p, Enum) else (p or 0), lvl)
def palette_darken(p: 'PALETTE', lvl: 'int') -> 'lv_color_t':
    return _lvgl.lv_palette_darken(p.value if p and isinstance(p, Enum) else (p or 0), lvl)
def color_mix(c1: 'lv_color_t', c2: 'lv_color_t', mix: 'int') -> 'lv_color_t':
    return _lvgl.lv_color_mix(c1, c2, mix)
def color_mix32(fg: 'lv_color32_t', bg: 'lv_color32_t') -> 'lv_color32_t':
    return _lvgl.lv_color_mix32(fg, bg)
def color_brightness(c: 'lv_color_t') -> 'int':
    return _lvgl.lv_color_brightness(c)
def color_filter_dsc_init(dsc: 'lv_color_filter_dsc_t', cb: 'lv_color_filter_cb_t') -> 'None':
    def wrap_cb(original_cb):
        def cb(__0, _c0, _o0):
            _0 = __0
            c0 = _c0
            o0 = _o0
            return original_cb(_0, c0, o0)
        return ffi.callback('lv_color_t (*)(_lv_color_filter_dsc_t*, lv_color_t, lv_opa_t)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    return _lvgl.lv_color_filter_dsc_init(ffi.NULL if dsc is None else dsc, cb_wrapper)
def color_over32(fg: 'lv_color32_t', bg: 'lv_color32_t') -> 'lv_color32_t':
    return _lvgl.lv_color_over32(fg, bg)
def draw_buf_get_handlers() -> 'draw_buf_handlers':
    result = draw_buf_handlers.__new__(draw_buf_handlers)
    result._pointer = _lvgl.lv_draw_buf_get_handlers()
    return result if result._pointer else None
def draw_buf_get_font_handlers() -> 'draw_buf_handlers':
    result = draw_buf_handlers.__new__(draw_buf_handlers)
    result._pointer = _lvgl.lv_draw_buf_get_font_handlers()
    return result if result._pointer else None
def draw_buf_get_image_handlers() -> 'draw_buf_handlers':
    result = draw_buf_handlers.__new__(draw_buf_handlers)
    result._pointer = _lvgl.lv_draw_buf_get_image_handlers()
    return result if result._pointer else None
def draw_buf_width_to_stride(w: 'int', color_format: 'COLOR_FORMAT') -> 'int':
    return _lvgl.lv_draw_buf_width_to_stride(w, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
def draw_buf_create(w: 'int', h: 'int', cf: 'COLOR_FORMAT', stride: 'int') -> 'draw_buf':
    result = draw_buf.__new__(draw_buf)
    result._pointer = _lvgl.lv_draw_buf_create(w, h, cf.value if cf and isinstance(cf, Enum) else (cf or 0), stride)
    return result if result._pointer else None
def circle_buf_create(capacity: 'int', element_size: 'int') -> 'circle_buf':
    result = circle_buf.__new__(circle_buf)
    result._pointer = _lvgl.lv_circle_buf_create(capacity, element_size)
    return result if result._pointer else None
def tree_walk(node: 'tree_node', mode: 'lv_tree_walk_mode_t', cb: 'lv_tree_traverse_cb_t', bcb: 'lv_tree_before_cb_t', acb: 'lv_tree_after_cb_t', user_data: 'str') -> 'bool':
    def wrap_cb(original_cb):
        def cb(_node, _user_data):
            node = tree_node.__new__(tree_node)
            node._pointer = _node
            user_data = _user_data
            return original_cb(node, user_data)
        return ffi.callback('bool (*)(lv_tree_node_t*, void*)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    def wrap_bcb(original_bcb):
        def bcb(_node, _user_data):
            node = tree_node.__new__(tree_node)
            node._pointer = _node
            user_data = _user_data
            return original_bcb(node, user_data)
        return ffi.callback('bool (*)(lv_tree_node_t*, void*)', bcb)
    if isinstance(bcb, ffi.CData):
        bcb_wrapper = bcb
    else:
        bcb_wrapper = _callbacks.get(bcb)
    if not bcb_wrapper:
        bcb_wrapper = wrap_bcb(bcb)
        _callbacks[bcb] = bcb_wrapper
    def wrap_acb(original_acb):
        def acb(_node, _user_data):
            node = tree_node.__new__(tree_node)
            node._pointer = _node
            user_data = _user_data
            original_acb(node, user_data)
        return ffi.callback('void (*)(lv_tree_node_t*, void*)', acb)
    if isinstance(acb, ffi.CData):
        acb_wrapper = acb
    else:
        acb_wrapper = _callbacks.get(acb)
    if not acb_wrapper:
        acb_wrapper = wrap_acb(acb)
        _callbacks[acb] = acb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    return _lvgl.lv_tree_walk(node._pointer if node else ffi.NULL, mode, cb_wrapper, bcb_wrapper, acb_wrapper, ffi.NULL if user_data is None else user_data)
def image_cache_init(size: 'int') -> 'lv_result_t':
    return _lvgl.lv_image_cache_init(size)
def image_cache_resize(new_size: 'int', evict_now: 'bool') -> 'None':
    return _lvgl.lv_image_cache_resize(new_size, evict_now)
def image_cache_is_enabled() -> 'bool':
    return _lvgl.lv_image_cache_is_enabled()
def image_cache_iter_create() -> 'iter':
    result = iter.__new__(iter)
    result._pointer = _lvgl.lv_image_cache_iter_create()
    return result if result._pointer else None
def image_cache_dump() -> 'None':
    return _lvgl.lv_image_cache_dump()
def font_get_default() -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_font_get_default()
    return result if result._pointer else None
def text_get_size(size_res: 'point', text: 'str', font: 'font', letter_space: 'int', line_space: 'int', max_width: 'int', flag: 'TEXT_FLAG') -> 'None':
    return _lvgl.lv_text_get_size(size_res._pointer if size_res else ffi.NULL, text.encode('utf-8'), font._pointer if font else ffi.NULL, letter_space, line_space, max_width, flag.value if flag and isinstance(flag, Enum) else (flag or 0))
def text_get_width(txt: 'str', length: 'int', font: 'font', letter_space: 'int') -> 'int':
    return _lvgl.lv_text_get_width(txt.encode('utf-8'), length, font._pointer if font else ffi.NULL, letter_space)
def text_get_width_with_flags(txt: 'str', length: 'int', font: 'font', letter_space: 'int', flags: 'TEXT_FLAG') -> 'int':
    return _lvgl.lv_text_get_width_with_flags(txt.encode('utf-8'), length, font._pointer if font else ffi.NULL, letter_space, flags.value if flags and isinstance(flags, Enum) else (flags or 0))
def text_is_cmd(state: 'lv_text_cmd_state_t', c: 'int') -> 'bool':
    return _lvgl.lv_text_is_cmd(ffi.NULL if state is None else state, c)
def layout_register(cb: 'lv_layout_update_cb_t', user_data: 'str') -> 'int':
    def wrap_cb(original_cb):
        def cb(_o0, _user_data):
            o0 = obj.__new__(obj)
            o0._pointer = _o0
            user_data = _user_data
            original_cb(o0, user_data)
        return ffi.callback('void (*)(lv_obj_t*, void*)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    return _lvgl.lv_layout_register(cb_wrapper, ffi.NULL if user_data is None else user_data)
def flex_init() -> 'None':
    return _lvgl.lv_flex_init()
def grid_init() -> 'None':
    return _lvgl.lv_grid_init()
def grid_fr(x: 'int') -> 'int':
    return _lvgl.lv_grid_fr(x)
def style_register_prop(flag: 'int') -> 'lv_style_prop_t':
    return _lvgl.lv_style_register_prop(flag)
def style_get_num_custom_props() -> 'lv_style_prop_t':
    return _lvgl.lv_style_get_num_custom_props()
def style_prop_get_default(prop: 'lv_style_prop_t') -> 'lv_style_value_t':
    return _lvgl.lv_style_prop_get_default(prop)
def style_prop_lookup_flags(prop: 'lv_style_prop_t') -> 'int':
    return _lvgl.lv_style_prop_lookup_flags(prop)
def event_register_id() -> 'int':
    return _lvgl.lv_event_register_id()
def event_code_get_name(code: 'EVENT_CODE') -> 'str':
        result = _lvgl.lv_event_code_get_name(code.value if code and isinstance(code, Enum) else (code or 0))
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
def display_create(hor_res: 'int', ver_res: 'int') -> 'display':
    result = display.__new__(display)
    result._pointer = _lvgl.lv_display_create(hor_res, ver_res)
    return result if result._pointer else None
def display_get_default() -> 'display':
    result = display.__new__(display)
    result._pointer = _lvgl.lv_display_get_default()
    return result if result._pointer else None
def screen_load(scr: 'obj') -> 'None':
    return _lvgl.lv_screen_load(scr._pointer if scr else ffi.NULL)
def screen_load_anim(scr: 'obj', anim_type: 'SCREEN_LOAD_ANIM', time: 'int', delay: 'int', auto_del: 'bool') -> 'None':
    return _lvgl.lv_screen_load_anim(scr._pointer if scr else ffi.NULL, anim_type.value if anim_type and isinstance(anim_type, Enum) else (anim_type or 0), time, delay, auto_del)
def screen_active() -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_screen_active()
    return result if result._pointer else None
def layer_top() -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_layer_top()
    return result if result._pointer else None
def layer_sys() -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_layer_sys()
    return result if result._pointer else None
def layer_bottom() -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_layer_bottom()
    return result if result._pointer else None
def dpx(n: 'int') -> 'int':
    return _lvgl.lv_dpx(n)
def clamp_width(width: 'int', min_width: 'int', max_width: 'int', ref_width: 'int') -> 'int':
    return _lvgl.lv_clamp_width(width, min_width, max_width, ref_width)
def clamp_height(height: 'int', min_height: 'int', max_height: 'int', ref_height: 'int') -> 'int':
    return _lvgl.lv_clamp_height(height, min_height, max_height, ref_height)
def obj_enable_style_refresh(en: 'bool') -> 'None':
    return _lvgl.lv_obj_enable_style_refresh(en)
def image_decoder_create() -> 'image_decoder':
    result = image_decoder.__new__(image_decoder)
    result._pointer = _lvgl.lv_image_decoder_create()
    return result if result._pointer else None
def draw_init() -> 'None':
    return _lvgl.lv_draw_init()
def draw_deinit() -> 'None':
    return _lvgl.lv_draw_deinit()
def draw_create_unit(size: 'size_t') -> 'None':
    return _lvgl.lv_draw_create_unit(size)
def draw_add_task(layer: 'layer', coords: 'area') -> 'draw_task':
    result = draw_task.__new__(draw_task)
    result._pointer = _lvgl.lv_draw_add_task(layer._pointer if layer else ffi.NULL, coords._pointer if coords else ffi.NULL)
    return result if result._pointer else None
def draw_finalize_task_creation(layer: 'layer', t: 'draw_task') -> 'None':
    return _lvgl.lv_draw_finalize_task_creation(layer._pointer if layer else ffi.NULL, t._pointer if t else ffi.NULL)
def draw_dispatch() -> 'None':
    return _lvgl.lv_draw_dispatch()
def draw_dispatch_layer(disp: 'display', layer: 'layer') -> 'bool':
    return _lvgl.lv_draw_dispatch_layer(disp._pointer if disp else ffi.NULL, layer._pointer if layer else ffi.NULL)
def draw_dispatch_wait_for_request() -> 'None':
    return _lvgl.lv_draw_dispatch_wait_for_request()
def draw_wait_for_finish() -> 'None':
    return _lvgl.lv_draw_wait_for_finish()
def draw_dispatch_request() -> 'None':
    return _lvgl.lv_draw_dispatch_request()
def draw_get_unit_count() -> 'int':
    return _lvgl.lv_draw_get_unit_count()
def draw_get_available_task(layer: 'layer', t_prev: 'draw_task', draw_unit_id: 'int') -> 'draw_task':
    result = draw_task.__new__(draw_task)
    result._pointer = _lvgl.lv_draw_get_available_task(layer._pointer if layer else ffi.NULL, t_prev._pointer if t_prev else ffi.NULL, draw_unit_id)
    return result if result._pointer else None
def draw_get_next_available_task(layer: 'layer', t_prev: 'draw_task', draw_unit_id: 'int') -> 'draw_task':
    result = draw_task.__new__(draw_task)
    result._pointer = _lvgl.lv_draw_get_next_available_task(layer._pointer if layer else ffi.NULL, t_prev._pointer if t_prev else ffi.NULL, draw_unit_id)
    return result if result._pointer else None
def draw_get_dependent_count(t_check: 'draw_task') -> 'int':
    return _lvgl.lv_draw_get_dependent_count(t_check._pointer if t_check else ffi.NULL)
def draw_layer_create(parent_layer: 'layer', color_format: 'COLOR_FORMAT', area: 'area') -> 'layer':
    result = layer.__new__(layer)
    result._pointer = _lvgl.lv_draw_layer_create(parent_layer._pointer if parent_layer else ffi.NULL, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0), area._pointer if area else ffi.NULL)
    return result if result._pointer else None
def draw_layer_init(layer: 'layer', parent_layer: 'layer', color_format: 'COLOR_FORMAT', area: 'area') -> 'None':
    return _lvgl.lv_draw_layer_init(layer._pointer if layer else ffi.NULL, parent_layer._pointer if parent_layer else ffi.NULL, color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0), area._pointer if area else ffi.NULL)
def draw_layer_go_to_xy(layer: 'layer', x: 'int', y: 'int') -> 'None':
    return _lvgl.lv_draw_layer_go_to_xy(layer._pointer if layer else ffi.NULL, x, y)
def draw_fill(layer: 'layer', dsc: 'draw_fill_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_fill(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_border(layer: 'layer', dsc: 'draw_border_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_border(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_box_shadow(layer: 'layer', dsc: 'draw_box_shadow_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_box_shadow(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_rect(layer: 'layer', dsc: 'draw_rect_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_rect(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_label(layer: 'layer', dsc: 'draw_label_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_label(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_character(layer: 'layer', dsc: 'draw_label_dsc', point: 'point', unicode_letter: 'int') -> 'None':
    return _lvgl.lv_draw_character(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, point._pointer if point else ffi.NULL, unicode_letter)
def draw_letter(layer: 'layer', dsc: 'draw_letter_dsc', point: 'point') -> 'None':
    return _lvgl.lv_draw_letter(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, point._pointer if point else ffi.NULL)
def draw_label_iterate_characters(t: 'draw_task', dsc: 'draw_label_dsc', coords: 'area', cb: 'lv_draw_glyph_cb_t') -> 'None':
    def wrap_cb(original_cb):
        def cb(_t, _dsc, _fill_dsc, _fill_area):
            t = draw_task.__new__(draw_task)
            t._pointer = _t
            dsc = draw_glyph_dsc.__new__(draw_glyph_dsc)
            dsc._pointer = _dsc
            fill_dsc = draw_fill_dsc.__new__(draw_fill_dsc)
            fill_dsc._pointer = _fill_dsc
            fill_area = area.__new__(area)
            fill_area._pointer = _fill_area
            original_cb(t, dsc, fill_dsc, fill_area)
        return ffi.callback('void (*)(lv_draw_task_t*, lv_draw_glyph_dsc_t*, lv_draw_fill_dsc_t*, lv_area_t*)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    return _lvgl.lv_draw_label_iterate_characters(t._pointer if t else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL, cb_wrapper)
def draw_image(layer: 'layer', dsc: 'draw_image_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_image(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_layer(layer: 'layer', dsc: 'draw_image_dsc', coords: 'area') -> 'None':
    return _lvgl.lv_draw_layer(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL, coords._pointer if coords else ffi.NULL)
def draw_line(layer: 'layer', dsc: 'draw_line_dsc') -> 'None':
    return _lvgl.lv_draw_line(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL)
def draw_arc(layer: 'layer', dsc: 'draw_arc_dsc') -> 'None':
    return _lvgl.lv_draw_arc(layer._pointer if layer else ffi.NULL, dsc._pointer if dsc else ffi.NULL)
def draw_arc_get_area(x: 'int', y: 'int', radius: 'int', start_angle: 'lv_value_precise_t', end_angle: 'lv_value_precise_t', w: 'int', rounded: 'bool', area: 'area') -> 'None':
    return _lvgl.lv_draw_arc_get_area(x, y, radius, start_angle, end_angle, w, rounded, area._pointer if area else ffi.NULL)
def draw_triangle(layer: 'layer', draw_dsc: 'draw_triangle_dsc') -> 'None':
    return _lvgl.lv_draw_triangle(layer._pointer if layer else ffi.NULL, draw_dsc._pointer if draw_dsc else ffi.NULL)
def group_create() -> 'group':
    result = group.__new__(group)
    result._pointer = _lvgl.lv_group_create()
    return result if result._pointer else None
def group_get_default() -> 'group':
    result = group.__new__(group)
    result._pointer = _lvgl.lv_group_get_default()
    return result if result._pointer else None
def group_get_count() -> 'int':
    return _lvgl.lv_group_get_count()
def group_by_index(index: 'int') -> 'group':
    result = group.__new__(group)
    result._pointer = _lvgl.lv_group_by_index(index)
    return result if result._pointer else None
def indev_create() -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_indev_create()
    return result if result._pointer else None
def indev_active() -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_indev_active()
    return result if result._pointer else None
def indev_get_active_obj() -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_indev_get_active_obj()
    return result if result._pointer else None
def refr_now(disp: 'display') -> 'None':
    return _lvgl.lv_refr_now(disp._pointer if disp else ffi.NULL)
def binfont_create(path: 'str') -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_binfont_create(path.encode('utf-8'))
    return result if result._pointer else None
def binfont_destroy(font: 'font') -> 'None':
    return _lvgl.lv_binfont_destroy(font._pointer if font else ffi.NULL)
def canvas_buf_size(w: 'int', h: 'int', bpp: 'int', stride: 'int') -> 'int':
    return _lvgl.lv_canvas_buf_size(w, h, bpp, stride)
def list_create(parent: 'obj') -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_list_create(parent._pointer if parent else ffi.NULL)
    return result if result._pointer else None
def list_add_text(list: 'obj', txt: 'str') -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_list_add_text(list._pointer if list else ffi.NULL, txt.encode('utf-8'))
    return result if result._pointer else None
def list_add_button(list: 'obj', icon: 'None', txt: 'str') -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_list_add_button(list._pointer if list else ffi.NULL, ffi.NULL if icon is None else icon, txt.encode('utf-8'))
    return result if result._pointer else None
def list_get_button_text(list: 'obj', btn: 'obj') -> 'str':
        result = _lvgl.lv_list_get_button_text(list._pointer if list else ffi.NULL, btn._pointer if btn else ffi.NULL)
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
def list_set_button_text(list: 'obj', btn: 'obj', txt: 'str') -> 'None':
    return _lvgl.lv_list_set_button_text(list._pointer if list else ffi.NULL, btn._pointer if btn else ffi.NULL, txt.encode('utf-8'))
def span_stack_init() -> 'None':
    return _lvgl.lv_span_stack_init()
def span_stack_deinit() -> 'None':
    return _lvgl.lv_span_stack_deinit()
def spinner_create(parent: 'obj') -> 'obj':
    result = obj.__new__(obj)
    result._pointer = _lvgl.lv_spinner_create(parent._pointer if parent else ffi.NULL)
    return result if result._pointer else None
def spinner_set_anim_params(obj: 'obj', t: 'int', angle: 'int') -> 'None':
    return _lvgl.lv_spinner_set_anim_params(obj._pointer if obj else ffi.NULL, t, angle)
def bin_decoder_init() -> 'None':
    return _lvgl.lv_bin_decoder_init()
def bin_decoder_info(decoder: 'image_decoder', dsc: 'image_decoder_dsc', header: 'image_header') -> 'lv_result_t':
    return _lvgl.lv_bin_decoder_info(decoder._pointer if decoder else ffi.NULL, dsc._pointer if dsc else ffi.NULL, header._pointer if header else ffi.NULL)
def bin_decoder_get_area(decoder: 'image_decoder', dsc: 'image_decoder_dsc', full_area: 'area', decoded_area: 'area') -> 'lv_result_t':
    return _lvgl.lv_bin_decoder_get_area(decoder._pointer if decoder else ffi.NULL, dsc._pointer if dsc else ffi.NULL, full_area._pointer if full_area else ffi.NULL, decoded_area._pointer if decoded_area else ffi.NULL)
def bin_decoder_open(decoder: 'image_decoder', dsc: 'image_decoder_dsc') -> 'lv_result_t':
    return _lvgl.lv_bin_decoder_open(decoder._pointer if decoder else ffi.NULL, dsc._pointer if dsc else ffi.NULL)
def bin_decoder_close(decoder: 'image_decoder', dsc: 'image_decoder_dsc') -> 'None':
    return _lvgl.lv_bin_decoder_close(decoder._pointer if decoder else ffi.NULL, dsc._pointer if dsc else ffi.NULL)
def lodepng_init() -> 'None':
    return _lvgl.lv_lodepng_init()
def lodepng_deinit() -> 'None':
    return _lvgl.lv_lodepng_deinit()
def tiny_ttf_create_file(path: 'str', font_size: 'int') -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_tiny_ttf_create_file(path.encode('utf-8'), font_size)
    return result if result._pointer else None
def tiny_ttf_create_file_ex(path: 'str', font_size: 'int', kerning: 'FONT_KERNING', cache_size: 'size_t') -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_tiny_ttf_create_file_ex(path.encode('utf-8'), font_size, kerning.value if kerning and isinstance(kerning, Enum) else (kerning or 0), cache_size)
    return result if result._pointer else None
def tiny_ttf_create_data(data: 'None', data_size: 'size_t', font_size: 'int') -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_tiny_ttf_create_data(ffi.NULL if data is None else data, data_size, font_size)
    return result if result._pointer else None
def tiny_ttf_create_data_ex(data: 'None', data_size: 'size_t', font_size: 'int', kerning: 'FONT_KERNING', cache_size: 'size_t') -> 'font':
    result = font.__new__(font)
    result._pointer = _lvgl.lv_tiny_ttf_create_data_ex(ffi.NULL if data is None else data, data_size, font_size, kerning.value if kerning and isinstance(kerning, Enum) else (kerning or 0), cache_size)
    return result if result._pointer else None
def tiny_ttf_set_size(font: 'font', font_size: 'int') -> 'None':
    return _lvgl.lv_tiny_ttf_set_size(font._pointer if font else ffi.NULL, font_size)
def tiny_ttf_destroy(font: 'font') -> 'None':
    return _lvgl.lv_tiny_ttf_destroy(font._pointer if font else ffi.NULL)
def draw_sw_i1_to_argb8888(buf_i1: 'None', buf_argb8888: 'None', width: 'int', height: 'int', buf_i1_stride: 'int', buf_argb8888_stride: 'int', index0_color: 'int', index1_color: 'int') -> 'None':
    return _lvgl.lv_draw_sw_i1_to_argb8888(ffi.NULL if buf_i1 is None else buf_i1, ffi.NULL if buf_argb8888 is None else buf_argb8888, width, height, buf_i1_stride, buf_argb8888_stride, index0_color, index1_color)
def draw_sw_rgb565_swap(buf: 'None', buf_size_px: 'int') -> 'None':
    return _lvgl.lv_draw_sw_rgb565_swap(ffi.NULL if buf is None else buf, buf_size_px)
def draw_sw_i1_invert(buf: 'None', buf_size: 'int') -> 'None':
    return _lvgl.lv_draw_sw_i1_invert(ffi.NULL if buf is None else buf, buf_size)
def draw_sw_i1_convert_to_vtiled(buf: 'None', buf_size: 'int', width: 'int', height: 'int', out_buf: 'None', out_buf_size: 'int', bit_order_lsb: 'bool') -> 'None':
    return _lvgl.lv_draw_sw_i1_convert_to_vtiled(ffi.NULL if buf is None else buf, buf_size, width, height, ffi.NULL if out_buf is None else out_buf, out_buf_size, bit_order_lsb)
def draw_sw_rotate(src: 'None', dest: 'None', src_width: 'int', src_height: 'int', src_stride: 'int', dest_stride: 'int', rotation: 'DISPLAY_ROTATION', color_format: 'COLOR_FORMAT') -> 'None':
    return _lvgl.lv_draw_sw_rotate(ffi.NULL if src is None else src, ffi.NULL if dest is None else dest, src_width, src_height, src_stride, dest_stride, rotation.value if rotation and isinstance(rotation, Enum) else (rotation or 0), color_format.value if color_format and isinstance(color_format, Enum) else (color_format or 0))
def theme_get_from_obj(obj: 'obj') -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_get_from_obj(obj._pointer if obj else ffi.NULL)
    return result if result._pointer else None
def theme_default_init(disp: 'display', color_primary: 'lv_color_t', color_secondary: 'lv_color_t', dark: 'bool', font: 'font') -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_default_init(disp._pointer if disp else ffi.NULL, color_primary, color_secondary, dark, font._pointer if font else ffi.NULL)
    return result if result._pointer else None
def theme_default_get() -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_default_get()
    return result if result._pointer else None
def theme_default_is_inited() -> 'bool':
    return _lvgl.lv_theme_default_is_inited()
def theme_default_deinit() -> 'None':
    return _lvgl.lv_theme_default_deinit()
def theme_mono_init(disp: 'display', dark_bg: 'bool', font: 'font') -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_mono_init(disp._pointer if disp else ffi.NULL, dark_bg, font._pointer if font else ffi.NULL)
    return result if result._pointer else None
def theme_mono_is_inited() -> 'bool':
    return _lvgl.lv_theme_mono_is_inited()
def theme_mono_deinit() -> 'None':
    return _lvgl.lv_theme_mono_deinit()
def theme_simple_init(disp: 'display') -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_simple_init(disp._pointer if disp else ffi.NULL)
    return result if result._pointer else None
def theme_simple_is_inited() -> 'bool':
    return _lvgl.lv_theme_simple_is_inited()
def theme_simple_get() -> 'theme':
    result = theme.__new__(theme)
    result._pointer = _lvgl.lv_theme_simple_get()
    return result if result._pointer else None
def theme_simple_deinit() -> 'None':
    return _lvgl.lv_theme_simple_deinit()
def linux_fbdev_create() -> 'display':
    result = display.__new__(display)
    result._pointer = _lvgl.lv_linux_fbdev_create()
    return result if result._pointer else None
def linux_fbdev_set_file(disp: 'display', file: 'str') -> 'None':
    return _lvgl.lv_linux_fbdev_set_file(disp._pointer if disp else ffi.NULL, file.encode('utf-8'))
def linux_fbdev_set_force_refresh(disp: 'display', enabled: 'bool') -> 'None':
    return _lvgl.lv_linux_fbdev_set_force_refresh(disp._pointer if disp else ffi.NULL, enabled)
def evdev_create(indev_type: 'INDEV_TYPE', dev_path: 'str') -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_evdev_create(indev_type.value if indev_type and isinstance(indev_type, Enum) else (indev_type or 0), dev_path.encode('utf-8'))
    return result if result._pointer else None
def evdev_discovery_start(cb: 'lv_evdev_discovery_cb_t', user_data: 'str') -> 'lv_result_t':
    def wrap_cb(original_cb):
        def cb(_indev, _type, _user_data):
            indev = indev.__new__(indev)
            indev._pointer = _indev
            type = _type
            user_data = _user_data
            original_cb(indev, type, user_data)
        return ffi.callback('void (*)(lv_indev_t*, lv_evdev_type_t, void*)', cb)
    if isinstance(cb, ffi.CData):
        cb_wrapper = cb
    else:
        cb_wrapper = _callbacks.get(cb)
    if not cb_wrapper:
        cb_wrapper = wrap_cb(cb)
        _callbacks[cb] = cb_wrapper
    if user_data is not None:
        user_data = user_data.encode('utf-8') + b'\x00'
        user_data = ffi.from_buffer(user_data)
        _user_data.append(user_data)
    return _lvgl.lv_evdev_discovery_start(cb_wrapper, ffi.NULL if user_data is None else user_data)
def evdev_discovery_stop() -> 'lv_result_t':
    return _lvgl.lv_evdev_discovery_stop()
def evdev_grab_device(indev: 'indev') -> 'None':
    return _lvgl.lv_evdev_grab_device(indev._pointer if indev else ffi.NULL)
def evdev_release_device(indev: 'indev') -> 'None':
    return _lvgl.lv_evdev_release_device(indev._pointer if indev else ffi.NULL)
def evdev_set_swap_axes(indev: 'indev', swap_axes: 'bool') -> 'None':
    return _lvgl.lv_evdev_set_swap_axes(indev._pointer if indev else ffi.NULL, swap_axes)
def evdev_set_calibration(indev: 'indev', min_x: 'int', min_y: 'int', max_x: 'int', max_y: 'int') -> 'None':
    return _lvgl.lv_evdev_set_calibration(indev._pointer if indev else ffi.NULL, min_x, min_y, max_x, max_y)
def evdev_delete(indev: 'indev') -> 'None':
    return _lvgl.lv_evdev_delete(indev._pointer if indev else ffi.NULL)
def os_get_idle_percent() -> 'int':
    return _lvgl.lv_os_get_idle_percent()
def mutex_init(mutex: 'lv_mutex_t') -> 'lv_result_t':
    return _lvgl.lv_mutex_init(ffi.NULL if mutex is None else mutex)
def mutex_lock(mutex: 'lv_mutex_t') -> 'lv_result_t':
    return _lvgl.lv_mutex_lock(ffi.NULL if mutex is None else mutex)
def mutex_lock_isr(mutex: 'lv_mutex_t') -> 'lv_result_t':
    return _lvgl.lv_mutex_lock_isr(ffi.NULL if mutex is None else mutex)
def mutex_unlock(mutex: 'lv_mutex_t') -> 'lv_result_t':
    return _lvgl.lv_mutex_unlock(ffi.NULL if mutex is None else mutex)
def mutex_delete(mutex: 'lv_mutex_t') -> 'lv_result_t':
    return _lvgl.lv_mutex_delete(ffi.NULL if mutex is None else mutex)
def lock() -> 'None':
    return _lvgl.lv_lock()
def lock_isr() -> 'lv_result_t':
    return _lvgl.lv_lock_isr()
def unlock() -> 'None':
    return _lvgl.lv_unlock()
def windows_get_indev_window_handle(indev: 'indev') -> 'HWND':
    return _lvgl.lv_windows_get_indev_window_handle(indev._pointer if indev else ffi.NULL)
def windows_acquire_pointer_indev(display: 'display') -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_windows_acquire_pointer_indev(display._pointer if display else ffi.NULL)
    return result if result._pointer else None
def windows_acquire_keypad_indev(display: 'display') -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_windows_acquire_keypad_indev(display._pointer if display else ffi.NULL)
    return result if result._pointer else None
def windows_acquire_encoder_indev(display: 'display') -> 'indev':
    result = indev.__new__(indev)
    result._pointer = _lvgl.lv_windows_acquire_encoder_indev(display._pointer if display else ffi.NULL)
    return result if result._pointer else None
def windows_create_display(title: 'str', hor_res: 'int', ver_res: 'int', zoom_level: 'int', allow_dpi_override: 'bool', simulator_mode: 'bool') -> 'display':
    result = display.__new__(display)
    result._pointer = _lvgl.lv_windows_create_display(ffi.NULL if title is None else title, hor_res, ver_res, zoom_level, allow_dpi_override, simulator_mode)
    return result if result._pointer else None
def windows_get_display_window_handle(display: 'display') -> 'HWND':
    return _lvgl.lv_windows_get_display_window_handle(display._pointer if display else ffi.NULL)
def windows_zoom_to_logical(physical: 'int', zoom_level: 'int') -> 'int':
    return _lvgl.lv_windows_zoom_to_logical(physical, zoom_level)
def windows_zoom_to_physical(logical: 'int', zoom_level: 'int') -> 'int':
    return _lvgl.lv_windows_zoom_to_physical(logical, zoom_level)
def windows_dpi_to_logical(physical: 'int', dpi: 'int') -> 'int':
    return _lvgl.lv_windows_dpi_to_logical(physical, dpi)
def windows_dpi_to_physical(logical: 'int', dpi: 'int') -> 'int':
    return _lvgl.lv_windows_dpi_to_physical(logical, dpi)
def bidi_calculate_align(align: 'lv_text_align_t', base_dir: 'lv_base_dir_t', txt: 'str') -> 'None':
    return _lvgl.lv_bidi_calculate_align(ffi.NULL if align is None else align, ffi.NULL if base_dir is None else base_dir, txt.encode('utf-8'))
def style_get_prop_group(prop: 'lv_style_prop_t') -> 'int':
    return _lvgl.lv_style_get_prop_group(prop)
def style_prop_has_flag(prop: 'lv_style_prop_t', flag: 'int') -> 'bool':
    return _lvgl.lv_style_prop_has_flag(prop, flag)
def obj_style_get_selector_state(selector: 'STATE') -> 'lv_state_t':
    return _lvgl.lv_obj_style_get_selector_state(selector.value if selector and isinstance(selector, Enum) else (selector or 0))
def obj_style_get_selector_part(selector: 'STATE') -> 'lv_part_t':
    return _lvgl.lv_obj_style_get_selector_part(selector.value if selector and isinstance(selector, Enum) else (selector or 0))
def task_handler() -> 'int':
    return _lvgl.lv_task_handler()
def version_major() -> 'int':
    return _lvgl.lv_version_major()
def version_minor() -> 'int':
    return _lvgl.lv_version_minor()
def version_patch() -> 'int':
    return _lvgl.lv_version_patch()
def version_info() -> 'str':
        result = _lvgl.lv_version_info()
        result = ffi.cast('char*', result)
        result = ffi.string(result)
        return result.decode('utf-8')
